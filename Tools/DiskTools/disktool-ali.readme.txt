DISKTOOL - disktool-ali.exe 

Usage: disktool-ali.exe [OPTION..]
Writes to file or drive

Options:
  -y, --yes              	yes to all questions.
  -p, --partition        	Partition (0=root, 1-4)
  -t, --target  [idx]    	Target Partition (0=root, 1-4)
  -d, --disk [id/file]   	Disk/device id
  -x, --offset [bytes position]   offset in disk
  -n, --ntfs                    patch ntfs
  -l, --length [num bytes]  	number of bytes to read
  -o, --operation [op]   	op =[write,extract,clone,writesig,boot,dread,dwrite,none]
  -f, --file             	bsource/target file for partition write/extract

example dwrite:
------------------------------------------------
rem write 64 bytes content of file 'partitiontables.bin' at offset 446
rem outputs nothing
set DISKID=2
disktool-ali.exe  -d %DISKID% -o dwrite -x 446 -l  64 -f partitiontables.bin
------------------------------------------------
dwrite is limited to 100mb block writes. for any bigger data, use whole partitions with write/extract


example dread:
------------------------------------------------
rem read 64 bytes at offset 446 into file 'partitiontables.bin'
rem outputs 'partitiontables.bin'
set DISKID=2
disktool-ali.exe  -d %DriveLetter% -o dread -x 446 -l  64 -f production_partitiontables.bin
------------------------------------------------
dread is limited to 100mb block read. for any bigger data, use whole partitions with write/extract


example extract:
------------------------------------------------
rem extracts partition 1 (1-4 indexed) into file 'partition.bin'
rem outputs 'partition.bin.sig', 'partition.bin.hash' and 'partition.bin'
set DISKID=2
set PARTITION=1
disktool-ali.exe  -d %DriveLetter% -o extract -p %PARTITION% -f partition.bin
------------------------------------------------
the command extracts a whole partition, and writes hash and signature to postfixed file partition.bin.hash and partition.bin.hash respectively.
note: extracted partitions will replace the NTFS magic signature to 'ALIPART'.

example write:
------------------------------------------------
rem writes file 'partition.bin' to target partition 1 (1-4 indexed)
rem outputs nothing
set DISKID=2
set PARTITION=1
disktool-ali.exe  -d %DISKID% -o write -t %PARTITION% -n -f partition.bin
------------------------------------------------
-t <partitionindex> target partition must be of exact same size as the file.
-n will patch 'ALIPART' signature to the NTFS magic signature.


example writesig
------------------------------------------------
rem writes file 'partition.bin.sig' after the target partition 1 (1-4 indexed).
rem outputs nothing
set DISKID=2
set PARTITION=4
disktool-ali.exe  -d %DISKID% -o writesig -t %PARTITION% -f partition.bin.sig
------------------------------------------------
write the content of input file (signature) to the sector after the last sector of a given partition (this requires a partition gap).


example boot
------------------------------------------------
rem writes file 'core.signed.img' to the first sector(s) on the disk (restoring partition tables).
rem outputs nothing
set DISKID=2
disktool-ali.exe  -d %DISKID% -o boot -f core.signed.img
------------------------------------------------
boot writes the contents of input file to the start of the disk, preserving partition table.

example vpart make
---------------------------------------------------
rem content of system_partition_bin.part = {name:"OS", source_partition:0, source_offset:0, target_partition:3, size:206848, file:production_os_partition.bin, hash:"66bc71773bdc2ea95f50af74a263aa74f97dbef9", sig:"5d702717d6c9d9761c69001e8d6d7ae607b25e9e2a99bb28823f3dc2000fdad9f13726115e996015"}
rem outputs written virtual partitions to shadow disk
set DISKID=2
set PARTITION=4
disktool-ali.exe -t %PARTITION% -o make -d %DISKID% -f production_system_partition.bin.part -f production_system_partition.bin.part
---------------------------------------------------
writes one or many virtual partitions to the shadow partition and appends disk_part struct to the first sector after defined partition (partition gap / empty space).