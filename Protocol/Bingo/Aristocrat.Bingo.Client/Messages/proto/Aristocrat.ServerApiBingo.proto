syntax = "proto3";
   
option csharp_namespace = "Aristocrat.ServerApiGateway";
   
package aristocrat_bingo_server_api_gateway;
 
message BingoGamePlayResponseMeta {
	message CardPlayed{
		uint32 serial = 1;
		int32 daubBitPattern = 2;  // The daub pattern of daubing all called balls.
		bool gewClaimable = 3;     // This card meets game-end-win criteria and can claim it.
	}
 
	message WinResult {
		int32 patternId = 1;        // The bingo pattern ID
		int32 payout = 2;           // The win amount, in currency
		int32 ballQuantity = 3;     // The number of balls called needed to achieve the pattern
		int32 bitPattern = 4;       // The daubs required for this pattern
		int32 paytableId = 5;
		string patternName = 6;
		uint32 cardSerial = 7;
		bool isGew = 8;             // Indicates whether this result is the game end win
		int32 winIndex = 9;         // The index value of the bingo paytable MatchingPattern won
	}
 
	repeated CardPlayed cards = 1;
	string ballCall = 2;
	repeated WinResult winResults = 3;
	string paytable = 4;
	int32 gameEndWinEligibility = 5;    // 0=NotEligible, 1=EligibleIfExactMatch, 2=AlwaysEligible, 3=GameInvalid, 4=EligibleIfExactMatchOnCurrentBall
	int32 joinBallNumber = 6;           // The number of balls called when the EGM joined the bingo game for this play
}
 
message BingoGamePlayMeta {
	// special patterns
	// persistent states (for example coin collection)
}

message BingoGameClaimWinMeta {
	uint32 cardSerial = 1;
}

message BingoGameOutcomeMeta {
	enum ReportType{
		Update = 0;
		End = 1;
	}
 
	message CardPlayed {
		uint32 serial = 1;
		int32 daubBitPattern = 2;
		bool gewClaimable = 3;     // This card met game end win criteria and could claim
	}
  
	// WinResult may be progressive win, payout is win amount from specific pattern win
	message WinResult {
		int32 patternId = 1;       // The bingo pattern ID
		int64 payout = 2;          // The win amount, in currency
		int32 ballQuantity = 3;    // The number of balls called needed to achieve the pattern
		int32 bitPattern = 4;      // The daubs required for this pattern
		int32 paytableId = 5;
		string patternName = 6;
		uint32 cardSerial = 7;
		bool isGew = 8;            // Indicates whether this result is the game end win
		int32 winIndex = 9;        // The index value of the bingo paytable MatchingPattern won
	}
  
	repeated CardPlayed cards = 1;
	string ballCall = 2;
	repeated WinResult winResults = 3;
	string paytable = 4;
	ReportType reportType = 5;
	int32 gameEndWinEligibility = 6;   // 0=NotEligible, 1=EligibleIfExactMatch, 2=AlwaysEligible, 3=GameInvalid, 4=EligibleIfExactMatchOnCurrentBall
	int32 joinBallNumber = 7;          // The number of balls called when the EGM joined the bingo game for this play
}