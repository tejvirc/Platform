<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Sas.UI.ConfigurationScreen.SasFeaturesPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"  
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Sas.UI.ViewModels"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu;assembly=Aristocrat.Monaco.Application.UI"
                               xmlns:controls="http://monaco.aristocrat.com/common"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               mc:Ignorable="d"
                               d:DataContext="{d:DesignInstance {x:Type viewModels:SasFeatureViewModel}}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <controls:BoolToVisibilityConverter x:Key="BoolToVisible"/>

            <Style TargetType="Label" BasedOn="{StaticResource MonacoLabel}">
                <Setter Property="Margin" Value="0 5"/>
            </Style>

            <Style TargetType="ComboBox" BasedOn="{StaticResource MonacoComboBox}">
                <Setter Property="Margin" Value="0 5"/>
                <Setter Property="MinWidth" Value="280"/>
            </Style>

            <Style TargetType="CheckBox" BasedOn="{StaticResource MonacoCheckBox}">
                <Setter Property="Margin" Value="0 5"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
            </Style>
            <Style x:Key="AutoCollapseRow"  TargetType="RowDefinition">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding IsAft}" Value="True">
                        <Setter Property="Height" Value="Auto"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding IsAft}" Value="False">
                        <Setter Property="Height" Value="0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid x:Name="MainGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <lex:LocProxy Name="TransferInLabelProxy" Source="{Binding  TransferInLabelResourceKey}" />
        <lex:LocProxy Name="FundTransferTitleLabelProxy" Source="{Binding  FundTransferTitleLabelResourceKey}" />
        <lex:LocProxy Name="TransferOutLabelProxy" Source="{Binding  TransferOutLabelResourceKey}" />

        <GroupBox x:Name="AftGroupBox" 
                  Header="{Binding ElementName=FundTransferTitleLabelProxy, Path=Result}" 
                  IsEnabled="{Binding InputEnabled}"
                  Visibility="{Binding IsFundTransferSettingsVisible, Converter={StaticResource BoolToVisible}}">
            <Grid x:Name="AftGrid">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Style="{StaticResource AutoCollapseRow}"/>
                    <RowDefinition Style="{StaticResource AutoCollapseRow}"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MinWidth="300"/>
                    <ColumnDefinition Width="*" MinWidth="150"/>
                </Grid.ColumnDefinitions>

                <!-- Aft/Eft In Section -->
                <Label x:Name="TransferInLabel" 
                       Grid.Row="0" 
                       Grid.Column="0" 
                       Margin="0 0 0 5"
                       Content="{Binding ElementName=TransferInLabelProxy, Path=Result}" />
                <CheckBox x:Name="AftInCheckBox" 
                  Grid.Row="0" 
                  Grid.Column="1" 
                  Margin="0 0 0 5"
                  IsEnabled="{Binding IsFundTransferSettingsConfigurable, Mode=OneWay}"
                  IsChecked="{Binding IsTransferInEnabled, Mode=TwoWay}" />
                
                <!-- Aft/Eft Out Section -->
                <Label x:Name="AftOutLabel" 
                       Grid.Row="1" 
                       Grid.Column="0" 
                       Content="{Binding ElementName=TransferOutLabelProxy, Path=Result}" />
                <CheckBox x:Name="AftOutCheckBox" 
                          Grid.Row="1" 
                          Grid.Column="1"
                          IsEnabled="{Binding IsFundTransferSettingsConfigurable, Mode=OneWay}"
                          IsChecked="{Binding IsTransferOutEnabled, Mode=TwoWay}" />

                <!-- Aft Partial Transfers Allowed Section -->
                <Label x:Name="AftPartialTransfersAllowedLabel" 
                       Grid.Row="2" 
                       Grid.Column="0" 
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.AftPartialTransfersAllowedLabel}}" />
                <CheckBox x:Name="AftPartialTransfersAllowedCheckbox" 
                          Grid.Row="2" 
                          Grid.Column="1" 
                          IsEnabled="{Binding PartialTransfersCheckboxEnabled, Mode=OneWay}"
                          IsChecked="{Binding IsPartialTransfersEnabled, Mode=TwoWay}" />

                <!-- Aft Bonusing Enabled Section -->
                <Label x:Name="AftBonusingEnabledLabel" 
                       Grid.Row="3" 
                       Grid.Column="0" 
                       Visibility="{Binding IsAft, Converter={StaticResource BoolToVisHiddenConverter}}"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.AftBonusingEnabledLabel}}" />
                <CheckBox x:Name="AftBonusingEnabledCheckBox" 
                          Grid.Row="3" 
                          Grid.Column="1"
                          Visibility="{Binding IsAft, Converter={StaticResource BoolToVisHiddenConverter}}"
                          IsEnabled="{Binding AftBonusTransferStatus, Mode=OneWay}"
                          IsChecked="{Binding IsAftBonusingEnabled, Mode=TwoWay}" />

                <!-- Aft Win Amount To Host Transfers Enabled Section -->
                <Label x:Name="AftWinAmountToHostTransfersEnabledLabel" 
                       Grid.Row="4" 
                       Grid.Column="0" 
                       Visibility="{Binding IsAft, Converter={StaticResource BoolToVisHiddenConverter}}"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.AftWinAmountToHostTransfersEnabledLabel}}" />
                <CheckBox x:Name="AftWinAmountToHostTransfersEnabledCheckBox" 
                          Grid.Row="4" 
                          Grid.Column="1" 
                          Visibility="{Binding IsAft, Converter={StaticResource BoolToVisHiddenConverter}}"
                          IsEnabled="{Binding IsTransferOutEnabled, Mode=OneWay}"
                          IsChecked="{Binding IsAftWinAmountToHostTransfersEnabled, Mode=TwoWay}" />

                <!-- Aft Transfer Limit Section -->
                <Label x:Name="AftTransferLimitLabel" 
                       Grid.Row="5" 
                       Grid.Column="0" 
                       Margin="0 5 0 0"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.TransferLimitLabel}}" />
                <StackPanel x:Name="AftTransferLimitStackPanel" 
                            Grid.Row="5" 
                            Grid.Column="1" 
                            Orientation="Horizontal">

                    <Grid x:Name="AftLimitTransferGrid">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <CheckBox x:Name="AftTransferLimitEnabledCheckbox" 
                                  Grid.Row="0" 
                                  Grid.Column="0" 
                                  Width="46"
                                  IsEnabled="{Binding TransferLimitCheckboxEnabled, Mode=OneWay}"
                                  IsChecked="{Binding TransferLimitEnabled, Mode=TwoWay}" />

                        <controls:CurrencyTextBox x:Name="AftTransferLimitCurrencyTextBox" 
                                                  Grid.Row="0" 
                                                  Grid.Column="1" 
                                                  Margin="20 0 0 0" 
                                                  MinWidth="200"
                                                  IsReadOnly="False" 
                                                  PreventNegatives="True"
                                                  Number="{
                                                    Binding TransferLimit, 
                                                    Mode=TwoWay, 
                                                    UpdateSourceTrigger=PropertyChanged, 
                                                    ValidatesOnDataErrors=True, 
                                                    NotifyOnValidationError=True}"
                                                  Visibility="{
                                                    Binding TransferLimitEnabled, 
                                                    Converter={StaticResource BoolToVisHiddenConverter}, 
                                                    UpdateSourceTrigger=PropertyChanged}" />

                        <TextBlock x:Name="AftTransferLimitTextBlock" 
                                   Grid.Row="0" 
                                   Grid.Column="1" 
                                   Margin="20 14 0 0" 
                                   Text="{lex:BLoc Key={x:Static loc:ResourceKeys.NoLimit}}"
                                   Visibility="{
                                    Binding TransferLimitEnabled, 
                                    Converter={StaticResource BoolToHiddenConverter}, 
                                    UpdateSourceTrigger=PropertyChanged}" />
                    </Grid>
                </StackPanel>
            </Grid>
        </GroupBox>

        <!-- Miscellaneous Section -->
        <GroupBox x:Name="MiscellaneousGroupBox" 
                  Header="{lex:Loc Key={x:Static loc:ResourceKeys.MiscellaneousGroupHeader}}" 
                  Margin="15 0 0 0" 
                  Grid.Column="1" 
                  IsEnabled="{Binding InputEnabled}">
            <Grid x:Name="MiscellaneousGrid">
                <Grid.RowDefinitions>
                    <RowDefinition>
                        <RowDefinition.Style>
                            <Style TargetType="RowDefinition">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding SasProtocolConfiguration.IsValidationHandled}" Value="True">
                                        <Setter Property="Height" Value="Auto"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding SasProtocolConfiguration.IsValidationHandled}" Value="False">
                                        <Setter Property="Height" Value="0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </RowDefinition.Style>
                    </RowDefinition>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" MinWidth="400"/>
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <!-- Selected Validation Feature Section -->
                <Label x:Name="SelectedValidationFeatureLabel" 
                       Grid.Row="0" 
                       Grid.Column="0" 
                       Margin="0 0 0 5"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.ValidationFeatureLabel}}" />
                <ComboBox x:Name="SelectedValidationItemComboBox" 
                          Grid.Row="0" 
                          Grid.Column ="1" 
                          Margin="0 0 0 5"
                          ItemsSource="{Binding ValidationItems}" 
                          SelectedItem="{Binding SelectedValidationItem}"/>

                <!-- Selected Handpay Mode Section -->
                <Label x:Name="SelectedHandpayModeLabel" 
                       Grid.Row="1" 
                       Grid.Column="0" 
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.HandpayModeLabel}}" />
                <ComboBox x:Name="SelectedHandpayModeComboBox" 
                          Grid.Row="1" 
                          Grid.Column ="1" 
                          ItemsSource="{Binding HandpayModeItems}" 
                          SelectedItem="{Binding SelectedHandpayModeItem}"/>

                <!-- Host Disable Cashout Action Section -->
                <Label x:Name="HostDisableCashoutActionLabel" 
                       Grid.Row="2" 
                       Grid.Column="0" 
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.HostDisableCashoutActionLabel}}"
                       Visibility="{Binding IsWizardPage, Converter={StaticResource BoolToCollapsedConverter}}" />
                <ComboBox x:Name="HostDisableCashoutActionComboBox" 
                          Grid.Row="2" 
                          Grid.Column ="1" 
                          ItemsSource="{Binding HostDisableCashoutActionItems}" 
                          SelectedItem="{Binding SelectedHostDisableCashoutActionItem}"
                          IsEnabled="{Binding HostDisableCashoutActionConfigurable}"
                          Visibility="{Binding IsWizardPage, Converter={StaticResource BoolToCollapsedConverter}}" />

                <Label x:Name="NotifySasConfigChange" 
                   Grid.Row="3" 
                   Grid.Column="0" 
                   Content="{lex:BLoc Key={x:Static loc:ResourceKeys.ConfigChangeNotification}}" 
                   HorizontalAlignment="Left"/>

                <ComboBox Grid.Row="3" 
                          Grid.Column ="1"
                          HorizontalAlignment="Left"
                          IsEnabled="{Binding InputEnabled}"
                          ItemsSource="{Binding NotificationTypes}"
                          SelectedIndex="{Binding ConfigChangeNotificationIndex, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                          SelectedItem="{Binding ConfigChangeNotification, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}">
                </ComboBox>

                <!-- Legacy Bonus Allowed Section -->
                <Label x:Name="LegacyBonusAllowedLabel" 
                       Grid.Row="4" 
                       Grid.Column="0" 
                       Margin="0 5 0 0"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.LegacyBonusAllowed}}" />
                <CheckBox x:Name="LegacyBonusAllowedCheckBox" 
                          Grid.Row="4" 
                          Grid.Column="1" 
                          Margin="0 5 0 0"
                          IsEnabled="{Binding IsLegacyBonusConfigurable, Mode=OneWay}"
                          IsChecked="{Binding IsLegacyBonusEnabled, Mode=TwoWay}" />

                <!-- Require LP02 on Power-up Section -->
                <Label x:Name="RequireLp02OnPowerUpLabel" 
                       Grid.Row="5" 
                       Grid.Column="0" 
                       Margin="0 10 0 0"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.RequireLP02OnPowerUp}}" />
                <CheckBox x:Name="RequireLp02OnPowerUpCheckBox"
                          Grid.Row="5" 
                          Grid.Column="1" 
                          Margin="0 10 0 0"
                          IsEnabled="false" 
                          IsChecked="{Binding IsRequireLP02OnPowerUpEnabled, Mode=TwoWay}" />

                <!-- EGM Disabled On Host Section -->
                <Label x:Name="EgmDisabledOnHostOfflineLabel" 
                       Grid.Row="6" 
                       Grid.Column="0" 
                       Margin="0 10"
                       Content="{lex:Loc Key={x:Static loc:ResourceKeys.EGMDisabledOnHostOfflineLabel}}"/>
                <CheckBox x:Name="EgmDisabledOnHostOfflineIdCheckBox" 
                          Grid.Row="6" 
                          Grid.Column ="1" 
                          IsEnabled="{Binding EgmDisabledOnHostOfflineConfigurable, Mode=OneWay}" 
                          IsChecked="{Binding EgmDisabledOnHostOffline, Mode=TwoWay}" />

            </Grid>
        </GroupBox>
    </Grid>
</operatorMenu:OperatorMenuPage>

