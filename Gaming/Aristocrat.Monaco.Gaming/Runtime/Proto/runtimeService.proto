syntax = "proto3";

package Aristocrat.Monaco.v1;

import "messages.proto";

service RuntimeService {
	rpc GetState(Empty) returns (GetStateResponse) {}
	rpc UpdateState(UpdateStateRequest) returns (Empty) {}

	rpc GetFlag(GetFlagRequest) returns (GetFlagResponse) {}
	rpc UpdateFlag(UpdateFlagRequest) returns (Empty) {}

	rpc UpdateParameters(UpdateParametersRequest) returns (Empty) {}
	rpc UpdateLocalTimeTranslationBias(UpdateLocalTimeTranslationBiasRequest) returns (Empty) {}
	rpc UpdateButtonState(UpdateButtonStateRequest) returns (Empty) {}
	rpc UpdateBalance(UpdateBalanceNotification) returns (Empty) {}
	rpc UpdatePlatformMessage(UpdatePlatformMessageRequest) returns (Empty) {}
	rpc UpdateVolume(VolumeUpdateNotification) returns (Empty) {}
	rpc UpdateTimeRemaining(UpdateTimeRemainingRequest) returns (Empty) {}

	rpc InvokeButton(InvokeButtonRequest) returns (Empty) {}

	rpc BeginGameRoundResult(BeginGameRoundNotification) returns (Empty) {}

	rpc OnJackpotUpdated(Empty) returns (Empty) {}
	rpc JackpotWinAvailable(JackpotWinAvailableNotification) returns (Empty) {}
	
	rpc Shutdown(Empty) returns (Empty) {}
}

message GetFlagRequest {
	RuntimeFlag flag = 1;
}

message UpdateFlagRequest {
	RuntimeFlag flag = 1;
	bool state = 2;
}

message GetFlagResponse {
	bool value = 1;
}

message GetStateResponse {
	RuntimeState state = 1;
}

message UpdateStateRequest {
	RuntimeState state = 1;
}

message InvokeButtonRequest {
	uint32 buttonId = 1;
	int32 state = 2;
}

message BeginGameRoundNotification {
	enum BeginGameRoundState {
		Success = 0;
		Failed = 1;
		TimedOut = 2;
	}
	BeginGameRoundState state = 1;
	repeated Outcome outcomes = 2;
}

message Outcome {
	enum OutcomeType {
		Standard = 0;
		Progressive = 1;
		Fractional = 2;
	}
	OutcomeType type = 1;
	uint64 winAmount = 2;
	string lookupData = 3;
	int32 winLevelIndex = 4;
}

message UpdateBalanceNotification {
	uint64 value = 1;
}

message JackpotWinAvailableNotification {
	string poolName = 1;
	repeated LevelInfo levels = 2;
}

message UpdateButtonStateRequest {
	uint32 buttonId = 1;
	// NOTE: These are treated as a bit field; a set of flags. Transported as a signed integer
	enum SystemButtonMask
	{
		NotSet = 0;
		Enabled = 1;
		Lamps = 14;
		Override = 16;
	}
	int32 buttonMask = 2;
	// NOTE: These are treated as a bit field; a set of flags. Transported as a signed integer
	enum SystemButtonState
	{
		None = 0;
		Allowed = 1;
		LightOn = 2;
		BlinkFast = 4;
		BlinkSlow = 8;
		OverridePlatform = 16;
	}
	int32 buttonState = 3;
}

message UpdateLocalTimeTranslationBiasRequest {
	int32 minutes = 1;
}

message UpdateParametersRequest {
	map<string, string> parameters = 1;
	ConfigurationTarget target = 2;
}

message UpdatePlatformMessageRequest {
	repeated string messages = 1;
}

message UpdateTimeRemainingRequest {
	string timeRemaining = 1;
}
