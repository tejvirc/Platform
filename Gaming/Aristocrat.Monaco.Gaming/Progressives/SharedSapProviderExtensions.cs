namespace Aristocrat.Monaco.Gaming.Progressives
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.CodeAnalysis;
    using System.Linq;
    using Application.Contracts.Extensions;
    using Contracts;
    using Contracts.Models;
    using Contracts.Progressives;
    using Contracts.Progressives.SharedSap;
    using PackageManifest.Ati;
    using PackageManifest.Models;

    /// <summary>
    ///     Extension methods for SharedSapProvider class
    /// </summary>
    public static class SharedSapProviderExtensions
    {
        private const string All = "ALL";

        /// <summary>
        ///     Auto-generates shared (associated) sap levels (if applicable)
        /// </summary>
        /// <param name="this">The shared sap provider object</param>
        /// <param name="gameDetails">The details for a given game</param>
        /// <param name="progressiveDetails">The progressive details for a given game</param>
        [SuppressMessage("ReSharper", "PossibleMultipleEnumeration")]
        public static void AutoGenerateAssociatedLevels(
            this ISharedSapProvider @this,
            IGameDetail gameDetails,
            IEnumerable<ProgressiveDetail> progressiveDetails)
        {
            if (gameDetails == null)
            {
                throw new ArgumentNullException(nameof(gameDetails));
            }

            if (progressiveDetails == null)
            {
                throw new ArgumentNullException(nameof(progressiveDetails));
            }

            var betOptionList = gameDetails.BetOptionList;

            if (betOptionList is null)
            {
                return;
            }

            var gameType = gameDetails.GameType;
            foreach (var detail in progressiveDetails)
            {
                if (detail.UseLevels.All(l => l.Equals(All)))
                {
                    continue;
                }

                var denominations = ValidDenoms(gameDetails, detail.Denomination.ToList());

                if (denominations.IsNullOrEmpty())
                {
                    continue;
                }

                foreach (var denom in denominations)
                    foreach (var betOption in betOptionList)
                    {
                        @this.AutoGenerateLevels(gameType, betOption, denom, detail);
                    }
            }
        }

        /// <summary>
        ///     Auto-generates shared sap levels (if applicable)
        /// </summary>
        /// <param name="this">The shared sap provider object</param>
        /// <param name="gameType">The game type</param>
        /// <param name="betOption">The bet option</param>
        /// <param name="denom">The denom</param>
        /// <param name="detail">The progressive detail for a game</param>
        [SuppressMessage("ReSharper", "PossibleMultipleEnumeration")]
        public static void AutoGenerateLevels(
            this ISharedSapProvider @this,
            GameType gameType,
            BetOption betOption,
            long denom,
            ProgressiveDetail detail)
        {
            if (detail == null)
            {
                throw new ArgumentNullException(nameof(detail));
            }

            if (betOption is null)
            {
                throw new ArgumentNullException(nameof(betOption));
            }

            var existingLevels = @this.ViewSharedSapLevels();
            var singledDenomList = new List<long> { denom };
            var sharedSapLevels = new List<IViewableSharedSapLevel>();

            foreach (var level in detail.Levels)
            {
                if (detail.UseLevels.All(l => l.Equals(All)))
                {
                    if (!level.StartupValue.IsCredit || level.ProgressiveType != progressiveType.Selectable)
                    {
                        continue;
                    }
                }

                var levelName = GeneratedLevelName(
                    detail.Name,
                    detail.PackId,
                    level.Name,
                    denom,
                    betOption.Name,
                    detail.UseLevels,
                    detail.LevelPack);
                var resetValueInMillicents = level.ResetValue(
                    singledDenomList,
                    detail.UseLevels.All(l => l.Equals(All)) ? betOption : null).CentsToMillicents();

                if (!existingLevels.Any(s => s.AutoGenerated && s.Name == levelName))
                {
                    sharedSapLevels.Add(
                        new SharedSapLevel
                        {
                            Id = Guid.NewGuid(),
                            Name = levelName,
                            SupportedGameTypes = new[] { gameType },
                            InitialValue = resetValueInMillicents,
                            CurrentValue = resetValueInMillicents,
                            ResetValue = resetValueInMillicents,
                            IncrementRate = level.IncrementRate.ToPercentage(),
                            HiddenIncrementRate = level.HiddenIncrementRate.ToPercentage(),
                            MaximumValue = level.MaximumValue(singledDenomList).CentsToMillicents(),
                            CanEdit = true,
                            AutoGenerated = true,
                            CreatedDateTime = DateTime.UtcNow
                        });
                }
            }

            if (sharedSapLevels.Any())
            {
                @this.AddSharedSapLevel(sharedSapLevels);
            }
        }

        /// <summary>
        ///     Auto-generates shared sap levels (if applicable)
        /// </summary>
        /// <param name="this">The shared sap provider object</param>
        /// <param name="gameType">The game type</param>
        /// <param name="denom">The denom</param>
        /// <param name="levels">The progressive levels</param>
        /// <return>Returns the auto-generated levels</return>
        [SuppressMessage("ReSharper", "PossibleMultipleEnumeration")]
        public static IEnumerable<IViewableSharedSapLevel> AutoGenerateLevels(
            this ISharedSapProvider @this,
            GameType gameType,
            long denom,
            IEnumerable<IViewableProgressiveLevel> levels)
        {
            var existingLevels = @this.ViewSharedSapLevels();
            var sharedSapLevels = new List<IViewableSharedSapLevel>();

            foreach (var level in levels)
            {
                if (level.LevelType != ProgressiveLevelType.Selectable)
                {
                    continue;
                }

                var levelName = GeneratedLevelName(
                    level.ProgressivePackName,
                    level.ProgressivePackId,
                    level.LevelName,
                    denom,
                    level.BetOption);

                if (existingLevels.All(s => s.Name != levelName))
                {
                    sharedSapLevels.Add(
                        new SharedSapLevel
                        {
                            Id = Guid.NewGuid(),
                            Name = levelName,
                            SupportedGameTypes = new[] { gameType },
                            InitialValue = level.ResetValue,
                            CurrentValue = level.ResetValue,
                            ResetValue = level.ResetValue,
                            IncrementRate = level.IncrementRate,
                            MaximumValue = level.MaximumValue,
                            HiddenIncrementRate = level.HiddenIncrementRate,
                            HiddenValue = level.HiddenValue,
                            Overflow = level.Overflow,
                            OverflowTotal = level.OverflowTotal,
                            CanEdit = true,
                            AutoGenerated = true,
                            CreatedDateTime = DateTime.UtcNow
                        });
                }
            }

            if (sharedSapLevels.Any())
            {
                @this.AddSharedSapLevel(sharedSapLevels);
            }

            return sharedSapLevels;
        }

        /// <summary>
        ///     Generate Level Name
        /// </summary>
        /// <param name="packName">Pack name.</param>
        /// <param name="packId">Pack Id.</param>
        /// <param name="levelName">Level Name.</param>
        /// <param name="denom">Denom.</param>
        /// <param name="betOption">Bet option.</param>
        /// <param name="useLevels">Associated level names.</param>
        /// <param name="levelPack">Level pack names.</param>
        /// <returns>Generated Level Name</returns>
        public static string GeneratedLevelName(
            string packName,
            int packId,
            string levelName,
            long denom,
            string betOption,
            IEnumerable<string> useLevels = null,
            string levelPack = null)
        {
            if (useLevels != null && !useLevels.All(l => l.Equals(All)))
            {
                return $"{packName}_{levelPack}_{levelName}";
            }

            var generatedLevelName =
                $"{packName}_{packId}_{levelName} {denom.MillicentsToDollars().FormattedCurrencyString()}";
            if (!betOption.IsNullOrEmpty())
            {
                generatedLevelName = $"{generatedLevelName} {betOption}";
            }

            return generatedLevelName;
        }

        private static IEnumerable<long> ValidDenoms(IGameDetail game, IReadOnlyCollection<string> progressiveDenoms)
        {
            return progressiveDenoms.Contains(All)
                ? game.SupportedDenominations
                : progressiveDenoms.Select(s => Convert.ToInt64(s).CentsToMillicents());
        }
    }
}
