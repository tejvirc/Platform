<operatorMenu:OperatorMenuPage xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu;assembly=Aristocrat.Monaco.Application.UI"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Gaming.UI.ViewModels.OperatorMenu"
                               xmlns:dialog="clr-namespace:Aristocrat.Monaco.UI.Common;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                               xmlns:events="clr-namespace:Aristocrat.Monaco.UI.Common.Events;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:converters="clr-namespace:Aristocrat.Monaco.UI.Common.Converters;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                               xmlns:common="http://monaco.aristocrat.com/common"
                               x:Class="Aristocrat.Monaco.Gaming.UI.Views.OperatorMenu.GameHistoryView"
                               dialog:DialogParticipation.Register="{Binding}"
                               mc:Ignorable="d" 
                               Background="Transparent" 
                               d:DataContext="{d:DesignInstance {x:Type viewModels:GameHistoryViewModel}, IsDesignTimeCreatable=True}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Converters.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Controls.DataGrid.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Controls.Button.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Controls.ListBox.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="HeaderStyle" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MonacoDataGridColumnHeader}">
                <Setter Property="MinWidth" Value="50" />
                <Setter Property="MinHeight" Value="65" />
                <Setter Property="FontSize" Value="17"/>
            </Style>

            <Style x:Key="WrappedHeaderStyle" TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MonacoDataGridWrappedColumnHeader}">
                <Setter Property="MinWidth" Value="50" />
                <Setter Property="MinHeight" Value="65" />
                <Setter Property="FontSize" Value="17"/>
            </Style>

            <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource MonacoDataGridCell}">
                <Setter Property="FontSize" Value="16"/>
            </Style>

            <Style TargetType="Button" BasedOn="{StaticResource MonacoButton}">
                <Setter Property="Margin" Value="0 0 20 0"/>
                <Setter Property="Width" Value="200"/>
            </Style>

            <Style x:Key="MonacoScrollListBoxItem" TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MonacoUnselectableListBoxItem}">
                <Setter Property="HorizontalAlignment" Value="Stretch" />
                <Setter Property="MinHeight" Value="0"/>
            </Style>

            <Style x:Key="MonacoScrollListBox" TargetType="{x:Type ListBox}" BasedOn="{StaticResource MonacoListBox}">
                <Setter Property="ItemContainerStyle" Value="{DynamicResource MonacoScrollListBoxItem}" />
                <Setter Property="AllowDrop" Value="False" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="IsTabStop" Value="False" />
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden" />
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden" />
                <Setter Property="SelectionMode" Value="Single" />
                <Setter Property="VerticalAlignment" Value="Top" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBox}">
                            <Border Padding="{TemplateBinding Padding}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="True">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <ScrollViewer x:Name="LB_ScrollViewer" Padding="{TemplateBinding Padding}"
                                          CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}"
                                          viewModels:ScrollViewerBehavior.AutoScrollToTop="{Binding ResetScrollToTop, Mode=TwoWay}">
                                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                    </ScrollViewer>
                                    <!--DockPanel doesn't seem to work like it does for ScrollButtonDataGrid-->
                                    <DockPanel Grid.Column="1" LastChildFill="False">
                                        <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" HorizontalAlignment="Right" VerticalAlignment="Top">
                                            <common:DataGridUpDownScrollButtons HorizontalAlignment="Right"
                                                                                  VerticalAlignment="Center"
                                                                                  ScrollGrid="{Binding ElementName=LB_ScrollViewer}"
                                                                                  Visibility="{Binding CanContentScroll, Converter={StaticResource BoolToVisConverter}, RelativeSource={RelativeSource Self}}"/>
                                        </StackPanel>
                                    </DockPanel>
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

		<DataGrid SelectedItem="{Binding SelectedGameItem, Mode=TwoWay}"
                  ItemsSource="{Binding GameHistory, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  ScrollViewer.CanContentScroll="True"
                  Height="Auto"
                  Width="{Binding ElementName=MainGrid, Path=ActualWidth}">
            <i:Interaction.Triggers>
                <events:RoutedEventTrigger RoutedEvent="ScrollViewer.ScrollChanged">
                    <events:EventToCommandAction Command="{Binding EventViewerScrolledCommand}"/>
                </events:RoutedEventTrigger>
            </i:Interaction.Triggers>
            <DataGrid.Columns>
                <DataGridTextColumn Header="#" 
                                    Binding="{Binding LogSequenceText}" 
                                    HeaderStyle="{StaticResource HeaderStyle}"
                                    Visibility="{Binding ElementName=EventViewer, Path=DataContext.ShowSequenceNumber, Converter={StaticResource BoolToVisConverter}}" />
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.ReferenceNumberText}}" 
                                    Binding="{Binding RefNoText}" 
                                    HeaderStyle="{StaticResource HeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.GameNameText}}" 
                                    MinWidth="230" Binding="{Binding GameName}" 
                                    HeaderStyle="{StaticResource HeaderStyle}">
                    <DataGridTextColumn.ElementStyle>
                    <Style>
                        <Setter Property="TextBlock.TextWrapping" Value="Wrap" />
                    </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.StartTimeText}}" 
                                    Binding="{Binding StartTime, Converter={StaticResource DateTimeConverter}, ConverterParameter=MinDateBlank}" 
                                    HeaderStyle="{StaticResource HeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.EndTimeText}}" 
                                    Binding="{Binding EndTime, Converter={StaticResource DateTimeConverter}, ConverterParameter=MinDateBlank}" 
                                    HeaderStyle="{StaticResource HeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.AmountIn}}" 
                                    MinWidth="80" 
                                    Binding="{Binding AmountIn, Converter={StaticResource CurrencyConverter}}" 
                                    HeaderStyle="{StaticResource WrappedHeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.AmountOut}}" 
                                    MinWidth="80" 
                                    Binding="{Binding AmountOut, Converter={StaticResource CurrencyConverter}}" 
                                    HeaderStyle="{StaticResource WrappedHeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.StartCreditsText}}" 
                                    MinWidth="90" 
                                    Binding="{Binding StartCredits, Converter={StaticResource CurrencyConverter}}" 
                                    HeaderStyle="{StaticResource WrappedHeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.CreditsWageredText}}" 
                                    MinWidth="95" 
                                    Binding="{Binding CreditsWagered, Converter={StaticResource CurrencyConverter}}" 
                                    HeaderStyle="{StaticResource WrappedHeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.CreditsWonText}}" 
                                    MinWidth="90" 
                                    Binding="{Binding CreditsWon, Converter={StaticResource CurrencyConverter}}" 
                                    HeaderStyle="{StaticResource WrappedHeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.EndCreditsText}}" 
                                    MinWidth="90" 
                                    Binding="{Binding EndCredits, Converter={StaticResource CurrencyConverter}}" 
                                    HeaderStyle="{StaticResource WrappedHeaderStyle}"/>
                <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.StatusHeader}}" 
                                    Binding="{Binding Status}" 
                                    HeaderStyle="{StaticResource HeaderStyle}"/>
            </DataGrid.Columns>
        </DataGrid>

	    <Border Grid.Row="0" BorderBrush="{DynamicResource Brush3}" BorderThickness="2" 
	            HorizontalAlignment="Right" VerticalAlignment="Top"
	            Margin="0 -65 5 0" Padding="8,8,8,5" Height="Auto">
		    <Grid VerticalAlignment="Center" Height="Auto">
			    <Grid.ColumnDefinitions>
				    <ColumnDefinition Width="Auto"/>
				    <ColumnDefinition Width="10"/>
				    <ColumnDefinition Width="Auto"/>
			    </Grid.ColumnDefinitions>
			    <Label Content="{lex:Loc Key={x:Static loc:ResourceKeys.PendingCashInText}}" Grid.Column="0" HorizontalAlignment="Right"/>
			    <Label Grid.Column="2" Content="{Binding PendingCurrencyIn, Converter={StaticResource CurrencyConverter}}" Foreground="{DynamicResource LightBrush4}" HorizontalAlignment="Right"/>
		    </Grid>
	    </Border>

        <Grid Grid.Row="1" Margin="0 10 0 0"
              Visibility="{Binding ShowGameRoundInfo, Converter={StaticResource BoolToVisConverter}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="4" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <TextBlock x:Name="TextBlockGameRoundInfo" Grid.Row="0" Visibility="Visible"  IsEnabled="False" 
                       Text="{lex:Loc Key={x:Static loc:ResourceKeys.GameRoundInfoText}}" FontSize="{StaticResource NormalFontSize}" FontWeight="Bold"/>
            <ListBox Grid.Row="2" Visibility="Visible" Height="108" IsEnabled="True" HorizontalAlignment="Stretch"
                     Style="{StaticResource MonacoScrollListBox}"
                     BorderBrush="{StaticResource Brush3}"
                     ItemsSource="{Binding SelectedGameRoundTextList}" />
        </Grid>

		<StackPanel Grid.Row="2" Orientation="Horizontal" Margin="0 12 0 0">
            <Button IsEnabled="{Binding ReplayButtonEnabled}"
                    Content="{lex:Loc Key={x:Static loc:ResourceKeys.ReplayText}}" 
                    Command="{Binding ReplayCommand}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.PrintSelectedButtonText}}"
                    IsEnabled="{Binding EnablePrintSelectedButton}"
                    Command="{Binding PrintSelectedButtonCommand}"
                    Visibility="{Binding PrintSelectedButtonVisible, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.PrintLast15RecordsButtonText}}"
                    IsEnabled="{Binding EnablePrintLast15Button}"
                    Command="{Binding PrintLast15ButtonCommand}"
                    Visibility="{Binding PrintLast15ButtonVisible, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.PrintCurrentPageButtonText}}"
                    IsEnabled="{Binding EnablePrintCurrentPageButton}"
                    Command="{Binding PrintCurrentPageButtonCommand}"
                    Visibility="{Binding PrintCurrentPageButtonVisible, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.GameProgressiveWin}}"
                    IsEnabled="{Binding GameProgressiveWinButtonEnabled}"
                    Command="{Binding ShowGameProgressiveWinCommand}"
                    Visibility="{Binding ShowGameInfoButtons, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.GameMeters}}"
                    IsEnabled="{Binding IsMeteredGameSelected}"
                    Command="{Binding ShowGameMetersCommand}"
                    Visibility="{Binding ShowGameInfoButtons, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.GameTransactions}}"
                    IsEnabled="{Binding IsHistoryItemSelected}"
                    Command="{Binding ShowGameTransactionsCommand}"
                    Visibility="{Binding ShowGameInfoButtons, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.GameEventLogs}}"
                    IsEnabled="{Binding IsHistoryItemSelected}"
                    Command="{Binding ShowGameEventLogsCommand}"
                    Visibility="{Binding ShowGameEventLogsButton, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.GameDetailsText}}"
                    IsEnabled="{Binding IsGameRoundComplete}"
                    Command="{Binding ShowGameDetailsCommand}"
                    Visibility="{Binding ShowGameDetailsButton, Converter={StaticResource BoolToVisConverter}}"/>
        </StackPanel>

		<StackPanel  Grid.Row="3" Orientation="Horizontal" Margin="0 10 0 -16">
            <Label Content="{lex:Loc Key={x:Static loc:ResourceKeys.ReplayPause}}" VerticalAlignment="Center"/>
            <controls:ToggleSwitchButton Margin="20 5 0 0"
                                         IsEnabled="{Binding ReplayPauseEnabled}"
                                         IsChecked="{Binding ReplayPauseActive}"
                                         controls:ControlsHelper.ContentCharacterCasing="Upper"
                                         controls:ControlsHelper.CornerRadius="0"
                                         common:ToggleSwitchButtonHelper.OffContent="{lex:Loc Key={x:Static loc:ResourceKeys.Off}}"
                                         common:ToggleSwitchButtonHelper.OnContent="{lex:Loc Key={x:Static loc:ResourceKeys.On}}"/>
        </StackPanel>

    </Grid>
</operatorMenu:OperatorMenuPage>

