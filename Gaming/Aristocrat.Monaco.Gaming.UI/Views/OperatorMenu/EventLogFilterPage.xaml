<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Gaming.UI.Views.OperatorMenu.EventLogFilterPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu;assembly=Aristocrat.Monaco.Application.UI"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Gaming.UI.ViewModels.OperatorMenu"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                               xmlns:events="clr-namespace:Aristocrat.Monaco.UI.Common.Events;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:common="clr-namespace:Aristocrat.Monaco.UI.Common;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               xmlns:converter="http://monaco.aristocrat.com/common"
                               xmlns:models="clr-namespace:Aristocrat.Monaco.Application.UI.Models;assembly=Aristocrat.Monaco.Application.UI"
                               mc:Ignorable="d"
                               d:DataContext="{d:DesignInstance viewModels:EventLogFilterViewModel,
                                                                IsDesignTimeCreatable=False}"
                               common:DialogParticipation.Register="{Binding}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Converters.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <converter:DateTimeFormatConverter x:Key="DateTimeFormatConverter"/>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid x:Name="MainGrid">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition MinWidth="200" MaxWidth="300"/>
        </Grid.ColumnDefinitions>
        <Grid Grid.Column="0"
              x:Name="EventViewerGrid"
              Margin="0 0 50 0">
            <Grid.RowDefinitions>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <DataGrid x:Name="EventViewer"
                      Width="{Binding ElementName=EventViewerGrid, Path=ActualWidth}"
                      IsEnabled="{Binding IsLoadingData, Converter={StaticResource InverseBoolConverter}}"
                      ItemsSource="{Binding FilteredLogCollection, UpdateSourceTrigger=PropertyChanged}"
                      SelectedItem="{Binding SelectedItem}"
                      ScrollViewer.HorizontalScrollBarVisibility="Auto"
                      ScrollViewer.CanContentScroll="True"
                      ScrollViewer.PanningMode="VerticalOnly">
                <i:Interaction.Triggers>
                    <events:RoutedEventTrigger RoutedEvent="ScrollViewer.ScrollChanged">
                        <events:EventToCommandAction Command="{Binding EventViewerScrolledCommand}"/>
                    </events:RoutedEventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.Columns>
                    <DataGridTextColumn Header="{lex:Loc Key={x:Static loc:ResourceKeys.DateAndTime}}"
                                        MinWidth="200"
                                        Width="Auto"
                                        FontSize="18"
                                        Binding="{Binding Description.Timestamp, Converter={StaticResource DateTimeFormatConverter}}"/>
                    <DataGridTextColumn x:Name="LogType"
                                        Header="{lex:Loc Key={x:Static loc:ResourceKeys.LogType}}"
                                        FontSize="18"
                                        MinWidth="200"
                                        Width="Auto"
                                        Binding="{Binding Description.TypeDisplayText}"
                                        x:FieldModifier="public"/>
                    <DataGridTemplateColumn x:Name="EventLog"
                                            Header="{lex:Loc Key={x:Static loc:ResourceKeys.EventLog}}"
                                            MinWidth="350"
                                            Width="Auto"
                                            x:FieldModifier="public">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate DataType="models:EventLog">
                                <StackPanel Orientation="Horizontal">
                                    <TextBlock Text="{Binding Description.Name}"
                                               VerticalAlignment="Center"
                                               FontSize="18"/>
                                    <Button Name="InfoButton"
                                            Style="{StaticResource MonacoInfoButton}"
                                            VerticalAlignment="Center"
                                            Margin="5 0 0 0"
                                            Command="{Binding DataContext.ShowAdditionalInfoCommand, ElementName=EventViewer}"
                                            Visibility="{Binding HasAdditionalInfo, Converter={StaticResource TrueVisibleFalseCollapsed}}"/>
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>

            <StackPanel Grid.Row="1"
                        Margin="0 10 0 0"
                        Orientation="Horizontal">
                <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.PrintSelectedButtonText}}"
                        Height="45"
                        Width="200"
                        Margin="0 0 20 0"
                        Visibility="{Binding PrintSelectedButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"
                        IsEnabled="{Binding PrintSelectedButtonEnabled}"
                        Command="{Binding PrintSelectedButtonCommand}"/>
                <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.PrintCurrentPageButtonText}}"
                        Height="45"
                        Width="200"
                        Margin="0 0 20 0"
                        Visibility="{Binding PrintCurrentPageButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"
                        IsEnabled="{Binding MainPrintButtonEnabled}"
                        Command="{Binding PrintCurrentPageButtonCommand}"/>
                <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.PrintLast15RecordsButtonText}}"
                        Height="45"
                        Width="200"
                        Margin="0 0 20 0"
                        IsEnabled="{Binding MainPrintButtonEnabled}"
                        Command="{Binding PrintLast15ButtonCommand}"
                        Visibility="{Binding PrintLast15ButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"/>
                <StackPanel Visibility="{Binding SubscriptionTextVisible, Converter={StaticResource TrueVisibleFalseCollapsed}, FallbackValue=Collapsed}"
                            Orientation="Horizontal"
                            VerticalAlignment="Center">
                    <Label FontSize="{StaticResource NormalFontSize}"
                           Content="{Binding SubscriptionStatus}"
                           HorizontalAlignment="Left"/>
                    <Label FontSize="{StaticResource NormalFontSize}"
                           Content="{Binding EventCount}"
                           HorizontalAlignment="Left"/>
                </StackPanel>
            </StackPanel>
        </Grid>

        <Grid Grid.Column="1">
            <Label Content="{lex:Loc Key={x:Static loc:ResourceKeys.StackerRemoved}}" VerticalAlignment="Top"/>
            <DataGrid Margin="0 20 0 0"
                      x:Name="FilterByDataGrid"
                      ItemsSource="{Binding EventFilterCollection}"
                      IsEnabled="{Binding FilterMenuEnabled}"
                      AutoGenerateColumns="False"
                      CanUserAddRows="False"
                      RowBackground="Transparent"
                      ScrollViewer.CanContentScroll="True"
                      ScrollViewer.PanningMode="VerticalOnly">
                <DataGrid.Resources>
                    <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MonacoDataGridColumnHeader}">
                        <Setter Property="BorderBrush" Value="{StaticResource Brush3}"/>
                        <Setter Property="BorderThickness" Value="0 0 0 1"/>
                    </Style>
                </DataGrid.Resources>
                <DataGrid.Columns>
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.HeaderTemplate>
                            <DataTemplate>
                                <CheckBox Content = "{lex:Loc Key={x:Static loc:ResourceKeys.All}}"
                                          Margin="0 5 0 0"
                                          FontSize="16"
                                          IsChecked="{Binding DataContext.IsAllFiltersSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType=DataGrid}}"
                                          Command="{Binding DataContext.AllFiltersSelectedCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}"/>
                            </DataTemplate>
                        </DataGridTemplateColumn.HeaderTemplate>

                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <CheckBox Margin="5 5 0 0"
                                          IsChecked="{Binding DataContext.IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType=DataGridCell}}"
                                          Command="{Binding DataContext.FilterSelectedCommand, RelativeSource={RelativeSource AncestorType=DataGrid}}">
                                    <CheckBox.Content>
                                        <TextBlock Text="{Binding DataContext.DisplayText, RelativeSource={RelativeSource AncestorType=DataGridCell}}" FontSize="16"/>
                                    </CheckBox.Content>
                                </CheckBox>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                </DataGrid.Columns>
            </DataGrid>
        </Grid>

    </Grid>
</operatorMenu:OperatorMenuPage>

