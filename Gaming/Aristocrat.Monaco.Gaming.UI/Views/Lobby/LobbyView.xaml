<metro:MetroWindow x:Class="Aristocrat.Monaco.Gaming.UI.Views.Lobby.LobbyView"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:metro="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:bink="clr-namespace:ManagedBink;assembly=BinkViewerControl"        
        xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Gaming.UI.ViewModels"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        xmlns:behaviors="clr-namespace:Aristocrat.Monaco.Gaming.UI.Behaviors"
        xmlns:lobby="clr-namespace:Aristocrat.Monaco.Gaming.UI.Views.Lobby"
        xmlns:overlay="clr-namespace:Aristocrat.Monaco.Gaming.UI.Views.Overlay"
        xmlns:mediaDisplay="clr-namespace:Aristocrat.Monaco.Gaming.UI.Views.MediaDisplay"
        xmlns:controls="clr-namespace:Aristocrat.Monaco.Gaming.UI.Views.Controls"
        xmlns:loc="http://monaco.aristocrat.com/localization"
        xmlns:infoBar="clr-namespace:Aristocrat.Monaco.Gaming.UI.Views.InfoBar"
        loc:Localizer.For="Player"
        mc:Ignorable="d" 
        Title="{Binding MainTitle}"
        Width="1440"
        Height="810"
        ShowTitleBar="False"
        ShowIconOnTitleBar="True"
        ShowCloseButton="False"
        ShowMaxRestoreButton="False"
        ShowMinButton="False"
        Loaded="LobbyView_OnLoaded"
        Closed="LobbyView_OnClosed"
        IgnoreTaskbarOnMaximize="True"
        Background="Black"
        BorderThickness="0" 
        GotFocus="LobbyView_OnGotFocus" 
        Activated="LobbyView_OnActivated"
        ContentRendered="LobbyView_OnContentRendered"
        d:DataContext="{d:DesignInstance {x:Type viewModels:LobbyViewModel}}"
        Name="Root">
    <metro:MetroWindow.Resources>
        <ResourceDictionary>

            <!-- Apply MahApps.Metro styles to all controls -->
            <ResourceDictionary.MergedDictionaries>
                <!-- MahApps.Metro resource dictionaries. Make sure that all file names are Case Sensitive! -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <!-- Accent and AppTheme setting -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />

                <ResourceDictionary Source="../../Skins/Styles.xaml" />
                <ResourceDictionary Source="LobbyViewLandscapeTemplate.xaml" />
                <ResourceDictionary Source="LobbyViewPortraitTemplate.xaml" />

                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Converters.xaml"/>

              <!-- Jurisdiction xaml dictionary is loaded dynamically; see SkinLoader -->
            </ResourceDictionary.MergedDictionaries>

            <lobby:LobbyViewTemplateSelector x:Key="LobbyViewTemplateSelector" />
        </ResourceDictionary>
    </metro:MetroWindow.Resources>

    <i:Interaction.Behaviors>
        <behaviors:ActivateBehavior Activated="{Binding LobbyActivated, Mode=TwoWay}"/>
    </i:Interaction.Behaviors>

    <mediaDisplay:LayoutTemplateDockPanel x:Name="LayoutTemplate" ScreenType="Primary">

    <Grid x:Name="GameLayout"
          ClipToBounds="True"
          DataContext="{Binding ElementName=Root, Path=DataContext}"
          SizeChanged="GameLayout_OnSizeChanged">
        <Grid x:Name="GameRoot"
              Height="{Binding GameControlHeight, Mode=TwoWay}"
              Width="{Binding GameControlWidth, Mode=TwoWay}">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                    <Style.Triggers>
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource BoolOrConverter}">
                                    <Binding Path="MessageOverlayDisplay.IsReplayRecoveryDlgVisible"/>
                                    <Binding Path="MainInfoBarOpenRequested"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <DataTrigger.Setters>
                                <Setter Property="VerticalAlignment" Value="Top" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            <controls:ExtendedWindowsFormsHost Loaded="WinHostCtrl_OnLoaded" Background="Black"
                                               Visibility="{Binding IsLobbyVisible, Converter={StaticResource BoolToHiddenConverter}}" 
                                               HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <controls:NativeFormsControl x:Name="GameBottomWindowCtrl" Dock="Fill" />
            </controls:ExtendedWindowsFormsHost>
        </Grid>

        <!--This viewbox keeps the main content scaling uniformly during media display resize
            Height/Width are bound to LayoutTemplate to establish the lobby aspect ratio-->
        <Viewbox x:Name="ViewBoxLobby" Stretch="Uniform">

            <Grid x:Name="LobbyAndInfoBarContainer"
                  Height="{Binding ElementName=LayoutTemplate, Path=ActualHeight}"
                  Width="{Binding ElementName=LayoutTemplate, Path=ActualWidth}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Grid x:Name="LobbyRoot"
                      Visibility="{Binding IsLobbyVisible, Converter={StaticResource BoolToVisConverter}}"
                      MouseDown="LobbyRoot_OnMouseDown" GotFocus="LobbyRoot_OnGotFocus">
                    <ContentControl
	                    x:Name="LobbyControl"
	                    Content="{Binding}"
	                    ContentTemplateSelector="{StaticResource LobbyViewTemplateSelector}"/>
                  <!-- BOTTOM ATTRACT: Do not collapse BinkGpuControl.  You will get null backbuffer. -->
                  <bink:BinkGpuControl x:Name="GameAttract"
                                          Grid.Row="0" Grid.RowSpan="4" Grid.Column="0" Grid.ColumnSpan="3"
                                          Filename="{Binding BottomAttractVideoPath}"
                                          LoopVideo="False"
                                          ShowFirstFrameOnLoad="True"
                                          Visibility="{Binding IsBottomAttractVisible, Converter={StaticResource BoolToVisibleFalseHidden}}"
                                          VideoCompleted="GameAttract_OnVideoCompleted"
                                          Height="{Binding ElementName=Root, Path=ActualHeight}"
                                          Width="{Binding ElementName=Root, Path=ActualWidth}">
                    <bink:BinkGpuControl.Style>
                      <Style TargetType="bink:BinkGpuControl">
                        <Setter Property="VideoState" Value="Stopped" />
                        <Style.Triggers>
                          <DataTrigger Binding="{Binding IsBottomAttractFeaturePlaying}" Value="True">
                            <Setter Property="VideoState" Value="Playing"/>
                          </DataTrigger>
                          <DataTrigger Binding="{Binding IsBottomAttractFeaturePlaying}" Value="False">
                            <Setter Property="VideoState" Value="Stopped"/>
                          </DataTrigger>
                        </Style.Triggers>
                      </Style>
                    </bink:BinkGpuControl.Style>
                  </bink:BinkGpuControl>

                  <!-- RG INFO -->

                  <Image IsHitTestVisible="False" Grid.Row="0" Grid.RowSpan="4" Grid.Column="0" Grid.ColumnSpan="3" Stretch="None" Source="{DynamicResource RGInfoBackground}"
                          Visibility="{Binding IsResponsibleGamingInfoDlgVisible, Converter={StaticResource BoolToVisConverter}}"/>

                  <overlay:RGInfo Grid.Row="0" Grid.RowSpan="{Binding RGInfoRowSpan}" Grid.Column="0" Grid.ColumnSpan="3"
                                  Visibility="{Binding IsResponsibleGamingInfoDlgVisible, Converter={StaticResource BoolToVisConverter}}"/>

                  <!-- Rectangle to block input when lobby is disabled during media player resize -->
                  <Rectangle Grid.Row="0" Grid.RowSpan="4" Grid.Column="0" Grid.ColumnSpan="3" Fill="White" Opacity="0"
                              Visibility="{Binding MediaPlayersResizing, Converter={StaticResource BoolToVisConverter}}"/>

                  <!-- Rectangle to give screen a disabled look if message overlay is visible -->
                  <Rectangle Grid.Row="0" Grid.RowSpan="4" Grid.Column="0" Grid.ColumnSpan="3" Fill="Black" Opacity="0.5"
                              Visibility="{Binding MessageOverlayDisplay.IsLockupMessageVisible, Converter={StaticResource BoolToVisConverter}}" />

                  <Image Grid.Row="0" Stretch="Fill" Grid.RowSpan="4" Grid.Column="0" Grid.ColumnSpan="3" Source="{Binding GameLoadingScreenPath}"
                          Visibility="{Binding IsBottomLoadingScreenVisible, Converter={StaticResource BoolToVisConverter}}"/>
                </Grid>

                <!-- INFO BAR -->
                <infoBar:InfoBarView x:Name="InfoBar" Grid.Row="1" Location="Main"
                                     Visibility="{Binding ElementName=Root, Path=DataContext.IsMainInfoBarVisible, Converter={StaticResource BoolToVisConverter}}"/> 

                <!-- spacer accommodates the non-superimposed parts of the overlay window (e.g. replay navigation bar) -->
                <Grid Grid.Row="2" Background="Transparent"
                      Visibility="{Binding ElementName=Root, Path=DataContext.MessageOverlayDisplay.IsReplayRecoveryDlgVisible, Mode=OneWay, Converter={StaticResource BoolToVisConverter}}"
                      Height="{Binding ReplayNavigationBarHeight, Mode=OneWay}"/>

            </Grid>
        </Viewbox>
    </Grid>
    </mediaDisplay:LayoutTemplateDockPanel>
</metro:MetroWindow>