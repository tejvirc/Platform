<UserControl x:Class="Aristocrat.Monaco.Gaming.UI.Views.Overlay.ReserveOverlay"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Gaming.UI.ViewModels"
             xmlns:lex="http://wpflocalizeextension.codeplex.com"
             lex:ResxLocalizationProvider.DefaultAssembly="Aristocrat.Monaco.Localization"
             lex:ResxLocalizationProvider.DefaultDictionary="Resources" 
             xmlns:loc="http://monaco.aristocrat.com/localization"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance {x:Type viewModels:LobbyViewModel}}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Converters.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="FourDigitPinBoxStyle" TargetType="TextBox">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="CaretBrush" Value="Gray"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Width" Value="226"/>
                <Setter Property="Height" Value="100"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="MaxLength" Value="4"/>
                <Setter Property="FontSize" Value="124"/>
            </Style>

            <Style x:Key="GiantReservedLockupTextBlockStyle" TargetType="TextBlock">
                <Setter Property="FontWeight" Value="Bold"/>
                <Setter Property="FontFamily" Value="Calibri"/>
                <Setter Property="FontStretch" Value="Expanded"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Foreground" Value="#EEEEEE"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Effect">
                    <Setter.Value>
                        <DropShadowEffect ShadowDepth="4" Direction="330" Color="Orange"  Opacity=".9" BlurRadius="4" />
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="IncorrectPinTextBlockStyle" TargetType="TextBlock">
                <Setter Property="FontSize" Value="72"/>
                <Setter Property="FontWeight" Value="DemiBold"/>
                <Setter Property="FontFamily" Value="Calibri"/>
                <Setter Property="TextAlignment" Value="Center"/>
                <Setter Property="TextWrapping" Value="Wrap"/>
                <Setter Property="Foreground" Value="WhiteSmoke"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="VerticalAlignment" Value="Top"/>
                <Setter Property="Padding" Value="30 30 30 30"/>
                <Setter Property="Width" Value="{Binding ElementName=IncorrectPinImage, Path=ActualWidth}"/>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid Name="Root">
        <Grid.Style>
            <Style TargetType="Grid">
                <Style.Triggers>
                    <DataTrigger Value="Confirm" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="Black" Opacity="0.5"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Grid.Style>

        <!-- The reserve lockup that shows the countdown timer and covers the entire screen -->
        <Grid Name="FullScreenLockupGrid"
              HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
              Visibility="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ShowLockupBackground,
                  Converter={StaticResource TrueVisibleFalseHidden}}">
            <Grid.Background>
                <ImageBrush Stretch="Fill" ImageSource="{DynamicResource ExitReserveLockupBackgroundImage}"/>
            </Grid.Background>
        </Grid>

        <!-- The Countdown timer display -->
        <Grid Name="CountdownTimerGrid"
              HorizontalAlignment="Center" VerticalAlignment="Top"
              Visibility="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ShowCountDownTimer,
                  Converter={StaticResource TrueVisibleFalseHidden}}">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
                <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>
            <!-- The giant reserved text -->
            <TextBlock Name="GiantReservedText" Grid.Row="0"
                    Style="{StaticResource GiantReservedLockupTextBlockStyle}"
                    Text="{lex:Loc Reserved}"
                    Margin="0 60 0 0"
                    FontSize="300"/>
            <!-- The remaining time on the countdown timer -->
            <TextBlock Name="GiantCountdownRemainingTime" Grid.Row="1"
                    Style="{StaticResource GiantReservedLockupTextBlockStyle}"
                    Text="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.CountdownTimerText, UpdateSourceTrigger=PropertyChanged, Mode=OneWay}"
                    Margin="0 -30 0 0"
                    FontSize="260"/>
            <!-- The large exit button the will open the pin entry panel -->
            <Button Name="ExitReserveButton"
                    Grid.Row="2"
                    Margin="0 60 0 0"
                    Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ExitReserveButtonClickedCommand}">
                <Button.Template>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Image Name="ExitReserveImage" Stretch="None" Source="{DynamicResource ExitReserveBigNormal}"/>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="ExitReserveImage" Property="Source" Value="{DynamicResource ExitReserveBigPressed}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Button.Template>
            </Button>
        </Grid>

        <!-- Grid that contains the too many incorrect pin entries message -->
        <Grid Name="IncorrectPinMessageGrid" HorizontalAlignment="Center" VerticalAlignment="Center"
                Visibility="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ShowIncorrectUnlockPinDisplay,
                    Converter={StaticResource TrueVisibleFalseHidden}}">
            <!-- An image of the background used for the reserve unlock screen but blank -->
            <Image x:Name="IncorrectPinImage" Stretch="None" Source="{DynamicResource ExitReserveBlankBackgroundImage}" />
            <!-- Top part of the incorrect pin attempts message -->
            <TextBlock Name="IncorrectPinText1" 
                       Style="{StaticResource IncorrectPinTextBlockStyle}"
                       Text="{lex:Loc ReserveMachineIncorrectPinWaitText1}"
                       Margin="0 16 0 0"/>
            <!-- The time remaining that the player must wait to try again -->
            <TextBlock Name="IncorrectPinTimeRemainingText" 
                       Style="{StaticResource IncorrectPinTextBlockStyle}"
                       Text="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.IncorrectPinWaitTimeLeft}"
                       Margin="0 200 0 0"
                       Foreground="Gold"/>
            <!-- Bottom part of the incorrect pin attempts message -->
            <TextBlock Name="IncorrectPinText2"
                       Style="{StaticResource IncorrectPinTextBlockStyle}"
                       Text="{lex:Loc ReserveMachineIncorrectPinWaitText2}"
                       Margin="0 290 0 0"/>
        </Grid>

        <!-- The confirm and exit reserve pin panels -->
        <Grid Name="PinPanel" HorizontalAlignment="Center" VerticalAlignment="Center"
                Visibility="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ShowPinEntryPanel,
                  Converter={StaticResource TrueVisibleFalseHidden}}">
            <!-- The background image, will change depending on if confirming or exiting reserve -->
            <Image Name="ConfirmOrExitImage" Stretch="None">
                <Image.Style>
                    <Style TargetType="Image">
                        <Style.Triggers>
                            <DataTrigger Value="Confirm" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                <Setter Property="Source" Value="{DynamicResource ConfirmReserveBackgroundImage}"/>
                            </DataTrigger>
                            <DataTrigger Value="Countdown" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                <Setter Property="Source" Value="{x:Null}"/>
                            </DataTrigger>
                            <DataTrigger Value="Exit" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                <Setter Property="Source" Value="{DynamicResource ExitReserveBackgroundImage}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Image.Style>
            </Image>
            <!-- PIN entry text box grid -->
            <Grid Name="PinTextBoxGrid">
                <!-- The text box where the *'s will appear as keys are pressed -->
                <TextBox x:Name="FourDigitPinBox"
                         Style="{StaticResource FourDigitPinBoxStyle}"
                         Text="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.PinBoxContent}"
                         Margin="280 55 0 0"
                         IsReadOnly="True"
                         IsReadOnlyCaretVisible="False"
                         Focusable="False"/>
                <!-- The red rectangle that appears around the text box (which is actually a part of the background image) when an incorrect PIN is entered -->
                <Rectangle Name="IncorrectPinHighlight"
                           Visibility="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ShowIncorrectPinWarning,
                               Converter={StaticResource TrueVisibleFalseHidden}}"
                           HorizontalAlignment="Center" VerticalAlignment="Top"
                           StrokeThickness="4" Stroke="Red" Fill="Transparent"
                           Width="233" Height="62"
                           Margin="272 91 0 0"/>
                <!-- The incorrect PIN warning message -->
                <TextBlock Name="IncorrectPinWarningText"
                           Text="{lex:Loc ReserveMachineIncorrectPinText}"
                           Visibility="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ShowIncorrectPinWarning,
                               Converter={StaticResource TrueVisibleFalseHidden}}"
                           HorizontalAlignment="Center" VerticalAlignment="Top"
                           Foreground="Red" 
                           FontSize="16" FontWeight="DemiBold"
                           Margin="260 154 0 0"/>
            </Grid>
            <!-- 0-9 digit grid -->
            <Grid Name="DigitGrid"
                  Margin="0 166 0 0"
                  HorizontalAlignment="Center" VerticalAlignment="Top">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="96"/>
                    <ColumnDefinition Width="96"/>
                    <ColumnDefinition Width="96"/>
                    <ColumnDefinition Width="96"/>
                    <ColumnDefinition Width="96"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="96"/>
                    <RowDefinition Height="86"/>
                </Grid.RowDefinitions>

                <!-- Button for 1 digit -->
                <Button Name="Digit1Button"
                        Grid.Row="0" Grid.Column="0"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="1">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit1Image" Stretch="None" Source="{DynamicResource Digit1BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit1Image" Property="Source" Value="{DynamicResource Digit1BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 2 digit -->
                <Button Name="Digit2Button"
                        Grid.Row="0" Grid.Column="1"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="2">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit2Image" Stretch="None" Source="{DynamicResource Digit2BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit2Image" Property="Source" Value="{DynamicResource Digit2BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 3 digit -->
                <Button Name="Digit3Button"
                        Grid.Row="0" Grid.Column="2"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="3">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit3Image" Stretch="None" Source="{DynamicResource Digit3BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit3Image" Property="Source" Value="{DynamicResource Digit3BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 4 digit -->
                <Button Name="Digit4Button"
                        Grid.Row="0" Grid.Column="3"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="4">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit4Image" Stretch="None" Source="{DynamicResource Digit4BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit4Image" Property="Source" Value="{DynamicResource Digit4BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 5 digit -->
                <Button Name="Digit5Button"
                        Grid.Row="0" Grid.Column="4"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="5">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit5Image" Stretch="None" Source="{DynamicResource Digit5BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit5Image" Property="Source" Value="{DynamicResource Digit5BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 6 digit -->
                <Button Name="Digit6Button"
                        Grid.Row="1" Grid.Column="0"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="6">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit6Image" Stretch="None" Source="{DynamicResource Digit6BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit6Image" Property="Source" Value="{DynamicResource Digit6BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 7 digit -->
                <Button Name="Digit7Button"
                        Grid.Row="1" Grid.Column="1"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="7">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit7Image" Stretch="None" Source="{DynamicResource Digit7BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit7Image" Property="Source" Value="{DynamicResource Digit7BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 8 digit -->
                <Button Name="Digit8Button"
                        Grid.Row="1" Grid.Column="2"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="8">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit8Image" Stretch="None" Source="{DynamicResource Digit8BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit8Image" Property="Source" Value="{DynamicResource Digit8BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 9 digit -->
                <Button Name="Digit9Button"
                        Grid.Row="1" Grid.Column="3"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="9">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit9Image" Stretch="None" Source="{DynamicResource Digit9BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit9Image" Property="Source" Value="{DynamicResource Digit9BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- Button for 0 digit -->
                <Button Name="Digit0Button"
                        Grid.Row="1" Grid.Column="4"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.DigitClickedCommand}"
                        CommandParameter="0">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="Digit0Image" Stretch="None" Source="{DynamicResource Digit0BigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="Digit0Image" Property="Source" Value="{DynamicResource Digit0BigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </Grid>
            <!-- Backspace, reserve/unlock and cancel buttons -->
            <StackPanel Name="BottomButtonPanel"
                    Orientation="Horizontal" FlowDirection="LeftToRight"
                    VerticalAlignment="Top" HorizontalAlignment="Center"
                    Margin="0 355 0 0">
                <!-- The backspace button -->
                <Button x:Name="BackspaceButton"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.BackspaceButtonClickedCommand}">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="BackspaceButtonImage" Stretch="None" Source="{DynamicResource BackspaceBigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="BackspaceButtonImage" Property="Source" Value="{DynamicResource BackspaceBigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- The reserve button, upon pressed will verify the pin is correct and initiate the reserve system -->
                <Button x:Name="ReserveButton"
                    Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ReserveButtonClickedCommand}"
                    IsEnabled="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ConfirmButtonEnabled}"
                    Margin="13 0 13 0">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Value="Confirm" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Value="Exit" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="ReserveButtonImage" Stretch="None" Source="{DynamicResource ReserveBigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="ReserveButtonImage" Property="Source" Value="{DynamicResource ReserveBigDisabled}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="ReserveButtonImage" Property="Source" Value="{DynamicResource ReserveBigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- The unlock button, upon pressed will verify the pin matches and unlcok the reserved machine -->
                <Button x:Name="UnlockButton"
                    Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.UnlockButtonClickedCommand}"
                    IsEnabled="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.ConfirmButtonEnabled}"
                    Margin="13 0 13 0">
                    <Button.Style>
                        <Style TargetType="Button">
                            <Style.Triggers>
                                <DataTrigger Value="Exit" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                    <Setter Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Value="Confirm" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Button.Style>
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="UnlockButtonImage" Stretch="None" Source="{DynamicResource UnlockBigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="UnlockButtonImage" Property="Source" Value="{DynamicResource UnlockBigDisabled}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="UnlockButtonImage" Property="Source" Value="{DynamicResource UnlockBigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
                <!-- The cancel button that will cancel out of the current display and go to a different state -->
                <Button x:Name="CancelButton"
                        Command="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.CancelButtonClickedCommand}">
                    <Button.Template>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Image Name="CancelButtonImage" Stretch="None" Source="{DynamicResource CancelBigNormal}"/>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter TargetName="CancelButtonImage" Property="Source" Value="{DynamicResource CancelBigPressed}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Button.Template>
                </Button>
            </StackPanel>
            <!-- Time length the machine will be reserved for -->
            <TextBlock x:Name="ReserveTimeLength"
                       HorizontalAlignment="Center" VerticalAlignment="Top"
                       Margin ="206 410 0 0"
                       FontSize="36"
                       Height="40"
                       FontWeight="Bold"
                       Foreground="Gold"
                       Text="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.TimeLengthMachineWillBeReserved}">
                <TextBlock.Style>
                    <Style TargetType="TextBlock">
                        <Style.Triggers>
                            <DataTrigger Value="Confirm" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Value="Exit" Binding="{Binding MessageOverlayDisplay.ReserveOverlayViewModel.State}">
                                <Setter Property="Visibility" Value="Hidden"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
            </TextBlock>
        </Grid>
    </Grid>
</UserControl>