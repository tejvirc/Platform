// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameHistoryLog.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Aristocrat.Monaco.Gaming.Proto {

  /// <summary>Holder for reflection information generated from gameHistoryLog.proto</summary>
  public static partial class GameHistoryLogReflection {

    #region Descriptor
    /// <summary>File descriptor for gameHistoryLog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameHistoryLogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRnYW1lSGlzdG9yeUxvZy5wcm90bxIeQXJpc3RvY3JhdC5Nb25hY28uR2Ft",
            "aW5nLlByb3RvGh9nb29nbGUvcHJvdG9idWYvdGltZXN0YW1wLnByb3RvGh5n",
            "b29nbGUvcHJvdG9idWYvd3JhcHBlcnMucHJvdG8ivg0KDkdhbWVIaXN0b3J5",
            "TG9nEhUKDXN0b3JhZ2VfaW5kZXgYASABKAUSFQoNcmVjb3ZlcnlfYmxvYhgC",
            "IAEoDBJOChNkZW5vbV9jb25maWd1cmF0aW9uGAMgASgLMjEuQXJpc3RvY3Jh",
            "dC5Nb25hY28uR2FtaW5nLlByb3RvLkdhbWVDb25maWd1cmF0aW9uEhYKDnRy",
            "YW5zYWN0aW9uX2lkGAQgASgDEhQKDGxvZ19zZXF1ZW5jZRgFIAEoAxIzCg9z",
            "dGFydF9kYXRlX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEjEKDWVuZF9kYXRlX3RpbWUYByABKAsyGi5nb29nbGUucHJvdG9idWYu",
            "VGltZXN0YW1wEhoKEmVuZF90cmFuc2FjdGlvbl9pZBgIIAEoAxIPCgdnYW1l",
            "X2lkGAkgASgFEhAKCGRlbm9tX2lkGAogASgDEhUKDXN0YXJ0X2NyZWRpdHMY",
            "CyABKAMSEwoLZW5kX2NyZWRpdHMYDCABKAMSPQoKcGxheV9zdGF0ZRgNIAEo",
            "DjIpLkFyaXN0b2NyYXQuTW9uYWNvLkdhbWluZy5Qcm90by5QbGF5U3RhdGUS",
            "QQoKZXJyb3JfY29kZRgOIAEoDjItLkFyaXN0b2NyYXQuTW9uYWNvLkdhbWlu",
            "Zy5Qcm90by5HYW1lRXJyb3JDb2RlEjoKBnJlc3VsdBgPIAEoDjIqLkFyaXN0",
            "b2NyYXQuTW9uYWNvLkdhbWluZy5Qcm90by5HYW1lUmVzdWx0EhUKDWluaXRp",
            "YWxfd2FnZXIYECABKAMSEwoLZmluYWxfd2FnZXIYESABKAMSEwoLcHJvbW9f",
            "d2FnZXIYEiABKAMSFwoPdW5jb21taXR0ZWRfd2luGBMgASgDEhMKC2luaXRp",
            "YWxfd2luGBQgASgDEhgKEHNlY29uZGFyeV9wbGF5ZWQYFSABKAMSFwoPc2Vj",
            "b25kYXJ5X3dhZ2VyGBYgASgDEhUKDXNlY29uZGFyeV93aW4YFyABKAMSEQoJ",
            "ZmluYWxfd2luGBggASgDEhYKDmdhbWVfd2luX2JvbnVzGBkgASgDEhEKCXRv",
            "dGFsX3dvbhgaIAEoAxISCgphbW91bnRfb3V0GBsgASgDEi8KC2xhc3RfdXBk",
            "YXRlGBwgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIZChFsYXN0",
            "X2NvbW1pdF9pbmRleBgdIAEoBRIfChdnYW1lX3JvdW5kX2Rlc2NyaXB0aW9u",
            "cxgeIAEoCRJBChBqYWNrcG90X3NuYXBzaG90GB8gAygLMicuQXJpc3RvY3Jh",
            "dC5Nb25hY28uR2FtaW5nLlByb3RvLkphY2twb3QSRQoUamFja3BvdF9zbmFw",
            "c2hvdF9lbmQYICADKAsyJy5BcmlzdG9jcmF0Lk1vbmFjby5HYW1pbmcuUHJv",
            "dG8uSmFja3BvdBI9CghqYWNrcG90cxghIAMoCzIrLkFyaXN0b2NyYXQuTW9u",
            "YWNvLkdhbWluZy5Qcm90by5KYWNrcG90SW5mbxJFCgx0cmFuc2FjdGlvbnMY",
            "IiADKAsyLy5BcmlzdG9jcmF0Lk1vbmFjby5HYW1pbmcuUHJvdG8uVHJhbnNh",
            "Y3Rpb25JbmZvEkEKBmV2ZW50cxgjIAMoCzIxLkFyaXN0b2NyYXQuTW9uYWNv",
            "LkdhbWluZy5Qcm90by5HYW1lRXZlbnRMb2dFbnRyeRJPCg9tZXRlcl9zbmFw",
            "c2hvdHMYJCADKAsyNi5BcmlzdG9jcmF0Lk1vbmFjby5HYW1pbmcuUHJvdG8u",
            "R2FtZVJvdW5kTWV0ZXJTbmFwc2hvdBI8CgpmcmVlX2dhbWVzGCUgAygLMigu",
            "QXJpc3RvY3JhdC5Nb25hY28uR2FtaW5nLlByb3RvLkZyZWVHYW1lEhcKD2Zy",
            "ZWVfZ2FtZV9pbmRleBgmIAEoBRJCCg1jYXNoX291dF9pbmZvGCcgAygLMisu",
            "QXJpc3RvY3JhdC5Nb25hY28uR2FtaW5nLlByb3RvLkNhc2hPdXRJbmZvEjkK",
            "CG91dGNvbWVzGCggAygLMicuQXJpc3RvY3JhdC5Nb25hY28uR2FtaW5nLlBy",
            "b3RvLk91dGNvbWUSEwoLbG9jYWxlX2NvZGUYKSABKAkSGgoSZ2FtZV9jb25m",
            "aWd1cmF0aW9uGCogASgJEkwKEmdhbWVfcm91bmRfZGV0YWlscxgrIAEoCzIw",
            "LkFyaXN0b2NyYXQuTW9uYWNvLkdhbWluZy5Qcm90by5HYW1lUm91bmREZXRh",
            "aWxzIuwBChFHYW1lQ29uZmlndXJhdGlvbhIdChVtaW5pbXVtX3dhZ2VyX2Ny",
            "ZWRpdHMYASABKAUSHQoVbWF4aW11bV93YWdlcl9jcmVkaXRzGAIgASgFEiUK",
            "HW1heGltdW1fd2FnZXJfb3V0c2lkZV9jcmVkaXRzGAMgASgFEhIKCmJldF9v",
            "cHRpb24YBCABKAkSEwoLbGluZV9vcHRpb24YBSABKAkSEQoJYm9udXNfYmV0",
            "GAYgASgFEhkKEXNlY29uZGFyeV9lbmFibGVkGAcgASgIEhsKE2xldF9pdF9y",
            "aWRlX2VuYWJsZWQYCCABKAgiUQoHSmFja3BvdBIRCglkZXZpY2VfaWQYASAB",
            "KAUSEAoIbGV2ZWxfaWQYAiABKAUSEgoKbGV2ZWxfbmFtZRgDIAEoCRINCgV2",
            "YWx1ZRgEIAEoAyKMAgoLSmFja3BvdEluZm8SFgoOdHJhbnNhY3Rpb25faWQY",
            "ASABKAMSMQoNaGl0X2RhdGVfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1",
            "Zi5UaW1lc3RhbXASPQoKcGF5X21ldGhvZBgDIAEoDjIpLkFyaXN0b2NyYXQu",
            "TW9uYWNvLkdhbWluZy5Qcm90by5QYXlNZXRob2QSEQoJZGV2aWNlX2lkGAQg",
            "ASgFEhEKCXBhY2tfbmFtZRgFIAEoCRIQCghsZXZlbF9pZBgGIAEoBRISCgp3",
            "aW5fYW1vdW50GAcgASgDEhAKCHdpbl90ZXh0GAggASgJEhUKDXdhZ2VyX2Ny",
            "ZWRpdHMYCSABKAMi8QIKD1RyYW5zYWN0aW9uSW5mbxIYChB0cmFuc2FjdGlv",
            "bl90eXBlGAEgASgJEg4KBmFtb3VudBgCIAEoAxIoCgR0aW1lGAMgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIWCg50cmFuc2FjdGlvbl9pZBgE",
            "IAEoAxISCgpnYW1lX2luZGV4GAUgASgFEkEKDGhhbmRwYXlfdHlwZRgGIAEo",
            "DjIrLkFyaXN0b2NyYXQuTW9uYWNvLkdhbWluZy5Qcm90by5IYW5kcGF5VHlw",
            "ZRJACgxrZXlfb2ZmX3R5cGUYByABKA4yKi5BcmlzdG9jcmF0Lk1vbmFjby5H",
            "YW1pbmcuUHJvdG8uS2V5T2ZmVHlwZRIXCg9jYXNoYWJsZV9hbW91bnQYCCAB",
            "KAMSHQoVY2FzaGFibGVfcHJvbW9fYW1vdW50GAkgASgDEiEKGW5vbl9jYXNo",
            "YWJsZV9wcm9tb19hbW91bnQYCiABKAMigAEKEUdhbWVFdmVudExvZ0VudHJ5",
            "Ei4KCmVudHJ5X2RhdGUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0",
            "YW1wEhAKCGxvZ190eXBlGAIgASgJEhEKCWxvZ19lbnRyeRgDIAEoCRIWCg50",
            "cmFuc2FjdGlvbl9pZBgEIAEoAyKsCwoWR2FtZVJvdW5kTWV0ZXJTbmFwc2hv",
            "dBI9CgpwbGF5X3N0YXRlGAEgASgOMikuQXJpc3RvY3JhdC5Nb25hY28uR2Ft",
            "aW5nLlByb3RvLlBsYXlTdGF0ZRIXCg9jdXJyZW50X2NyZWRpdHMYAiABKAMS",
            "FgoOd2FnZXJlZF9hbW91bnQYAyABKAMSIAoYZWdtX3BhaWRfZ2FtZV93b25f",
            "YW1vdW50GAQgASgDEiYKHmVnbV9wYWlkX2dhbWVfd2luX2JvbnVzX2Ftb3Vu",
            "dBgFIAEoAxIpCiFlZ21fcGFpZF9ib251c19jYXNoYWJsZV9pbl9hbW91bnQY",
            "BiABKAMSKQohZWdtX3BhaWRfYm9udXNfbm9uX2Nhc2hfaW5fYW1vdW50GAcg",
            "ASgDEiYKHmVnbV9wYWlkX2JvbnVzX3Byb21vX2luX2Ftb3VudBgIIAEoAxIn",
            "Ch9oYW5kX3BhaWRfZ2FtZV93aW5fYm9udXNfYW1vdW50GAkgASgDEiEKGWhh",
            "bmRfcGFpZF9nYW1lX3dvbl9hbW91bnQYCiABKAMSIQoZaGFuZF9wYWlkX3By",
            "b2dfd29uX2Ftb3VudBgLIAEoAxIqCiJoYW5kX3BhaWRfYm9udXNfY2FzaGFi",
            "bGVfaW5fYW1vdW50GAwgASgDEioKImhhbmRfcGFpZF9ib251c19ub25fY2Fz",
            "aF9pbl9hbW91bnQYDSABKAMSJwofaGFuZF9wYWlkX2JvbnVzX3Byb21vX2lu",
            "X2Ftb3VudBgOIAEoAxIUCgx0cnVlX2NvaW5faW4YDyABKAMSGgoSY3VycmVu",
            "Y3lfaW5fYW1vdW50GBAgASgDEiIKGnZvdWNoZXJfaW5fY2FzaGFibGVfYW1v",
            "dW50GBEgASgDEigKIHZvdWNoZXJfaW5fY2FzaGFibGVfcHJvbW9fYW1vdW50",
            "GBIgASgDEiYKHnZvdWNoZXJfaW5fbm9uX2Nhc2hhYmxlX2Ftb3VudBgTIAEo",
            "AxIqCiJ2b3VjaGVyX2luX25vbl90cmFuc2ZlcmFibGVfYW1vdW50GBQgASgD",
            "EhUKDXRydWVfY29pbl9vdXQYFSABKAMSIwobdm91Y2hlcl9vdXRfY2FzaGFi",
            "bGVfYW1vdW50GBYgASgDEikKIXZvdWNoZXJfb3V0X2Nhc2hhYmxlX3Byb21v",
            "X2Ftb3VudBgXIAEoAxInCh92b3VjaGVyX291dF9ub25fY2FzaGFibGVfYW1v",
            "dW50GBggASgDEh4KFmhhbmRwYWlkX2NhbmNlbF9hbW91bnQYGSABKAMSEQoJ",
            "Y29pbl9kcm9wGBogASgDEh4KFmhhbmRfcGFpZF9ib251c19hbW91bnQYGyAB",
            "KAMSHQoVZWdtX3BhaWRfYm9udXNfYW1vdW50GBwgASgDEh4KFnNlY29uZGFy",
            "eV9wbGF5ZWRfY291bnQYHSABKAMSIAoYc2Vjb25kYXJ5X3dhZ2VyZWRfYW1v",
            "dW50GB4gASgDEhwKFHNlY29uZGFyeV93b25fYW1vdW50GB8gASgDEh4KFndh",
            "dF9vbl9jYXNoYWJsZV9hbW91bnQYICABKAMSHwoXd2F0X29mZl9jYXNoYWJs",
            "ZV9hbW91bnQYISABKAMSIgoad2F0X29uX25vbl9jYXNoYWJsZV9hbW91bnQY",
            "IiABKAMSIwobd2F0X29mZl9ub25fY2FzaGFibGVfYW1vdW50GCMgASgDEiQK",
            "HHdhdF9vbl9jYXNoYWJsZV9wcm9tb19hbW91bnQYJCABKAMSJQodd2F0X29m",
            "Zl9jYXNoYWJsZV9wcm9tb19hbW91bnQYJSABKAMSIAoYZWdtX3BhaWRfcHJv",
            "Z193b25fYW1vdW50GCYgASgDEhwKFHdhZ2VyZWRfcHJvbW9fYW1vdW50GCcg",
            "ASgDEh0KFWhhcmRfbWV0ZXJfb3V0X2Ftb3VudBgoIAEoAyKBAgoIRnJlZUdh",
            "bWUSMwoPc3RhcnRfZGF0ZV90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVm",
            "LlRpbWVzdGFtcBIxCg1lbmRfZGF0ZV90aW1lGAIgASgLMhouZ29vZ2xlLnBy",
            "b3RvYnVmLlRpbWVzdGFtcBIVCg1zdGFydF9jcmVkaXRzGAMgASgDEhMKC2Vu",
            "ZF9jcmVkaXRzGAQgASgDEhEKCWZpbmFsX3dpbhgFIAEoAxI6CgZyZXN1bHQY",
            "BiABKA4yKi5BcmlzdG9jcmF0Lk1vbmFjby5HYW1pbmcuUHJvdG8uR2FtZVJl",
            "c3VsdBISCgphbW91bnRfb3V0GAcgASgDIsUBCgtDYXNoT3V0SW5mbxIOCgZh",
            "bW91bnQYASABKAMSDQoFd2FnZXIYAiABKAMSQQoGcmVhc29uGAMgASgOMjEu",
            "QXJpc3RvY3JhdC5Nb25hY28uR2FtaW5nLlByb3RvLlRyYW5zZmVyT3V0UmVh",
            "c29uEg8KB2hhbmRwYXkYBCABKAgSEAoIY29tcGxldGUYBSABKAgSEAoIdHJh",
            "Y2VfaWQYBiABKAwSHwoXYXNzb2NpYXRlZF90cmFuc2FjdGlvbnMYByADKAMi",
            "+gEKB091dGNvbWUSCgoCaWQYASABKAMSEwoLZ2FtZV9zZXRfaWQYAiABKAMS",
            "EQoJc3Vic2V0X2lkGAMgASgDEkMKCXJlZmVyZW5jZRgEIAEoDjIwLkFyaXN0",
            "b2NyYXQuTW9uYWNvLkdhbWluZy5Qcm90by5PdXRjb21lUmVmZXJlbmNlEjkK",
            "BHR5cGUYBSABKA4yKy5BcmlzdG9jcmF0Lk1vbmFjby5HYW1pbmcuUHJvdG8u",
            "T3V0Y29tZVR5cGUSDQoFdmFsdWUYBiABKAMSFwoPd2luX2xldmVsX2luZGV4",
            "GAcgASgFEhMKC2xvb2t1cF9kYXRhGAggASgJIi4KEEdhbWVSb3VuZERldGFp",
            "bHMSGgoScHJlc2VudGF0aW9uX2luZGV4GAEgASgDKq0CCglQbGF5U3RhdGUS",
            "CAoESWRsZRAAEg0KCUluaXRpYXRlZBABEhUKEVByaW1hcnlHYW1lRXNjcm93",
            "EAISFQoRUHJpbWFyeUdhbWVQbGF5ZWQQAxIUChBQcmltYXJ5R2FtZUVuZGVk",
            "EAQSFgoSUHJvZ3Jlc3NpdmVQZW5kaW5nEAUSFwoTU2Vjb25kYXJ5R2FtZUNo",
            "b2ljZRAGEhcKE1NlY29uZGFyeUdhbWVFc2Nyb3cQBxIYChRTZWNvbmRhcnlH",
            "YW1lU3RhcnRlZBAIEhYKElNlY29uZGFyeUdhbWVFbmRlZBAJEhIKDlBheUdh",
            "bWVSZXN1bHRzEAoSDgoKRmF0YWxFcnJvchALEg0KCUdhbWVFbmRlZBAMEhQK",
            "EFByZXNlbnRhdGlvbklkbGUQDSpCCg1HYW1lRXJyb3JDb2RlEggKBE5vbmUQ",
            "ABISCg5MaWFiaWxpdHlMaW1pdBABEhMKD0xlZ2l0aW1hY3lMaW1pdBACKkkK",
            "CkdhbWVSZXN1bHQSEgoOR2FtZVJlc3VsdE5vbmUQABIKCgZGYWlsZWQQARII",
            "CgRMb3N0EAISCAoEVGllZBADEgcKA1dvbhAEKi4KCVBheU1ldGhvZBIHCgNB",
            "bnkQABILCgdIYW5kcGF5EAESCwoHVm91Y2hlchACKlEKC0hhbmRwYXlUeXBl",
            "EgsKB0dhbWVXaW4QABIMCghCb251c1BheRABEhAKDENhbmNlbENyZWRpdBAC",
            "EhUKEUhhbmRwYXlUeXBlTm90U2V0EAMqyAEKCktleU9mZlR5cGUSEAoMTG9j",
            "YWxIYW5kcGF5EAASEAoMTG9jYWxWb3VjaGVyEAESDAoITG9jYWxXYXQQAhIP",
            "CgtMb2NhbENyZWRpdBADEhEKDVJlbW90ZUhhbmRwYXkQBBIRCg1SZW1vdGVW",
            "b3VjaGVyEAUSDQoJUmVtb3RlV2F0EAYSEAoMUmVtb3RlQ3JlZGl0EAcSDQoJ",
            "Q2FuY2VsbGVkEAgSCwoHVW5rbm93bhAJEhQKEEtleU9mZlR5cGVOb3RTZXQQ",
            "CiphChFUcmFuc2Zlck91dFJlYXNvbhIRCg1SZWFzb25DYXNoT3V0EAASEgoO",
            "UmVhc29uTGFyZ2VXaW4QARISCg5SZWFzb25Cb251c1BheRACEhEKDVJlYXNv",
            "bkNhc2hXaW4QAyosChBPdXRjb21lUmVmZXJlbmNlEgoKBkRpcmVjdBAAEgwK",
            "CEluZGlyZWN0EAEqPAoLT3V0Y29tZVR5cGUSDAoIU3RhbmRhcmQQABIPCgtQ",
            "cm9ncmVzc2l2ZRABEg4KCkZyYWN0aW9uYWwQAmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Aristocrat.Monaco.Gaming.Proto.PlayState), typeof(global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode), typeof(global::Aristocrat.Monaco.Gaming.Proto.GameResult), typeof(global::Aristocrat.Monaco.Gaming.Proto.PayMethod), typeof(global::Aristocrat.Monaco.Gaming.Proto.HandpayType), typeof(global::Aristocrat.Monaco.Gaming.Proto.KeyOffType), typeof(global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason), typeof(global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference), typeof(global::Aristocrat.Monaco.Gaming.Proto.OutcomeType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLog), global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLog.Parser, new[]{ "StorageIndex", "RecoveryBlob", "DenomConfiguration", "TransactionId", "LogSequence", "StartDateTime", "EndDateTime", "EndTransactionId", "GameId", "DenomId", "StartCredits", "EndCredits", "PlayState", "ErrorCode", "Result", "InitialWager", "FinalWager", "PromoWager", "UncommittedWin", "InitialWin", "SecondaryPlayed", "SecondaryWager", "SecondaryWin", "FinalWin", "GameWinBonus", "TotalWon", "AmountOut", "LastUpdate", "LastCommitIndex", "GameRoundDescriptions", "JackpotSnapshot", "JackpotSnapshotEnd", "Jackpots", "Transactions", "Events", "MeterSnapshots", "FreeGames", "FreeGameIndex", "CashOutInfo", "Outcomes", "LocaleCode", "GameConfiguration", "GameRoundDetails" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration), global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration.Parser, new[]{ "MinimumWagerCredits", "MaximumWagerCredits", "MaximumWagerOutsideCredits", "BetOption", "LineOption", "BonusBet", "SecondaryEnabled", "LetItRideEnabled" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.Jackpot), global::Aristocrat.Monaco.Gaming.Proto.Jackpot.Parser, new[]{ "DeviceId", "LevelId", "LevelName", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo), global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo.Parser, new[]{ "TransactionId", "HitDateTime", "PayMethod", "DeviceId", "PackName", "LevelId", "WinAmount", "WinText", "WagerCredits" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo), global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo.Parser, new[]{ "TransactionType", "Amount", "Time", "TransactionId", "GameIndex", "HandpayType", "KeyOffType", "CashableAmount", "CashablePromoAmount", "NonCashablePromoAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry), global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry.Parser, new[]{ "EntryDate", "LogType", "LogEntry", "TransactionId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot), global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot.Parser, new[]{ "PlayState", "CurrentCredits", "WageredAmount", "EgmPaidGameWonAmount", "EgmPaidGameWinBonusAmount", "EgmPaidBonusCashableInAmount", "EgmPaidBonusNonCashInAmount", "EgmPaidBonusPromoInAmount", "HandPaidGameWinBonusAmount", "HandPaidGameWonAmount", "HandPaidProgWonAmount", "HandPaidBonusCashableInAmount", "HandPaidBonusNonCashInAmount", "HandPaidBonusPromoInAmount", "TrueCoinIn", "CurrencyInAmount", "VoucherInCashableAmount", "VoucherInCashablePromoAmount", "VoucherInNonCashableAmount", "VoucherInNonTransferableAmount", "TrueCoinOut", "VoucherOutCashableAmount", "VoucherOutCashablePromoAmount", "VoucherOutNonCashableAmount", "HandpaidCancelAmount", "CoinDrop", "HandPaidBonusAmount", "EgmPaidBonusAmount", "SecondaryPlayedCount", "SecondaryWageredAmount", "SecondaryWonAmount", "WatOnCashableAmount", "WatOffCashableAmount", "WatOnNonCashableAmount", "WatOffNonCashableAmount", "WatOnCashablePromoAmount", "WatOffCashablePromoAmount", "EgmPaidProgWonAmount", "WageredPromoAmount", "HardMeterOutAmount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.FreeGame), global::Aristocrat.Monaco.Gaming.Proto.FreeGame.Parser, new[]{ "StartDateTime", "EndDateTime", "StartCredits", "EndCredits", "FinalWin", "Result", "AmountOut" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo), global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo.Parser, new[]{ "Amount", "Wager", "Reason", "Handpay", "Complete", "TraceId", "AssociatedTransactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.Outcome), global::Aristocrat.Monaco.Gaming.Proto.Outcome.Parser, new[]{ "Id", "GameSetId", "SubsetId", "Reference", "Type", "Value", "WinLevelIndex", "LookupData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails), global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails.Parser, new[]{ "PresentationIndex" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum PlayState {
    [pbr::OriginalName("Idle")] Idle = 0,
    [pbr::OriginalName("Initiated")] Initiated = 1,
    [pbr::OriginalName("PrimaryGameEscrow")] PrimaryGameEscrow = 2,
    [pbr::OriginalName("PrimaryGamePlayed")] PrimaryGamePlayed = 3,
    [pbr::OriginalName("PrimaryGameEnded")] PrimaryGameEnded = 4,
    [pbr::OriginalName("ProgressivePending")] ProgressivePending = 5,
    [pbr::OriginalName("SecondaryGameChoice")] SecondaryGameChoice = 6,
    [pbr::OriginalName("SecondaryGameEscrow")] SecondaryGameEscrow = 7,
    [pbr::OriginalName("SecondaryGameStarted")] SecondaryGameStarted = 8,
    [pbr::OriginalName("SecondaryGameEnded")] SecondaryGameEnded = 9,
    [pbr::OriginalName("PayGameResults")] PayGameResults = 10,
    [pbr::OriginalName("FatalError")] FatalError = 11,
    [pbr::OriginalName("GameEnded")] GameEnded = 12,
    [pbr::OriginalName("PresentationIdle")] PresentationIdle = 13,
  }

  public enum GameErrorCode {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("LiabilityLimit")] LiabilityLimit = 1,
    [pbr::OriginalName("LegitimacyLimit")] LegitimacyLimit = 2,
  }

  public enum GameResult {
    [pbr::OriginalName("GameResultNone")] None = 0,
    [pbr::OriginalName("Failed")] Failed = 1,
    [pbr::OriginalName("Lost")] Lost = 2,
    [pbr::OriginalName("Tied")] Tied = 3,
    [pbr::OriginalName("Won")] Won = 4,
  }

  public enum PayMethod {
    [pbr::OriginalName("Any")] Any = 0,
    [pbr::OriginalName("Handpay")] Handpay = 1,
    [pbr::OriginalName("Voucher")] Voucher = 2,
  }

  public enum HandpayType {
    [pbr::OriginalName("GameWin")] GameWin = 0,
    [pbr::OriginalName("BonusPay")] BonusPay = 1,
    [pbr::OriginalName("CancelCredit")] CancelCredit = 2,
    [pbr::OriginalName("HandpayTypeNotSet")] NotSet = 3,
  }

  public enum KeyOffType {
    [pbr::OriginalName("LocalHandpay")] LocalHandpay = 0,
    [pbr::OriginalName("LocalVoucher")] LocalVoucher = 1,
    [pbr::OriginalName("LocalWat")] LocalWat = 2,
    [pbr::OriginalName("LocalCredit")] LocalCredit = 3,
    [pbr::OriginalName("RemoteHandpay")] RemoteHandpay = 4,
    [pbr::OriginalName("RemoteVoucher")] RemoteVoucher = 5,
    [pbr::OriginalName("RemoteWat")] RemoteWat = 6,
    [pbr::OriginalName("RemoteCredit")] RemoteCredit = 7,
    [pbr::OriginalName("Cancelled")] Cancelled = 8,
    [pbr::OriginalName("Unknown")] Unknown = 9,
    [pbr::OriginalName("KeyOffTypeNotSet")] NotSet = 10,
  }

  public enum TransferOutReason {
    [pbr::OriginalName("ReasonCashOut")] ReasonCashOut = 0,
    [pbr::OriginalName("ReasonLargeWin")] ReasonLargeWin = 1,
    [pbr::OriginalName("ReasonBonusPay")] ReasonBonusPay = 2,
    [pbr::OriginalName("ReasonCashWin")] ReasonCashWin = 3,
  }

  public enum OutcomeReference {
    [pbr::OriginalName("Direct")] Direct = 0,
    [pbr::OriginalName("Indirect")] Indirect = 1,
  }

  public enum OutcomeType {
    [pbr::OriginalName("Standard")] Standard = 0,
    [pbr::OriginalName("Progressive")] Progressive = 1,
    [pbr::OriginalName("Fractional")] Fractional = 2,
  }

  #endregion

  #region Messages
  public sealed partial class GameHistoryLog : pb::IMessage<GameHistoryLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameHistoryLog> _parser = new pb::MessageParser<GameHistoryLog>(() => new GameHistoryLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameHistoryLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameHistoryLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameHistoryLog(GameHistoryLog other) : this() {
      storageIndex_ = other.storageIndex_;
      recoveryBlob_ = other.recoveryBlob_;
      denomConfiguration_ = other.denomConfiguration_ != null ? other.denomConfiguration_.Clone() : null;
      transactionId_ = other.transactionId_;
      logSequence_ = other.logSequence_;
      startDateTime_ = other.startDateTime_ != null ? other.startDateTime_.Clone() : null;
      endDateTime_ = other.endDateTime_ != null ? other.endDateTime_.Clone() : null;
      endTransactionId_ = other.endTransactionId_;
      gameId_ = other.gameId_;
      denomId_ = other.denomId_;
      startCredits_ = other.startCredits_;
      endCredits_ = other.endCredits_;
      playState_ = other.playState_;
      errorCode_ = other.errorCode_;
      result_ = other.result_;
      initialWager_ = other.initialWager_;
      finalWager_ = other.finalWager_;
      promoWager_ = other.promoWager_;
      uncommittedWin_ = other.uncommittedWin_;
      initialWin_ = other.initialWin_;
      secondaryPlayed_ = other.secondaryPlayed_;
      secondaryWager_ = other.secondaryWager_;
      secondaryWin_ = other.secondaryWin_;
      finalWin_ = other.finalWin_;
      gameWinBonus_ = other.gameWinBonus_;
      totalWon_ = other.totalWon_;
      amountOut_ = other.amountOut_;
      lastUpdate_ = other.lastUpdate_ != null ? other.lastUpdate_.Clone() : null;
      lastCommitIndex_ = other.lastCommitIndex_;
      gameRoundDescriptions_ = other.gameRoundDescriptions_;
      jackpotSnapshot_ = other.jackpotSnapshot_.Clone();
      jackpotSnapshotEnd_ = other.jackpotSnapshotEnd_.Clone();
      jackpots_ = other.jackpots_.Clone();
      transactions_ = other.transactions_.Clone();
      events_ = other.events_.Clone();
      meterSnapshots_ = other.meterSnapshots_.Clone();
      freeGames_ = other.freeGames_.Clone();
      freeGameIndex_ = other.freeGameIndex_;
      cashOutInfo_ = other.cashOutInfo_.Clone();
      outcomes_ = other.outcomes_.Clone();
      localeCode_ = other.localeCode_;
      gameConfiguration_ = other.gameConfiguration_;
      gameRoundDetails_ = other.gameRoundDetails_ != null ? other.gameRoundDetails_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameHistoryLog Clone() {
      return new GameHistoryLog(this);
    }

    /// <summary>Field number for the "storage_index" field.</summary>
    public const int StorageIndexFieldNumber = 1;
    private int storageIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StorageIndex {
      get { return storageIndex_; }
      set {
        storageIndex_ = value;
      }
    }

    /// <summary>Field number for the "recovery_blob" field.</summary>
    public const int RecoveryBlobFieldNumber = 2;
    private pb::ByteString recoveryBlob_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString RecoveryBlob {
      get { return recoveryBlob_; }
      set {
        recoveryBlob_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "denom_configuration" field.</summary>
    public const int DenomConfigurationFieldNumber = 3;
    private global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration denomConfiguration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration DenomConfiguration {
      get { return denomConfiguration_; }
      set {
        denomConfiguration_ = value;
      }
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 4;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "log_sequence" field.</summary>
    public const int LogSequenceFieldNumber = 5;
    private long logSequence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LogSequence {
      get { return logSequence_; }
      set {
        logSequence_ = value;
      }
    }

    /// <summary>Field number for the "start_date_time" field.</summary>
    public const int StartDateTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDateTime {
      get { return startDateTime_; }
      set {
        startDateTime_ = value;
      }
    }

    /// <summary>Field number for the "end_date_time" field.</summary>
    public const int EndDateTimeFieldNumber = 7;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndDateTime {
      get { return endDateTime_; }
      set {
        endDateTime_ = value;
      }
    }

    /// <summary>Field number for the "end_transaction_id" field.</summary>
    public const int EndTransactionIdFieldNumber = 8;
    private long endTransactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndTransactionId {
      get { return endTransactionId_; }
      set {
        endTransactionId_ = value;
      }
    }

    /// <summary>Field number for the "game_id" field.</summary>
    public const int GameIdFieldNumber = 9;
    private int gameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameId {
      get { return gameId_; }
      set {
        gameId_ = value;
      }
    }

    /// <summary>Field number for the "denom_id" field.</summary>
    public const int DenomIdFieldNumber = 10;
    private long denomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long DenomId {
      get { return denomId_; }
      set {
        denomId_ = value;
      }
    }

    /// <summary>Field number for the "start_credits" field.</summary>
    public const int StartCreditsFieldNumber = 11;
    private long startCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartCredits {
      get { return startCredits_; }
      set {
        startCredits_ = value;
      }
    }

    /// <summary>Field number for the "end_credits" field.</summary>
    public const int EndCreditsFieldNumber = 12;
    private long endCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndCredits {
      get { return endCredits_; }
      set {
        endCredits_ = value;
      }
    }

    /// <summary>Field number for the "play_state" field.</summary>
    public const int PlayStateFieldNumber = 13;
    private global::Aristocrat.Monaco.Gaming.Proto.PlayState playState_ = global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.PlayState PlayState {
      get { return playState_; }
      set {
        playState_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 14;
    private global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode errorCode_ = global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 15;
    private global::Aristocrat.Monaco.Gaming.Proto.GameResult result_ = global::Aristocrat.Monaco.Gaming.Proto.GameResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.GameResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "initial_wager" field.</summary>
    public const int InitialWagerFieldNumber = 16;
    private long initialWager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long InitialWager {
      get { return initialWager_; }
      set {
        initialWager_ = value;
      }
    }

    /// <summary>Field number for the "final_wager" field.</summary>
    public const int FinalWagerFieldNumber = 17;
    private long finalWager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FinalWager {
      get { return finalWager_; }
      set {
        finalWager_ = value;
      }
    }

    /// <summary>Field number for the "promo_wager" field.</summary>
    public const int PromoWagerFieldNumber = 18;
    private long promoWager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PromoWager {
      get { return promoWager_; }
      set {
        promoWager_ = value;
      }
    }

    /// <summary>Field number for the "uncommitted_win" field.</summary>
    public const int UncommittedWinFieldNumber = 19;
    private long uncommittedWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long UncommittedWin {
      get { return uncommittedWin_; }
      set {
        uncommittedWin_ = value;
      }
    }

    /// <summary>Field number for the "initial_win" field.</summary>
    public const int InitialWinFieldNumber = 20;
    private long initialWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long InitialWin {
      get { return initialWin_; }
      set {
        initialWin_ = value;
      }
    }

    /// <summary>Field number for the "secondary_played" field.</summary>
    public const int SecondaryPlayedFieldNumber = 21;
    private long secondaryPlayed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SecondaryPlayed {
      get { return secondaryPlayed_; }
      set {
        secondaryPlayed_ = value;
      }
    }

    /// <summary>Field number for the "secondary_wager" field.</summary>
    public const int SecondaryWagerFieldNumber = 22;
    private long secondaryWager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SecondaryWager {
      get { return secondaryWager_; }
      set {
        secondaryWager_ = value;
      }
    }

    /// <summary>Field number for the "secondary_win" field.</summary>
    public const int SecondaryWinFieldNumber = 23;
    private long secondaryWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SecondaryWin {
      get { return secondaryWin_; }
      set {
        secondaryWin_ = value;
      }
    }

    /// <summary>Field number for the "final_win" field.</summary>
    public const int FinalWinFieldNumber = 24;
    private long finalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FinalWin {
      get { return finalWin_; }
      set {
        finalWin_ = value;
      }
    }

    /// <summary>Field number for the "game_win_bonus" field.</summary>
    public const int GameWinBonusFieldNumber = 25;
    private long gameWinBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GameWinBonus {
      get { return gameWinBonus_; }
      set {
        gameWinBonus_ = value;
      }
    }

    /// <summary>Field number for the "total_won" field.</summary>
    public const int TotalWonFieldNumber = 26;
    private long totalWon_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TotalWon {
      get { return totalWon_; }
      set {
        totalWon_ = value;
      }
    }

    /// <summary>Field number for the "amount_out" field.</summary>
    public const int AmountOutFieldNumber = 27;
    private long amountOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AmountOut {
      get { return amountOut_; }
      set {
        amountOut_ = value;
      }
    }

    /// <summary>Field number for the "last_update" field.</summary>
    public const int LastUpdateFieldNumber = 28;
    private global::Google.Protobuf.WellKnownTypes.Timestamp lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "last_commit_index" field.</summary>
    public const int LastCommitIndexFieldNumber = 29;
    private int lastCommitIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LastCommitIndex {
      get { return lastCommitIndex_; }
      set {
        lastCommitIndex_ = value;
      }
    }

    /// <summary>Field number for the "game_round_descriptions" field.</summary>
    public const int GameRoundDescriptionsFieldNumber = 30;
    private string gameRoundDescriptions_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameRoundDescriptions {
      get { return gameRoundDescriptions_; }
      set {
        gameRoundDescriptions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "jackpot_snapshot" field.</summary>
    public const int JackpotSnapshotFieldNumber = 31;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.Jackpot> _repeated_jackpotSnapshot_codec
        = pb::FieldCodec.ForMessage(250, global::Aristocrat.Monaco.Gaming.Proto.Jackpot.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Jackpot> jackpotSnapshot_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Jackpot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Jackpot> JackpotSnapshot {
      get { return jackpotSnapshot_; }
    }

    /// <summary>Field number for the "jackpot_snapshot_end" field.</summary>
    public const int JackpotSnapshotEndFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.Jackpot> _repeated_jackpotSnapshotEnd_codec
        = pb::FieldCodec.ForMessage(258, global::Aristocrat.Monaco.Gaming.Proto.Jackpot.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Jackpot> jackpotSnapshotEnd_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Jackpot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Jackpot> JackpotSnapshotEnd {
      get { return jackpotSnapshotEnd_; }
    }

    /// <summary>Field number for the "jackpots" field.</summary>
    public const int JackpotsFieldNumber = 33;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo> _repeated_jackpots_codec
        = pb::FieldCodec.ForMessage(266, global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo> jackpots_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.JackpotInfo> Jackpots {
      get { return jackpots_; }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 34;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(274, global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo> transactions_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.TransactionInfo> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 35;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry> _repeated_events_codec
        = pb::FieldCodec.ForMessage(282, global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry> events_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.GameEventLogEntry> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "meter_snapshots" field.</summary>
    public const int MeterSnapshotsFieldNumber = 36;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot> _repeated_meterSnapshots_codec
        = pb::FieldCodec.ForMessage(290, global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot> meterSnapshots_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.GameRoundMeterSnapshot> MeterSnapshots {
      get { return meterSnapshots_; }
    }

    /// <summary>Field number for the "free_games" field.</summary>
    public const int FreeGamesFieldNumber = 37;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.FreeGame> _repeated_freeGames_codec
        = pb::FieldCodec.ForMessage(298, global::Aristocrat.Monaco.Gaming.Proto.FreeGame.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.FreeGame> freeGames_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.FreeGame>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.FreeGame> FreeGames {
      get { return freeGames_; }
    }

    /// <summary>Field number for the "free_game_index" field.</summary>
    public const int FreeGameIndexFieldNumber = 38;
    private int freeGameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FreeGameIndex {
      get { return freeGameIndex_; }
      set {
        freeGameIndex_ = value;
      }
    }

    /// <summary>Field number for the "cash_out_info" field.</summary>
    public const int CashOutInfoFieldNumber = 39;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo> _repeated_cashOutInfo_codec
        = pb::FieldCodec.ForMessage(314, global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo> cashOutInfo_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.CashOutInfo> CashOutInfo {
      get { return cashOutInfo_; }
    }

    /// <summary>Field number for the "outcomes" field.</summary>
    public const int OutcomesFieldNumber = 40;
    private static readonly pb::FieldCodec<global::Aristocrat.Monaco.Gaming.Proto.Outcome> _repeated_outcomes_codec
        = pb::FieldCodec.ForMessage(322, global::Aristocrat.Monaco.Gaming.Proto.Outcome.Parser);
    private readonly pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Outcome> outcomes_ = new pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Outcome>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Aristocrat.Monaco.Gaming.Proto.Outcome> Outcomes {
      get { return outcomes_; }
    }

    /// <summary>Field number for the "locale_code" field.</summary>
    public const int LocaleCodeFieldNumber = 41;
    private string localeCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LocaleCode {
      get { return localeCode_; }
      set {
        localeCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_configuration" field.</summary>
    public const int GameConfigurationFieldNumber = 42;
    private string gameConfiguration_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string GameConfiguration {
      get { return gameConfiguration_; }
      set {
        gameConfiguration_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "game_round_details" field.</summary>
    public const int GameRoundDetailsFieldNumber = 43;
    private global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails gameRoundDetails_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails GameRoundDetails {
      get { return gameRoundDetails_; }
      set {
        gameRoundDetails_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameHistoryLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameHistoryLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StorageIndex != other.StorageIndex) return false;
      if (RecoveryBlob != other.RecoveryBlob) return false;
      if (!object.Equals(DenomConfiguration, other.DenomConfiguration)) return false;
      if (TransactionId != other.TransactionId) return false;
      if (LogSequence != other.LogSequence) return false;
      if (!object.Equals(StartDateTime, other.StartDateTime)) return false;
      if (!object.Equals(EndDateTime, other.EndDateTime)) return false;
      if (EndTransactionId != other.EndTransactionId) return false;
      if (GameId != other.GameId) return false;
      if (DenomId != other.DenomId) return false;
      if (StartCredits != other.StartCredits) return false;
      if (EndCredits != other.EndCredits) return false;
      if (PlayState != other.PlayState) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (Result != other.Result) return false;
      if (InitialWager != other.InitialWager) return false;
      if (FinalWager != other.FinalWager) return false;
      if (PromoWager != other.PromoWager) return false;
      if (UncommittedWin != other.UncommittedWin) return false;
      if (InitialWin != other.InitialWin) return false;
      if (SecondaryPlayed != other.SecondaryPlayed) return false;
      if (SecondaryWager != other.SecondaryWager) return false;
      if (SecondaryWin != other.SecondaryWin) return false;
      if (FinalWin != other.FinalWin) return false;
      if (GameWinBonus != other.GameWinBonus) return false;
      if (TotalWon != other.TotalWon) return false;
      if (AmountOut != other.AmountOut) return false;
      if (!object.Equals(LastUpdate, other.LastUpdate)) return false;
      if (LastCommitIndex != other.LastCommitIndex) return false;
      if (GameRoundDescriptions != other.GameRoundDescriptions) return false;
      if(!jackpotSnapshot_.Equals(other.jackpotSnapshot_)) return false;
      if(!jackpotSnapshotEnd_.Equals(other.jackpotSnapshotEnd_)) return false;
      if(!jackpots_.Equals(other.jackpots_)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      if(!events_.Equals(other.events_)) return false;
      if(!meterSnapshots_.Equals(other.meterSnapshots_)) return false;
      if(!freeGames_.Equals(other.freeGames_)) return false;
      if (FreeGameIndex != other.FreeGameIndex) return false;
      if(!cashOutInfo_.Equals(other.cashOutInfo_)) return false;
      if(!outcomes_.Equals(other.outcomes_)) return false;
      if (LocaleCode != other.LocaleCode) return false;
      if (GameConfiguration != other.GameConfiguration) return false;
      if (!object.Equals(GameRoundDetails, other.GameRoundDetails)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (StorageIndex != 0) hash ^= StorageIndex.GetHashCode();
      if (RecoveryBlob.Length != 0) hash ^= RecoveryBlob.GetHashCode();
      if (denomConfiguration_ != null) hash ^= DenomConfiguration.GetHashCode();
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (LogSequence != 0L) hash ^= LogSequence.GetHashCode();
      if (startDateTime_ != null) hash ^= StartDateTime.GetHashCode();
      if (endDateTime_ != null) hash ^= EndDateTime.GetHashCode();
      if (EndTransactionId != 0L) hash ^= EndTransactionId.GetHashCode();
      if (GameId != 0) hash ^= GameId.GetHashCode();
      if (DenomId != 0L) hash ^= DenomId.GetHashCode();
      if (StartCredits != 0L) hash ^= StartCredits.GetHashCode();
      if (EndCredits != 0L) hash ^= EndCredits.GetHashCode();
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) hash ^= PlayState.GetHashCode();
      if (ErrorCode != global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode.None) hash ^= ErrorCode.GetHashCode();
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) hash ^= Result.GetHashCode();
      if (InitialWager != 0L) hash ^= InitialWager.GetHashCode();
      if (FinalWager != 0L) hash ^= FinalWager.GetHashCode();
      if (PromoWager != 0L) hash ^= PromoWager.GetHashCode();
      if (UncommittedWin != 0L) hash ^= UncommittedWin.GetHashCode();
      if (InitialWin != 0L) hash ^= InitialWin.GetHashCode();
      if (SecondaryPlayed != 0L) hash ^= SecondaryPlayed.GetHashCode();
      if (SecondaryWager != 0L) hash ^= SecondaryWager.GetHashCode();
      if (SecondaryWin != 0L) hash ^= SecondaryWin.GetHashCode();
      if (FinalWin != 0L) hash ^= FinalWin.GetHashCode();
      if (GameWinBonus != 0L) hash ^= GameWinBonus.GetHashCode();
      if (TotalWon != 0L) hash ^= TotalWon.GetHashCode();
      if (AmountOut != 0L) hash ^= AmountOut.GetHashCode();
      if (lastUpdate_ != null) hash ^= LastUpdate.GetHashCode();
      if (LastCommitIndex != 0) hash ^= LastCommitIndex.GetHashCode();
      if (GameRoundDescriptions.Length != 0) hash ^= GameRoundDescriptions.GetHashCode();
      hash ^= jackpotSnapshot_.GetHashCode();
      hash ^= jackpotSnapshotEnd_.GetHashCode();
      hash ^= jackpots_.GetHashCode();
      hash ^= transactions_.GetHashCode();
      hash ^= events_.GetHashCode();
      hash ^= meterSnapshots_.GetHashCode();
      hash ^= freeGames_.GetHashCode();
      if (FreeGameIndex != 0) hash ^= FreeGameIndex.GetHashCode();
      hash ^= cashOutInfo_.GetHashCode();
      hash ^= outcomes_.GetHashCode();
      if (LocaleCode.Length != 0) hash ^= LocaleCode.GetHashCode();
      if (GameConfiguration.Length != 0) hash ^= GameConfiguration.GetHashCode();
      if (gameRoundDetails_ != null) hash ^= GameRoundDetails.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StorageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StorageIndex);
      }
      if (RecoveryBlob.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecoveryBlob);
      }
      if (denomConfiguration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DenomConfiguration);
      }
      if (TransactionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TransactionId);
      }
      if (LogSequence != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LogSequence);
      }
      if (startDateTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StartDateTime);
      }
      if (endDateTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndDateTime);
      }
      if (EndTransactionId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndTransactionId);
      }
      if (GameId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameId);
      }
      if (DenomId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(DenomId);
      }
      if (StartCredits != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(StartCredits);
      }
      if (EndCredits != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(EndCredits);
      }
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        output.WriteRawTag(104);
        output.WriteEnum((int) PlayState);
      }
      if (ErrorCode != global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ErrorCode);
      }
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Result);
      }
      if (InitialWager != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(InitialWager);
      }
      if (FinalWager != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(FinalWager);
      }
      if (PromoWager != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(PromoWager);
      }
      if (UncommittedWin != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(UncommittedWin);
      }
      if (InitialWin != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(InitialWin);
      }
      if (SecondaryPlayed != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(SecondaryPlayed);
      }
      if (SecondaryWager != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(SecondaryWager);
      }
      if (SecondaryWin != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(SecondaryWin);
      }
      if (FinalWin != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(FinalWin);
      }
      if (GameWinBonus != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(GameWinBonus);
      }
      if (TotalWon != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(TotalWon);
      }
      if (AmountOut != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(AmountOut);
      }
      if (lastUpdate_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(LastUpdate);
      }
      if (LastCommitIndex != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(LastCommitIndex);
      }
      if (GameRoundDescriptions.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(GameRoundDescriptions);
      }
      jackpotSnapshot_.WriteTo(output, _repeated_jackpotSnapshot_codec);
      jackpotSnapshotEnd_.WriteTo(output, _repeated_jackpotSnapshotEnd_codec);
      jackpots_.WriteTo(output, _repeated_jackpots_codec);
      transactions_.WriteTo(output, _repeated_transactions_codec);
      events_.WriteTo(output, _repeated_events_codec);
      meterSnapshots_.WriteTo(output, _repeated_meterSnapshots_codec);
      freeGames_.WriteTo(output, _repeated_freeGames_codec);
      if (FreeGameIndex != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FreeGameIndex);
      }
      cashOutInfo_.WriteTo(output, _repeated_cashOutInfo_codec);
      outcomes_.WriteTo(output, _repeated_outcomes_codec);
      if (LocaleCode.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(LocaleCode);
      }
      if (GameConfiguration.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(GameConfiguration);
      }
      if (gameRoundDetails_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(GameRoundDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StorageIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StorageIndex);
      }
      if (RecoveryBlob.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RecoveryBlob);
      }
      if (denomConfiguration_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(DenomConfiguration);
      }
      if (TransactionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TransactionId);
      }
      if (LogSequence != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LogSequence);
      }
      if (startDateTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(StartDateTime);
      }
      if (endDateTime_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EndDateTime);
      }
      if (EndTransactionId != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EndTransactionId);
      }
      if (GameId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(GameId);
      }
      if (DenomId != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(DenomId);
      }
      if (StartCredits != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(StartCredits);
      }
      if (EndCredits != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(EndCredits);
      }
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        output.WriteRawTag(104);
        output.WriteEnum((int) PlayState);
      }
      if (ErrorCode != global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode.None) {
        output.WriteRawTag(112);
        output.WriteEnum((int) ErrorCode);
      }
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Result);
      }
      if (InitialWager != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(InitialWager);
      }
      if (FinalWager != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(FinalWager);
      }
      if (PromoWager != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(PromoWager);
      }
      if (UncommittedWin != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(UncommittedWin);
      }
      if (InitialWin != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(InitialWin);
      }
      if (SecondaryPlayed != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(SecondaryPlayed);
      }
      if (SecondaryWager != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(SecondaryWager);
      }
      if (SecondaryWin != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(SecondaryWin);
      }
      if (FinalWin != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(FinalWin);
      }
      if (GameWinBonus != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(GameWinBonus);
      }
      if (TotalWon != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(TotalWon);
      }
      if (AmountOut != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(AmountOut);
      }
      if (lastUpdate_ != null) {
        output.WriteRawTag(226, 1);
        output.WriteMessage(LastUpdate);
      }
      if (LastCommitIndex != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(LastCommitIndex);
      }
      if (GameRoundDescriptions.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(GameRoundDescriptions);
      }
      jackpotSnapshot_.WriteTo(ref output, _repeated_jackpotSnapshot_codec);
      jackpotSnapshotEnd_.WriteTo(ref output, _repeated_jackpotSnapshotEnd_codec);
      jackpots_.WriteTo(ref output, _repeated_jackpots_codec);
      transactions_.WriteTo(ref output, _repeated_transactions_codec);
      events_.WriteTo(ref output, _repeated_events_codec);
      meterSnapshots_.WriteTo(ref output, _repeated_meterSnapshots_codec);
      freeGames_.WriteTo(ref output, _repeated_freeGames_codec);
      if (FreeGameIndex != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(FreeGameIndex);
      }
      cashOutInfo_.WriteTo(ref output, _repeated_cashOutInfo_codec);
      outcomes_.WriteTo(ref output, _repeated_outcomes_codec);
      if (LocaleCode.Length != 0) {
        output.WriteRawTag(202, 2);
        output.WriteString(LocaleCode);
      }
      if (GameConfiguration.Length != 0) {
        output.WriteRawTag(210, 2);
        output.WriteString(GameConfiguration);
      }
      if (gameRoundDetails_ != null) {
        output.WriteRawTag(218, 2);
        output.WriteMessage(GameRoundDetails);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (StorageIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StorageIndex);
      }
      if (RecoveryBlob.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RecoveryBlob);
      }
      if (denomConfiguration_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DenomConfiguration);
      }
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (LogSequence != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LogSequence);
      }
      if (startDateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDateTime);
      }
      if (endDateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDateTime);
      }
      if (EndTransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTransactionId);
      }
      if (GameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameId);
      }
      if (DenomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DenomId);
      }
      if (StartCredits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartCredits);
      }
      if (EndCredits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndCredits);
      }
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayState);
      }
      if (ErrorCode != global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorCode);
      }
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (InitialWager != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(InitialWager);
      }
      if (FinalWager != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FinalWager);
      }
      if (PromoWager != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(PromoWager);
      }
      if (UncommittedWin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(UncommittedWin);
      }
      if (InitialWin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(InitialWin);
      }
      if (SecondaryPlayed != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SecondaryPlayed);
      }
      if (SecondaryWager != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SecondaryWager);
      }
      if (SecondaryWin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SecondaryWin);
      }
      if (FinalWin != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(FinalWin);
      }
      if (GameWinBonus != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(GameWinBonus);
      }
      if (TotalWon != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalWon);
      }
      if (AmountOut != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(AmountOut);
      }
      if (lastUpdate_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LastUpdate);
      }
      if (LastCommitIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LastCommitIndex);
      }
      if (GameRoundDescriptions.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GameRoundDescriptions);
      }
      size += jackpotSnapshot_.CalculateSize(_repeated_jackpotSnapshot_codec);
      size += jackpotSnapshotEnd_.CalculateSize(_repeated_jackpotSnapshotEnd_codec);
      size += jackpots_.CalculateSize(_repeated_jackpots_codec);
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      size += events_.CalculateSize(_repeated_events_codec);
      size += meterSnapshots_.CalculateSize(_repeated_meterSnapshots_codec);
      size += freeGames_.CalculateSize(_repeated_freeGames_codec);
      if (FreeGameIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FreeGameIndex);
      }
      size += cashOutInfo_.CalculateSize(_repeated_cashOutInfo_codec);
      size += outcomes_.CalculateSize(_repeated_outcomes_codec);
      if (LocaleCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LocaleCode);
      }
      if (GameConfiguration.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(GameConfiguration);
      }
      if (gameRoundDetails_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(GameRoundDetails);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameHistoryLog other) {
      if (other == null) {
        return;
      }
      if (other.StorageIndex != 0) {
        StorageIndex = other.StorageIndex;
      }
      if (other.RecoveryBlob.Length != 0) {
        RecoveryBlob = other.RecoveryBlob;
      }
      if (other.denomConfiguration_ != null) {
        if (denomConfiguration_ == null) {
          DenomConfiguration = new global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration();
        }
        DenomConfiguration.MergeFrom(other.DenomConfiguration);
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.LogSequence != 0L) {
        LogSequence = other.LogSequence;
      }
      if (other.startDateTime_ != null) {
        if (startDateTime_ == null) {
          StartDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDateTime.MergeFrom(other.StartDateTime);
      }
      if (other.endDateTime_ != null) {
        if (endDateTime_ == null) {
          EndDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndDateTime.MergeFrom(other.EndDateTime);
      }
      if (other.EndTransactionId != 0L) {
        EndTransactionId = other.EndTransactionId;
      }
      if (other.GameId != 0) {
        GameId = other.GameId;
      }
      if (other.DenomId != 0L) {
        DenomId = other.DenomId;
      }
      if (other.StartCredits != 0L) {
        StartCredits = other.StartCredits;
      }
      if (other.EndCredits != 0L) {
        EndCredits = other.EndCredits;
      }
      if (other.PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        PlayState = other.PlayState;
      }
      if (other.ErrorCode != global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode.None) {
        ErrorCode = other.ErrorCode;
      }
      if (other.Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        Result = other.Result;
      }
      if (other.InitialWager != 0L) {
        InitialWager = other.InitialWager;
      }
      if (other.FinalWager != 0L) {
        FinalWager = other.FinalWager;
      }
      if (other.PromoWager != 0L) {
        PromoWager = other.PromoWager;
      }
      if (other.UncommittedWin != 0L) {
        UncommittedWin = other.UncommittedWin;
      }
      if (other.InitialWin != 0L) {
        InitialWin = other.InitialWin;
      }
      if (other.SecondaryPlayed != 0L) {
        SecondaryPlayed = other.SecondaryPlayed;
      }
      if (other.SecondaryWager != 0L) {
        SecondaryWager = other.SecondaryWager;
      }
      if (other.SecondaryWin != 0L) {
        SecondaryWin = other.SecondaryWin;
      }
      if (other.FinalWin != 0L) {
        FinalWin = other.FinalWin;
      }
      if (other.GameWinBonus != 0L) {
        GameWinBonus = other.GameWinBonus;
      }
      if (other.TotalWon != 0L) {
        TotalWon = other.TotalWon;
      }
      if (other.AmountOut != 0L) {
        AmountOut = other.AmountOut;
      }
      if (other.lastUpdate_ != null) {
        if (lastUpdate_ == null) {
          LastUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        LastUpdate.MergeFrom(other.LastUpdate);
      }
      if (other.LastCommitIndex != 0) {
        LastCommitIndex = other.LastCommitIndex;
      }
      if (other.GameRoundDescriptions.Length != 0) {
        GameRoundDescriptions = other.GameRoundDescriptions;
      }
      jackpotSnapshot_.Add(other.jackpotSnapshot_);
      jackpotSnapshotEnd_.Add(other.jackpotSnapshotEnd_);
      jackpots_.Add(other.jackpots_);
      transactions_.Add(other.transactions_);
      events_.Add(other.events_);
      meterSnapshots_.Add(other.meterSnapshots_);
      freeGames_.Add(other.freeGames_);
      if (other.FreeGameIndex != 0) {
        FreeGameIndex = other.FreeGameIndex;
      }
      cashOutInfo_.Add(other.cashOutInfo_);
      outcomes_.Add(other.outcomes_);
      if (other.LocaleCode.Length != 0) {
        LocaleCode = other.LocaleCode;
      }
      if (other.GameConfiguration.Length != 0) {
        GameConfiguration = other.GameConfiguration;
      }
      if (other.gameRoundDetails_ != null) {
        if (gameRoundDetails_ == null) {
          GameRoundDetails = new global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails();
        }
        GameRoundDetails.MergeFrom(other.GameRoundDetails);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StorageIndex = input.ReadInt32();
            break;
          }
          case 18: {
            RecoveryBlob = input.ReadBytes();
            break;
          }
          case 26: {
            if (denomConfiguration_ == null) {
              DenomConfiguration = new global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration();
            }
            input.ReadMessage(DenomConfiguration);
            break;
          }
          case 32: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 40: {
            LogSequence = input.ReadInt64();
            break;
          }
          case 50: {
            if (startDateTime_ == null) {
              StartDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDateTime);
            break;
          }
          case 58: {
            if (endDateTime_ == null) {
              EndDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndDateTime);
            break;
          }
          case 64: {
            EndTransactionId = input.ReadInt64();
            break;
          }
          case 72: {
            GameId = input.ReadInt32();
            break;
          }
          case 80: {
            DenomId = input.ReadInt64();
            break;
          }
          case 88: {
            StartCredits = input.ReadInt64();
            break;
          }
          case 96: {
            EndCredits = input.ReadInt64();
            break;
          }
          case 104: {
            PlayState = (global::Aristocrat.Monaco.Gaming.Proto.PlayState) input.ReadEnum();
            break;
          }
          case 112: {
            ErrorCode = (global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode) input.ReadEnum();
            break;
          }
          case 120: {
            Result = (global::Aristocrat.Monaco.Gaming.Proto.GameResult) input.ReadEnum();
            break;
          }
          case 128: {
            InitialWager = input.ReadInt64();
            break;
          }
          case 136: {
            FinalWager = input.ReadInt64();
            break;
          }
          case 144: {
            PromoWager = input.ReadInt64();
            break;
          }
          case 152: {
            UncommittedWin = input.ReadInt64();
            break;
          }
          case 160: {
            InitialWin = input.ReadInt64();
            break;
          }
          case 168: {
            SecondaryPlayed = input.ReadInt64();
            break;
          }
          case 176: {
            SecondaryWager = input.ReadInt64();
            break;
          }
          case 184: {
            SecondaryWin = input.ReadInt64();
            break;
          }
          case 192: {
            FinalWin = input.ReadInt64();
            break;
          }
          case 200: {
            GameWinBonus = input.ReadInt64();
            break;
          }
          case 208: {
            TotalWon = input.ReadInt64();
            break;
          }
          case 216: {
            AmountOut = input.ReadInt64();
            break;
          }
          case 226: {
            if (lastUpdate_ == null) {
              LastUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastUpdate);
            break;
          }
          case 232: {
            LastCommitIndex = input.ReadInt32();
            break;
          }
          case 242: {
            GameRoundDescriptions = input.ReadString();
            break;
          }
          case 250: {
            jackpotSnapshot_.AddEntriesFrom(input, _repeated_jackpotSnapshot_codec);
            break;
          }
          case 258: {
            jackpotSnapshotEnd_.AddEntriesFrom(input, _repeated_jackpotSnapshotEnd_codec);
            break;
          }
          case 266: {
            jackpots_.AddEntriesFrom(input, _repeated_jackpots_codec);
            break;
          }
          case 274: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 282: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 290: {
            meterSnapshots_.AddEntriesFrom(input, _repeated_meterSnapshots_codec);
            break;
          }
          case 298: {
            freeGames_.AddEntriesFrom(input, _repeated_freeGames_codec);
            break;
          }
          case 304: {
            FreeGameIndex = input.ReadInt32();
            break;
          }
          case 314: {
            cashOutInfo_.AddEntriesFrom(input, _repeated_cashOutInfo_codec);
            break;
          }
          case 322: {
            outcomes_.AddEntriesFrom(input, _repeated_outcomes_codec);
            break;
          }
          case 330: {
            LocaleCode = input.ReadString();
            break;
          }
          case 338: {
            GameConfiguration = input.ReadString();
            break;
          }
          case 346: {
            if (gameRoundDetails_ == null) {
              GameRoundDetails = new global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails();
            }
            input.ReadMessage(GameRoundDetails);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StorageIndex = input.ReadInt32();
            break;
          }
          case 18: {
            RecoveryBlob = input.ReadBytes();
            break;
          }
          case 26: {
            if (denomConfiguration_ == null) {
              DenomConfiguration = new global::Aristocrat.Monaco.Gaming.Proto.GameConfiguration();
            }
            input.ReadMessage(DenomConfiguration);
            break;
          }
          case 32: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 40: {
            LogSequence = input.ReadInt64();
            break;
          }
          case 50: {
            if (startDateTime_ == null) {
              StartDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDateTime);
            break;
          }
          case 58: {
            if (endDateTime_ == null) {
              EndDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndDateTime);
            break;
          }
          case 64: {
            EndTransactionId = input.ReadInt64();
            break;
          }
          case 72: {
            GameId = input.ReadInt32();
            break;
          }
          case 80: {
            DenomId = input.ReadInt64();
            break;
          }
          case 88: {
            StartCredits = input.ReadInt64();
            break;
          }
          case 96: {
            EndCredits = input.ReadInt64();
            break;
          }
          case 104: {
            PlayState = (global::Aristocrat.Monaco.Gaming.Proto.PlayState) input.ReadEnum();
            break;
          }
          case 112: {
            ErrorCode = (global::Aristocrat.Monaco.Gaming.Proto.GameErrorCode) input.ReadEnum();
            break;
          }
          case 120: {
            Result = (global::Aristocrat.Monaco.Gaming.Proto.GameResult) input.ReadEnum();
            break;
          }
          case 128: {
            InitialWager = input.ReadInt64();
            break;
          }
          case 136: {
            FinalWager = input.ReadInt64();
            break;
          }
          case 144: {
            PromoWager = input.ReadInt64();
            break;
          }
          case 152: {
            UncommittedWin = input.ReadInt64();
            break;
          }
          case 160: {
            InitialWin = input.ReadInt64();
            break;
          }
          case 168: {
            SecondaryPlayed = input.ReadInt64();
            break;
          }
          case 176: {
            SecondaryWager = input.ReadInt64();
            break;
          }
          case 184: {
            SecondaryWin = input.ReadInt64();
            break;
          }
          case 192: {
            FinalWin = input.ReadInt64();
            break;
          }
          case 200: {
            GameWinBonus = input.ReadInt64();
            break;
          }
          case 208: {
            TotalWon = input.ReadInt64();
            break;
          }
          case 216: {
            AmountOut = input.ReadInt64();
            break;
          }
          case 226: {
            if (lastUpdate_ == null) {
              LastUpdate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(LastUpdate);
            break;
          }
          case 232: {
            LastCommitIndex = input.ReadInt32();
            break;
          }
          case 242: {
            GameRoundDescriptions = input.ReadString();
            break;
          }
          case 250: {
            jackpotSnapshot_.AddEntriesFrom(ref input, _repeated_jackpotSnapshot_codec);
            break;
          }
          case 258: {
            jackpotSnapshotEnd_.AddEntriesFrom(ref input, _repeated_jackpotSnapshotEnd_codec);
            break;
          }
          case 266: {
            jackpots_.AddEntriesFrom(ref input, _repeated_jackpots_codec);
            break;
          }
          case 274: {
            transactions_.AddEntriesFrom(ref input, _repeated_transactions_codec);
            break;
          }
          case 282: {
            events_.AddEntriesFrom(ref input, _repeated_events_codec);
            break;
          }
          case 290: {
            meterSnapshots_.AddEntriesFrom(ref input, _repeated_meterSnapshots_codec);
            break;
          }
          case 298: {
            freeGames_.AddEntriesFrom(ref input, _repeated_freeGames_codec);
            break;
          }
          case 304: {
            FreeGameIndex = input.ReadInt32();
            break;
          }
          case 314: {
            cashOutInfo_.AddEntriesFrom(ref input, _repeated_cashOutInfo_codec);
            break;
          }
          case 322: {
            outcomes_.AddEntriesFrom(ref input, _repeated_outcomes_codec);
            break;
          }
          case 330: {
            LocaleCode = input.ReadString();
            break;
          }
          case 338: {
            GameConfiguration = input.ReadString();
            break;
          }
          case 346: {
            if (gameRoundDetails_ == null) {
              GameRoundDetails = new global::Aristocrat.Monaco.Gaming.Proto.GameRoundDetails();
            }
            input.ReadMessage(GameRoundDetails);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameConfiguration : pb::IMessage<GameConfiguration>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameConfiguration> _parser = new pb::MessageParser<GameConfiguration>(() => new GameConfiguration());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameConfiguration> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameConfiguration() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameConfiguration(GameConfiguration other) : this() {
      minimumWagerCredits_ = other.minimumWagerCredits_;
      maximumWagerCredits_ = other.maximumWagerCredits_;
      maximumWagerOutsideCredits_ = other.maximumWagerOutsideCredits_;
      betOption_ = other.betOption_;
      lineOption_ = other.lineOption_;
      bonusBet_ = other.bonusBet_;
      secondaryEnabled_ = other.secondaryEnabled_;
      letItRideEnabled_ = other.letItRideEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameConfiguration Clone() {
      return new GameConfiguration(this);
    }

    /// <summary>Field number for the "minimum_wager_credits" field.</summary>
    public const int MinimumWagerCreditsFieldNumber = 1;
    private int minimumWagerCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinimumWagerCredits {
      get { return minimumWagerCredits_; }
      set {
        minimumWagerCredits_ = value;
      }
    }

    /// <summary>Field number for the "maximum_wager_credits" field.</summary>
    public const int MaximumWagerCreditsFieldNumber = 2;
    private int maximumWagerCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaximumWagerCredits {
      get { return maximumWagerCredits_; }
      set {
        maximumWagerCredits_ = value;
      }
    }

    /// <summary>Field number for the "maximum_wager_outside_credits" field.</summary>
    public const int MaximumWagerOutsideCreditsFieldNumber = 3;
    private int maximumWagerOutsideCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaximumWagerOutsideCredits {
      get { return maximumWagerOutsideCredits_; }
      set {
        maximumWagerOutsideCredits_ = value;
      }
    }

    /// <summary>Field number for the "bet_option" field.</summary>
    public const int BetOptionFieldNumber = 4;
    private string betOption_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string BetOption {
      get { return betOption_; }
      set {
        betOption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "line_option" field.</summary>
    public const int LineOptionFieldNumber = 5;
    private string lineOption_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LineOption {
      get { return lineOption_; }
      set {
        lineOption_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bonus_bet" field.</summary>
    public const int BonusBetFieldNumber = 6;
    private int bonusBet_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BonusBet {
      get { return bonusBet_; }
      set {
        bonusBet_ = value;
      }
    }

    /// <summary>Field number for the "secondary_enabled" field.</summary>
    public const int SecondaryEnabledFieldNumber = 7;
    private bool secondaryEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SecondaryEnabled {
      get { return secondaryEnabled_; }
      set {
        secondaryEnabled_ = value;
      }
    }

    /// <summary>Field number for the "let_it_ride_enabled" field.</summary>
    public const int LetItRideEnabledFieldNumber = 8;
    private bool letItRideEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LetItRideEnabled {
      get { return letItRideEnabled_; }
      set {
        letItRideEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameConfiguration);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameConfiguration other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinimumWagerCredits != other.MinimumWagerCredits) return false;
      if (MaximumWagerCredits != other.MaximumWagerCredits) return false;
      if (MaximumWagerOutsideCredits != other.MaximumWagerOutsideCredits) return false;
      if (BetOption != other.BetOption) return false;
      if (LineOption != other.LineOption) return false;
      if (BonusBet != other.BonusBet) return false;
      if (SecondaryEnabled != other.SecondaryEnabled) return false;
      if (LetItRideEnabled != other.LetItRideEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MinimumWagerCredits != 0) hash ^= MinimumWagerCredits.GetHashCode();
      if (MaximumWagerCredits != 0) hash ^= MaximumWagerCredits.GetHashCode();
      if (MaximumWagerOutsideCredits != 0) hash ^= MaximumWagerOutsideCredits.GetHashCode();
      if (BetOption.Length != 0) hash ^= BetOption.GetHashCode();
      if (LineOption.Length != 0) hash ^= LineOption.GetHashCode();
      if (BonusBet != 0) hash ^= BonusBet.GetHashCode();
      if (SecondaryEnabled != false) hash ^= SecondaryEnabled.GetHashCode();
      if (LetItRideEnabled != false) hash ^= LetItRideEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MinimumWagerCredits != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumWagerCredits);
      }
      if (MaximumWagerCredits != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaximumWagerCredits);
      }
      if (MaximumWagerOutsideCredits != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaximumWagerOutsideCredits);
      }
      if (BetOption.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BetOption);
      }
      if (LineOption.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LineOption);
      }
      if (BonusBet != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BonusBet);
      }
      if (SecondaryEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(SecondaryEnabled);
      }
      if (LetItRideEnabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(LetItRideEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MinimumWagerCredits != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinimumWagerCredits);
      }
      if (MaximumWagerCredits != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaximumWagerCredits);
      }
      if (MaximumWagerOutsideCredits != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaximumWagerOutsideCredits);
      }
      if (BetOption.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(BetOption);
      }
      if (LineOption.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(LineOption);
      }
      if (BonusBet != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BonusBet);
      }
      if (SecondaryEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(SecondaryEnabled);
      }
      if (LetItRideEnabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(LetItRideEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MinimumWagerCredits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumWagerCredits);
      }
      if (MaximumWagerCredits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumWagerCredits);
      }
      if (MaximumWagerOutsideCredits != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumWagerOutsideCredits);
      }
      if (BetOption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BetOption);
      }
      if (LineOption.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LineOption);
      }
      if (BonusBet != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BonusBet);
      }
      if (SecondaryEnabled != false) {
        size += 1 + 1;
      }
      if (LetItRideEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameConfiguration other) {
      if (other == null) {
        return;
      }
      if (other.MinimumWagerCredits != 0) {
        MinimumWagerCredits = other.MinimumWagerCredits;
      }
      if (other.MaximumWagerCredits != 0) {
        MaximumWagerCredits = other.MaximumWagerCredits;
      }
      if (other.MaximumWagerOutsideCredits != 0) {
        MaximumWagerOutsideCredits = other.MaximumWagerOutsideCredits;
      }
      if (other.BetOption.Length != 0) {
        BetOption = other.BetOption;
      }
      if (other.LineOption.Length != 0) {
        LineOption = other.LineOption;
      }
      if (other.BonusBet != 0) {
        BonusBet = other.BonusBet;
      }
      if (other.SecondaryEnabled != false) {
        SecondaryEnabled = other.SecondaryEnabled;
      }
      if (other.LetItRideEnabled != false) {
        LetItRideEnabled = other.LetItRideEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinimumWagerCredits = input.ReadInt32();
            break;
          }
          case 16: {
            MaximumWagerCredits = input.ReadInt32();
            break;
          }
          case 24: {
            MaximumWagerOutsideCredits = input.ReadInt32();
            break;
          }
          case 34: {
            BetOption = input.ReadString();
            break;
          }
          case 42: {
            LineOption = input.ReadString();
            break;
          }
          case 48: {
            BonusBet = input.ReadInt32();
            break;
          }
          case 56: {
            SecondaryEnabled = input.ReadBool();
            break;
          }
          case 64: {
            LetItRideEnabled = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MinimumWagerCredits = input.ReadInt32();
            break;
          }
          case 16: {
            MaximumWagerCredits = input.ReadInt32();
            break;
          }
          case 24: {
            MaximumWagerOutsideCredits = input.ReadInt32();
            break;
          }
          case 34: {
            BetOption = input.ReadString();
            break;
          }
          case 42: {
            LineOption = input.ReadString();
            break;
          }
          case 48: {
            BonusBet = input.ReadInt32();
            break;
          }
          case 56: {
            SecondaryEnabled = input.ReadBool();
            break;
          }
          case 64: {
            LetItRideEnabled = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Jackpot : pb::IMessage<Jackpot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Jackpot> _parser = new pb::MessageParser<Jackpot>(() => new Jackpot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Jackpot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Jackpot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Jackpot(Jackpot other) : this() {
      deviceId_ = other.deviceId_;
      levelId_ = other.levelId_;
      levelName_ = other.levelName_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Jackpot Clone() {
      return new Jackpot(this);
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private int deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 2;
    private int levelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "level_name" field.</summary>
    public const int LevelNameFieldNumber = 3;
    private string levelName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LevelName {
      get { return levelName_; }
      set {
        levelName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 4;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Jackpot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Jackpot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (LevelId != other.LevelId) return false;
      if (LevelName != other.LevelName) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (LevelName.Length != 0) hash ^= LevelName.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeviceId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelId);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LevelName);
      }
      if (Value != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DeviceId);
      }
      if (LevelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelId);
      }
      if (LevelName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LevelName);
      }
      if (Value != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      if (LevelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LevelName);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Jackpot other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.LevelName.Length != 0) {
        LevelName = other.LevelName;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadInt32();
            break;
          }
          case 26: {
            LevelName = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 16: {
            LevelId = input.ReadInt32();
            break;
          }
          case 26: {
            LevelName = input.ReadString();
            break;
          }
          case 32: {
            Value = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class JackpotInfo : pb::IMessage<JackpotInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JackpotInfo> _parser = new pb::MessageParser<JackpotInfo>(() => new JackpotInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<JackpotInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackpotInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackpotInfo(JackpotInfo other) : this() {
      transactionId_ = other.transactionId_;
      hitDateTime_ = other.hitDateTime_ != null ? other.hitDateTime_.Clone() : null;
      payMethod_ = other.payMethod_;
      deviceId_ = other.deviceId_;
      packName_ = other.packName_;
      levelId_ = other.levelId_;
      winAmount_ = other.winAmount_;
      winText_ = other.winText_;
      wagerCredits_ = other.wagerCredits_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public JackpotInfo Clone() {
      return new JackpotInfo(this);
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 1;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "hit_date_time" field.</summary>
    public const int HitDateTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp hitDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp HitDateTime {
      get { return hitDateTime_; }
      set {
        hitDateTime_ = value;
      }
    }

    /// <summary>Field number for the "pay_method" field.</summary>
    public const int PayMethodFieldNumber = 3;
    private global::Aristocrat.Monaco.Gaming.Proto.PayMethod payMethod_ = global::Aristocrat.Monaco.Gaming.Proto.PayMethod.Any;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.PayMethod PayMethod {
      get { return payMethod_; }
      set {
        payMethod_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 4;
    private int deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "pack_name" field.</summary>
    public const int PackNameFieldNumber = 5;
    private string packName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PackName {
      get { return packName_; }
      set {
        packName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "level_id" field.</summary>
    public const int LevelIdFieldNumber = 6;
    private int levelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelId {
      get { return levelId_; }
      set {
        levelId_ = value;
      }
    }

    /// <summary>Field number for the "win_amount" field.</summary>
    public const int WinAmountFieldNumber = 7;
    private long winAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WinAmount {
      get { return winAmount_; }
      set {
        winAmount_ = value;
      }
    }

    /// <summary>Field number for the "win_text" field.</summary>
    public const int WinTextFieldNumber = 8;
    private string winText_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string WinText {
      get { return winText_; }
      set {
        winText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "wager_credits" field.</summary>
    public const int WagerCreditsFieldNumber = 9;
    private long wagerCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WagerCredits {
      get { return wagerCredits_; }
      set {
        wagerCredits_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as JackpotInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(JackpotInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionId != other.TransactionId) return false;
      if (!object.Equals(HitDateTime, other.HitDateTime)) return false;
      if (PayMethod != other.PayMethod) return false;
      if (DeviceId != other.DeviceId) return false;
      if (PackName != other.PackName) return false;
      if (LevelId != other.LevelId) return false;
      if (WinAmount != other.WinAmount) return false;
      if (WinText != other.WinText) return false;
      if (WagerCredits != other.WagerCredits) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (hitDateTime_ != null) hash ^= HitDateTime.GetHashCode();
      if (PayMethod != global::Aristocrat.Monaco.Gaming.Proto.PayMethod.Any) hash ^= PayMethod.GetHashCode();
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (PackName.Length != 0) hash ^= PackName.GetHashCode();
      if (LevelId != 0) hash ^= LevelId.GetHashCode();
      if (WinAmount != 0L) hash ^= WinAmount.GetHashCode();
      if (WinText.Length != 0) hash ^= WinText.GetHashCode();
      if (WagerCredits != 0L) hash ^= WagerCredits.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      if (hitDateTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HitDateTime);
      }
      if (PayMethod != global::Aristocrat.Monaco.Gaming.Proto.PayMethod.Any) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PayMethod);
      }
      if (DeviceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeviceId);
      }
      if (PackName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PackName);
      }
      if (LevelId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LevelId);
      }
      if (WinAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WinAmount);
      }
      if (WinText.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WinText);
      }
      if (WagerCredits != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(WagerCredits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TransactionId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TransactionId);
      }
      if (hitDateTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(HitDateTime);
      }
      if (PayMethod != global::Aristocrat.Monaco.Gaming.Proto.PayMethod.Any) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PayMethod);
      }
      if (DeviceId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(DeviceId);
      }
      if (PackName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(PackName);
      }
      if (LevelId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(LevelId);
      }
      if (WinAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(WinAmount);
      }
      if (WinText.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(WinText);
      }
      if (WagerCredits != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(WagerCredits);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (hitDateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HitDateTime);
      }
      if (PayMethod != global::Aristocrat.Monaco.Gaming.Proto.PayMethod.Any) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayMethod);
      }
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (PackName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PackName);
      }
      if (LevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelId);
      }
      if (WinAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WinAmount);
      }
      if (WinText.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WinText);
      }
      if (WagerCredits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WagerCredits);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(JackpotInfo other) {
      if (other == null) {
        return;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.hitDateTime_ != null) {
        if (hitDateTime_ == null) {
          HitDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        HitDateTime.MergeFrom(other.HitDateTime);
      }
      if (other.PayMethod != global::Aristocrat.Monaco.Gaming.Proto.PayMethod.Any) {
        PayMethod = other.PayMethod;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.PackName.Length != 0) {
        PackName = other.PackName;
      }
      if (other.LevelId != 0) {
        LevelId = other.LevelId;
      }
      if (other.WinAmount != 0L) {
        WinAmount = other.WinAmount;
      }
      if (other.WinText.Length != 0) {
        WinText = other.WinText;
      }
      if (other.WagerCredits != 0L) {
        WagerCredits = other.WagerCredits;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 18: {
            if (hitDateTime_ == null) {
              HitDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(HitDateTime);
            break;
          }
          case 24: {
            PayMethod = (global::Aristocrat.Monaco.Gaming.Proto.PayMethod) input.ReadEnum();
            break;
          }
          case 32: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 42: {
            PackName = input.ReadString();
            break;
          }
          case 48: {
            LevelId = input.ReadInt32();
            break;
          }
          case 56: {
            WinAmount = input.ReadInt64();
            break;
          }
          case 66: {
            WinText = input.ReadString();
            break;
          }
          case 72: {
            WagerCredits = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 18: {
            if (hitDateTime_ == null) {
              HitDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(HitDateTime);
            break;
          }
          case 24: {
            PayMethod = (global::Aristocrat.Monaco.Gaming.Proto.PayMethod) input.ReadEnum();
            break;
          }
          case 32: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 42: {
            PackName = input.ReadString();
            break;
          }
          case 48: {
            LevelId = input.ReadInt32();
            break;
          }
          case 56: {
            WinAmount = input.ReadInt64();
            break;
          }
          case 66: {
            WinText = input.ReadString();
            break;
          }
          case 72: {
            WagerCredits = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TransactionInfo : pb::IMessage<TransactionInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TransactionInfo> _parser = new pb::MessageParser<TransactionInfo>(() => new TransactionInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TransactionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TransactionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TransactionInfo(TransactionInfo other) : this() {
      transactionType_ = other.transactionType_;
      amount_ = other.amount_;
      time_ = other.time_ != null ? other.time_.Clone() : null;
      transactionId_ = other.transactionId_;
      gameIndex_ = other.gameIndex_;
      handpayType_ = other.handpayType_;
      keyOffType_ = other.keyOffType_;
      cashableAmount_ = other.cashableAmount_;
      cashablePromoAmount_ = other.cashablePromoAmount_;
      nonCashablePromoAmount_ = other.nonCashablePromoAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TransactionInfo Clone() {
      return new TransactionInfo(this);
    }

    /// <summary>Field number for the "transaction_type" field.</summary>
    public const int TransactionTypeFieldNumber = 1;
    private string transactionType_ = "";
    /// <summary>
    /// Actually this is System.Type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TransactionType {
      get { return transactionType_; }
      set {
        transactionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 4;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "game_index" field.</summary>
    public const int GameIndexFieldNumber = 5;
    private int gameIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameIndex {
      get { return gameIndex_; }
      set {
        gameIndex_ = value;
      }
    }

    /// <summary>Field number for the "handpay_type" field.</summary>
    public const int HandpayTypeFieldNumber = 6;
    private global::Aristocrat.Monaco.Gaming.Proto.HandpayType handpayType_ = global::Aristocrat.Monaco.Gaming.Proto.HandpayType.GameWin;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.HandpayType HandpayType {
      get { return handpayType_; }
      set {
        handpayType_ = value;
      }
    }

    /// <summary>Field number for the "key_off_type" field.</summary>
    public const int KeyOffTypeFieldNumber = 7;
    private global::Aristocrat.Monaco.Gaming.Proto.KeyOffType keyOffType_ = global::Aristocrat.Monaco.Gaming.Proto.KeyOffType.LocalHandpay;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.KeyOffType KeyOffType {
      get { return keyOffType_; }
      set {
        keyOffType_ = value;
      }
    }

    /// <summary>Field number for the "cashable_amount" field.</summary>
    public const int CashableAmountFieldNumber = 8;
    private long cashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CashableAmount {
      get { return cashableAmount_; }
      set {
        cashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "cashable_promo_amount" field.</summary>
    public const int CashablePromoAmountFieldNumber = 9;
    private long cashablePromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CashablePromoAmount {
      get { return cashablePromoAmount_; }
      set {
        cashablePromoAmount_ = value;
      }
    }

    /// <summary>Field number for the "non_cashable_promo_amount" field.</summary>
    public const int NonCashablePromoAmountFieldNumber = 10;
    private long nonCashablePromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long NonCashablePromoAmount {
      get { return nonCashablePromoAmount_; }
      set {
        nonCashablePromoAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TransactionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TransactionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TransactionType != other.TransactionType) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(Time, other.Time)) return false;
      if (TransactionId != other.TransactionId) return false;
      if (GameIndex != other.GameIndex) return false;
      if (HandpayType != other.HandpayType) return false;
      if (KeyOffType != other.KeyOffType) return false;
      if (CashableAmount != other.CashableAmount) return false;
      if (CashablePromoAmount != other.CashablePromoAmount) return false;
      if (NonCashablePromoAmount != other.NonCashablePromoAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (TransactionType.Length != 0) hash ^= TransactionType.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (time_ != null) hash ^= Time.GetHashCode();
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (GameIndex != 0) hash ^= GameIndex.GetHashCode();
      if (HandpayType != global::Aristocrat.Monaco.Gaming.Proto.HandpayType.GameWin) hash ^= HandpayType.GetHashCode();
      if (KeyOffType != global::Aristocrat.Monaco.Gaming.Proto.KeyOffType.LocalHandpay) hash ^= KeyOffType.GetHashCode();
      if (CashableAmount != 0L) hash ^= CashableAmount.GetHashCode();
      if (CashablePromoAmount != 0L) hash ^= CashablePromoAmount.GetHashCode();
      if (NonCashablePromoAmount != 0L) hash ^= NonCashablePromoAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TransactionType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TransactionType);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (time_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Time);
      }
      if (TransactionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TransactionId);
      }
      if (GameIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameIndex);
      }
      if (HandpayType != global::Aristocrat.Monaco.Gaming.Proto.HandpayType.GameWin) {
        output.WriteRawTag(48);
        output.WriteEnum((int) HandpayType);
      }
      if (KeyOffType != global::Aristocrat.Monaco.Gaming.Proto.KeyOffType.LocalHandpay) {
        output.WriteRawTag(56);
        output.WriteEnum((int) KeyOffType);
      }
      if (CashableAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CashableAmount);
      }
      if (CashablePromoAmount != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CashablePromoAmount);
      }
      if (NonCashablePromoAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(NonCashablePromoAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TransactionType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TransactionType);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
      if (time_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Time);
      }
      if (TransactionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TransactionId);
      }
      if (GameIndex != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(GameIndex);
      }
      if (HandpayType != global::Aristocrat.Monaco.Gaming.Proto.HandpayType.GameWin) {
        output.WriteRawTag(48);
        output.WriteEnum((int) HandpayType);
      }
      if (KeyOffType != global::Aristocrat.Monaco.Gaming.Proto.KeyOffType.LocalHandpay) {
        output.WriteRawTag(56);
        output.WriteEnum((int) KeyOffType);
      }
      if (CashableAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CashableAmount);
      }
      if (CashablePromoAmount != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CashablePromoAmount);
      }
      if (NonCashablePromoAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(NonCashablePromoAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (TransactionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionType);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (time_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Time);
      }
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (GameIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameIndex);
      }
      if (HandpayType != global::Aristocrat.Monaco.Gaming.Proto.HandpayType.GameWin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HandpayType);
      }
      if (KeyOffType != global::Aristocrat.Monaco.Gaming.Proto.KeyOffType.LocalHandpay) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) KeyOffType);
      }
      if (CashableAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CashableAmount);
      }
      if (CashablePromoAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CashablePromoAmount);
      }
      if (NonCashablePromoAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NonCashablePromoAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TransactionInfo other) {
      if (other == null) {
        return;
      }
      if (other.TransactionType.Length != 0) {
        TransactionType = other.TransactionType;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.time_ != null) {
        if (time_ == null) {
          Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Time.MergeFrom(other.Time);
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      if (other.GameIndex != 0) {
        GameIndex = other.GameIndex;
      }
      if (other.HandpayType != global::Aristocrat.Monaco.Gaming.Proto.HandpayType.GameWin) {
        HandpayType = other.HandpayType;
      }
      if (other.KeyOffType != global::Aristocrat.Monaco.Gaming.Proto.KeyOffType.LocalHandpay) {
        KeyOffType = other.KeyOffType;
      }
      if (other.CashableAmount != 0L) {
        CashableAmount = other.CashableAmount;
      }
      if (other.CashablePromoAmount != 0L) {
        CashablePromoAmount = other.CashablePromoAmount;
      }
      if (other.NonCashablePromoAmount != 0L) {
        NonCashablePromoAmount = other.NonCashablePromoAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TransactionType = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Time);
            break;
          }
          case 32: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 40: {
            GameIndex = input.ReadInt32();
            break;
          }
          case 48: {
            HandpayType = (global::Aristocrat.Monaco.Gaming.Proto.HandpayType) input.ReadEnum();
            break;
          }
          case 56: {
            KeyOffType = (global::Aristocrat.Monaco.Gaming.Proto.KeyOffType) input.ReadEnum();
            break;
          }
          case 64: {
            CashableAmount = input.ReadInt64();
            break;
          }
          case 72: {
            CashablePromoAmount = input.ReadInt64();
            break;
          }
          case 80: {
            NonCashablePromoAmount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TransactionType = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
          case 26: {
            if (time_ == null) {
              Time = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Time);
            break;
          }
          case 32: {
            TransactionId = input.ReadInt64();
            break;
          }
          case 40: {
            GameIndex = input.ReadInt32();
            break;
          }
          case 48: {
            HandpayType = (global::Aristocrat.Monaco.Gaming.Proto.HandpayType) input.ReadEnum();
            break;
          }
          case 56: {
            KeyOffType = (global::Aristocrat.Monaco.Gaming.Proto.KeyOffType) input.ReadEnum();
            break;
          }
          case 64: {
            CashableAmount = input.ReadInt64();
            break;
          }
          case 72: {
            CashablePromoAmount = input.ReadInt64();
            break;
          }
          case 80: {
            NonCashablePromoAmount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameEventLogEntry : pb::IMessage<GameEventLogEntry>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameEventLogEntry> _parser = new pb::MessageParser<GameEventLogEntry>(() => new GameEventLogEntry());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameEventLogEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameEventLogEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameEventLogEntry(GameEventLogEntry other) : this() {
      entryDate_ = other.entryDate_ != null ? other.entryDate_.Clone() : null;
      logType_ = other.logType_;
      logEntry_ = other.logEntry_;
      transactionId_ = other.transactionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameEventLogEntry Clone() {
      return new GameEventLogEntry(this);
    }

    /// <summary>Field number for the "entry_date" field.</summary>
    public const int EntryDateFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp entryDate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EntryDate {
      get { return entryDate_; }
      set {
        entryDate_ = value;
      }
    }

    /// <summary>Field number for the "log_type" field.</summary>
    public const int LogTypeFieldNumber = 2;
    private string logType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogType {
      get { return logType_; }
      set {
        logType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "log_entry" field.</summary>
    public const int LogEntryFieldNumber = 3;
    private string logEntry_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogEntry {
      get { return logEntry_; }
      set {
        logEntry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transaction_id" field.</summary>
    public const int TransactionIdFieldNumber = 4;
    private long transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameEventLogEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameEventLogEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntryDate, other.EntryDate)) return false;
      if (LogType != other.LogType) return false;
      if (LogEntry != other.LogEntry) return false;
      if (TransactionId != other.TransactionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (entryDate_ != null) hash ^= EntryDate.GetHashCode();
      if (LogType.Length != 0) hash ^= LogType.GetHashCode();
      if (LogEntry.Length != 0) hash ^= LogEntry.GetHashCode();
      if (TransactionId != 0L) hash ^= TransactionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (entryDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntryDate);
      }
      if (LogType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogType);
      }
      if (LogEntry.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogEntry);
      }
      if (TransactionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TransactionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (entryDate_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntryDate);
      }
      if (LogType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LogType);
      }
      if (LogEntry.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LogEntry);
      }
      if (TransactionId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TransactionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (entryDate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntryDate);
      }
      if (LogType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogType);
      }
      if (LogEntry.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LogEntry);
      }
      if (TransactionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameEventLogEntry other) {
      if (other == null) {
        return;
      }
      if (other.entryDate_ != null) {
        if (entryDate_ == null) {
          EntryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EntryDate.MergeFrom(other.EntryDate);
      }
      if (other.LogType.Length != 0) {
        LogType = other.LogType;
      }
      if (other.LogEntry.Length != 0) {
        LogEntry = other.LogEntry;
      }
      if (other.TransactionId != 0L) {
        TransactionId = other.TransactionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (entryDate_ == null) {
              EntryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EntryDate);
            break;
          }
          case 18: {
            LogType = input.ReadString();
            break;
          }
          case 26: {
            LogEntry = input.ReadString();
            break;
          }
          case 32: {
            TransactionId = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (entryDate_ == null) {
              EntryDate = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EntryDate);
            break;
          }
          case 18: {
            LogType = input.ReadString();
            break;
          }
          case 26: {
            LogEntry = input.ReadString();
            break;
          }
          case 32: {
            TransactionId = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameRoundMeterSnapshot : pb::IMessage<GameRoundMeterSnapshot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameRoundMeterSnapshot> _parser = new pb::MessageParser<GameRoundMeterSnapshot>(() => new GameRoundMeterSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameRoundMeterSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameRoundMeterSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameRoundMeterSnapshot(GameRoundMeterSnapshot other) : this() {
      playState_ = other.playState_;
      currentCredits_ = other.currentCredits_;
      wageredAmount_ = other.wageredAmount_;
      egmPaidGameWonAmount_ = other.egmPaidGameWonAmount_;
      egmPaidGameWinBonusAmount_ = other.egmPaidGameWinBonusAmount_;
      egmPaidBonusCashableInAmount_ = other.egmPaidBonusCashableInAmount_;
      egmPaidBonusNonCashInAmount_ = other.egmPaidBonusNonCashInAmount_;
      egmPaidBonusPromoInAmount_ = other.egmPaidBonusPromoInAmount_;
      handPaidGameWinBonusAmount_ = other.handPaidGameWinBonusAmount_;
      handPaidGameWonAmount_ = other.handPaidGameWonAmount_;
      handPaidProgWonAmount_ = other.handPaidProgWonAmount_;
      handPaidBonusCashableInAmount_ = other.handPaidBonusCashableInAmount_;
      handPaidBonusNonCashInAmount_ = other.handPaidBonusNonCashInAmount_;
      handPaidBonusPromoInAmount_ = other.handPaidBonusPromoInAmount_;
      trueCoinIn_ = other.trueCoinIn_;
      currencyInAmount_ = other.currencyInAmount_;
      voucherInCashableAmount_ = other.voucherInCashableAmount_;
      voucherInCashablePromoAmount_ = other.voucherInCashablePromoAmount_;
      voucherInNonCashableAmount_ = other.voucherInNonCashableAmount_;
      voucherInNonTransferableAmount_ = other.voucherInNonTransferableAmount_;
      trueCoinOut_ = other.trueCoinOut_;
      voucherOutCashableAmount_ = other.voucherOutCashableAmount_;
      voucherOutCashablePromoAmount_ = other.voucherOutCashablePromoAmount_;
      voucherOutNonCashableAmount_ = other.voucherOutNonCashableAmount_;
      handpaidCancelAmount_ = other.handpaidCancelAmount_;
      coinDrop_ = other.coinDrop_;
      handPaidBonusAmount_ = other.handPaidBonusAmount_;
      egmPaidBonusAmount_ = other.egmPaidBonusAmount_;
      secondaryPlayedCount_ = other.secondaryPlayedCount_;
      secondaryWageredAmount_ = other.secondaryWageredAmount_;
      secondaryWonAmount_ = other.secondaryWonAmount_;
      watOnCashableAmount_ = other.watOnCashableAmount_;
      watOffCashableAmount_ = other.watOffCashableAmount_;
      watOnNonCashableAmount_ = other.watOnNonCashableAmount_;
      watOffNonCashableAmount_ = other.watOffNonCashableAmount_;
      watOnCashablePromoAmount_ = other.watOnCashablePromoAmount_;
      watOffCashablePromoAmount_ = other.watOffCashablePromoAmount_;
      egmPaidProgWonAmount_ = other.egmPaidProgWonAmount_;
      wageredPromoAmount_ = other.wageredPromoAmount_;
      hardMeterOutAmount_ = other.hardMeterOutAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameRoundMeterSnapshot Clone() {
      return new GameRoundMeterSnapshot(this);
    }

    /// <summary>Field number for the "play_state" field.</summary>
    public const int PlayStateFieldNumber = 1;
    private global::Aristocrat.Monaco.Gaming.Proto.PlayState playState_ = global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.PlayState PlayState {
      get { return playState_; }
      set {
        playState_ = value;
      }
    }

    /// <summary>Field number for the "current_credits" field.</summary>
    public const int CurrentCreditsFieldNumber = 2;
    private long currentCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrentCredits {
      get { return currentCredits_; }
      set {
        currentCredits_ = value;
      }
    }

    /// <summary>Field number for the "wagered_amount" field.</summary>
    public const int WageredAmountFieldNumber = 3;
    private long wageredAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WageredAmount {
      get { return wageredAmount_; }
      set {
        wageredAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_game_won_amount" field.</summary>
    public const int EgmPaidGameWonAmountFieldNumber = 4;
    private long egmPaidGameWonAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidGameWonAmount {
      get { return egmPaidGameWonAmount_; }
      set {
        egmPaidGameWonAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_game_win_bonus_amount" field.</summary>
    public const int EgmPaidGameWinBonusAmountFieldNumber = 5;
    private long egmPaidGameWinBonusAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidGameWinBonusAmount {
      get { return egmPaidGameWinBonusAmount_; }
      set {
        egmPaidGameWinBonusAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_bonus_cashable_in_amount" field.</summary>
    public const int EgmPaidBonusCashableInAmountFieldNumber = 6;
    private long egmPaidBonusCashableInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidBonusCashableInAmount {
      get { return egmPaidBonusCashableInAmount_; }
      set {
        egmPaidBonusCashableInAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_bonus_non_cash_in_amount" field.</summary>
    public const int EgmPaidBonusNonCashInAmountFieldNumber = 7;
    private long egmPaidBonusNonCashInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidBonusNonCashInAmount {
      get { return egmPaidBonusNonCashInAmount_; }
      set {
        egmPaidBonusNonCashInAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_bonus_promo_in_amount" field.</summary>
    public const int EgmPaidBonusPromoInAmountFieldNumber = 8;
    private long egmPaidBonusPromoInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidBonusPromoInAmount {
      get { return egmPaidBonusPromoInAmount_; }
      set {
        egmPaidBonusPromoInAmount_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_game_win_bonus_amount" field.</summary>
    public const int HandPaidGameWinBonusAmountFieldNumber = 9;
    private long handPaidGameWinBonusAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidGameWinBonusAmount {
      get { return handPaidGameWinBonusAmount_; }
      set {
        handPaidGameWinBonusAmount_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_game_won_amount" field.</summary>
    public const int HandPaidGameWonAmountFieldNumber = 10;
    private long handPaidGameWonAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidGameWonAmount {
      get { return handPaidGameWonAmount_; }
      set {
        handPaidGameWonAmount_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_prog_won_amount" field.</summary>
    public const int HandPaidProgWonAmountFieldNumber = 11;
    private long handPaidProgWonAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidProgWonAmount {
      get { return handPaidProgWonAmount_; }
      set {
        handPaidProgWonAmount_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_bonus_cashable_in_amount" field.</summary>
    public const int HandPaidBonusCashableInAmountFieldNumber = 12;
    private long handPaidBonusCashableInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidBonusCashableInAmount {
      get { return handPaidBonusCashableInAmount_; }
      set {
        handPaidBonusCashableInAmount_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_bonus_non_cash_in_amount" field.</summary>
    public const int HandPaidBonusNonCashInAmountFieldNumber = 13;
    private long handPaidBonusNonCashInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidBonusNonCashInAmount {
      get { return handPaidBonusNonCashInAmount_; }
      set {
        handPaidBonusNonCashInAmount_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_bonus_promo_in_amount" field.</summary>
    public const int HandPaidBonusPromoInAmountFieldNumber = 14;
    private long handPaidBonusPromoInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidBonusPromoInAmount {
      get { return handPaidBonusPromoInAmount_; }
      set {
        handPaidBonusPromoInAmount_ = value;
      }
    }

    /// <summary>Field number for the "true_coin_in" field.</summary>
    public const int TrueCoinInFieldNumber = 15;
    private long trueCoinIn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TrueCoinIn {
      get { return trueCoinIn_; }
      set {
        trueCoinIn_ = value;
      }
    }

    /// <summary>Field number for the "currency_in_amount" field.</summary>
    public const int CurrencyInAmountFieldNumber = 16;
    private long currencyInAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrencyInAmount {
      get { return currencyInAmount_; }
      set {
        currencyInAmount_ = value;
      }
    }

    /// <summary>Field number for the "voucher_in_cashable_amount" field.</summary>
    public const int VoucherInCashableAmountFieldNumber = 17;
    private long voucherInCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherInCashableAmount {
      get { return voucherInCashableAmount_; }
      set {
        voucherInCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "voucher_in_cashable_promo_amount" field.</summary>
    public const int VoucherInCashablePromoAmountFieldNumber = 18;
    private long voucherInCashablePromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherInCashablePromoAmount {
      get { return voucherInCashablePromoAmount_; }
      set {
        voucherInCashablePromoAmount_ = value;
      }
    }

    /// <summary>Field number for the "voucher_in_non_cashable_amount" field.</summary>
    public const int VoucherInNonCashableAmountFieldNumber = 19;
    private long voucherInNonCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherInNonCashableAmount {
      get { return voucherInNonCashableAmount_; }
      set {
        voucherInNonCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "voucher_in_non_transferable_amount" field.</summary>
    public const int VoucherInNonTransferableAmountFieldNumber = 20;
    private long voucherInNonTransferableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherInNonTransferableAmount {
      get { return voucherInNonTransferableAmount_; }
      set {
        voucherInNonTransferableAmount_ = value;
      }
    }

    /// <summary>Field number for the "true_coin_out" field.</summary>
    public const int TrueCoinOutFieldNumber = 21;
    private long trueCoinOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TrueCoinOut {
      get { return trueCoinOut_; }
      set {
        trueCoinOut_ = value;
      }
    }

    /// <summary>Field number for the "voucher_out_cashable_amount" field.</summary>
    public const int VoucherOutCashableAmountFieldNumber = 22;
    private long voucherOutCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherOutCashableAmount {
      get { return voucherOutCashableAmount_; }
      set {
        voucherOutCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "voucher_out_cashable_promo_amount" field.</summary>
    public const int VoucherOutCashablePromoAmountFieldNumber = 23;
    private long voucherOutCashablePromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherOutCashablePromoAmount {
      get { return voucherOutCashablePromoAmount_; }
      set {
        voucherOutCashablePromoAmount_ = value;
      }
    }

    /// <summary>Field number for the "voucher_out_non_cashable_amount" field.</summary>
    public const int VoucherOutNonCashableAmountFieldNumber = 24;
    private long voucherOutNonCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long VoucherOutNonCashableAmount {
      get { return voucherOutNonCashableAmount_; }
      set {
        voucherOutNonCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "handpaid_cancel_amount" field.</summary>
    public const int HandpaidCancelAmountFieldNumber = 25;
    private long handpaidCancelAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandpaidCancelAmount {
      get { return handpaidCancelAmount_; }
      set {
        handpaidCancelAmount_ = value;
      }
    }

    /// <summary>Field number for the "coin_drop" field.</summary>
    public const int CoinDropFieldNumber = 26;
    private long coinDrop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CoinDrop {
      get { return coinDrop_; }
      set {
        coinDrop_ = value;
      }
    }

    /// <summary>Field number for the "hand_paid_bonus_amount" field.</summary>
    public const int HandPaidBonusAmountFieldNumber = 27;
    private long handPaidBonusAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HandPaidBonusAmount {
      get { return handPaidBonusAmount_; }
      set {
        handPaidBonusAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_bonus_amount" field.</summary>
    public const int EgmPaidBonusAmountFieldNumber = 28;
    private long egmPaidBonusAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidBonusAmount {
      get { return egmPaidBonusAmount_; }
      set {
        egmPaidBonusAmount_ = value;
      }
    }

    /// <summary>Field number for the "secondary_played_count" field.</summary>
    public const int SecondaryPlayedCountFieldNumber = 29;
    private long secondaryPlayedCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SecondaryPlayedCount {
      get { return secondaryPlayedCount_; }
      set {
        secondaryPlayedCount_ = value;
      }
    }

    /// <summary>Field number for the "secondary_wagered_amount" field.</summary>
    public const int SecondaryWageredAmountFieldNumber = 30;
    private long secondaryWageredAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SecondaryWageredAmount {
      get { return secondaryWageredAmount_; }
      set {
        secondaryWageredAmount_ = value;
      }
    }

    /// <summary>Field number for the "secondary_won_amount" field.</summary>
    public const int SecondaryWonAmountFieldNumber = 31;
    private long secondaryWonAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SecondaryWonAmount {
      get { return secondaryWonAmount_; }
      set {
        secondaryWonAmount_ = value;
      }
    }

    /// <summary>Field number for the "wat_on_cashable_amount" field.</summary>
    public const int WatOnCashableAmountFieldNumber = 32;
    private long watOnCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WatOnCashableAmount {
      get { return watOnCashableAmount_; }
      set {
        watOnCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "wat_off_cashable_amount" field.</summary>
    public const int WatOffCashableAmountFieldNumber = 33;
    private long watOffCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WatOffCashableAmount {
      get { return watOffCashableAmount_; }
      set {
        watOffCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "wat_on_non_cashable_amount" field.</summary>
    public const int WatOnNonCashableAmountFieldNumber = 34;
    private long watOnNonCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WatOnNonCashableAmount {
      get { return watOnNonCashableAmount_; }
      set {
        watOnNonCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "wat_off_non_cashable_amount" field.</summary>
    public const int WatOffNonCashableAmountFieldNumber = 35;
    private long watOffNonCashableAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WatOffNonCashableAmount {
      get { return watOffNonCashableAmount_; }
      set {
        watOffNonCashableAmount_ = value;
      }
    }

    /// <summary>Field number for the "wat_on_cashable_promo_amount" field.</summary>
    public const int WatOnCashablePromoAmountFieldNumber = 36;
    private long watOnCashablePromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WatOnCashablePromoAmount {
      get { return watOnCashablePromoAmount_; }
      set {
        watOnCashablePromoAmount_ = value;
      }
    }

    /// <summary>Field number for the "wat_off_cashable_promo_amount" field.</summary>
    public const int WatOffCashablePromoAmountFieldNumber = 37;
    private long watOffCashablePromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WatOffCashablePromoAmount {
      get { return watOffCashablePromoAmount_; }
      set {
        watOffCashablePromoAmount_ = value;
      }
    }

    /// <summary>Field number for the "egm_paid_prog_won_amount" field.</summary>
    public const int EgmPaidProgWonAmountFieldNumber = 38;
    private long egmPaidProgWonAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EgmPaidProgWonAmount {
      get { return egmPaidProgWonAmount_; }
      set {
        egmPaidProgWonAmount_ = value;
      }
    }

    /// <summary>Field number for the "wagered_promo_amount" field.</summary>
    public const int WageredPromoAmountFieldNumber = 39;
    private long wageredPromoAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long WageredPromoAmount {
      get { return wageredPromoAmount_; }
      set {
        wageredPromoAmount_ = value;
      }
    }

    /// <summary>Field number for the "hard_meter_out_amount" field.</summary>
    public const int HardMeterOutAmountFieldNumber = 40;
    private long hardMeterOutAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long HardMeterOutAmount {
      get { return hardMeterOutAmount_; }
      set {
        hardMeterOutAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameRoundMeterSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameRoundMeterSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayState != other.PlayState) return false;
      if (CurrentCredits != other.CurrentCredits) return false;
      if (WageredAmount != other.WageredAmount) return false;
      if (EgmPaidGameWonAmount != other.EgmPaidGameWonAmount) return false;
      if (EgmPaidGameWinBonusAmount != other.EgmPaidGameWinBonusAmount) return false;
      if (EgmPaidBonusCashableInAmount != other.EgmPaidBonusCashableInAmount) return false;
      if (EgmPaidBonusNonCashInAmount != other.EgmPaidBonusNonCashInAmount) return false;
      if (EgmPaidBonusPromoInAmount != other.EgmPaidBonusPromoInAmount) return false;
      if (HandPaidGameWinBonusAmount != other.HandPaidGameWinBonusAmount) return false;
      if (HandPaidGameWonAmount != other.HandPaidGameWonAmount) return false;
      if (HandPaidProgWonAmount != other.HandPaidProgWonAmount) return false;
      if (HandPaidBonusCashableInAmount != other.HandPaidBonusCashableInAmount) return false;
      if (HandPaidBonusNonCashInAmount != other.HandPaidBonusNonCashInAmount) return false;
      if (HandPaidBonusPromoInAmount != other.HandPaidBonusPromoInAmount) return false;
      if (TrueCoinIn != other.TrueCoinIn) return false;
      if (CurrencyInAmount != other.CurrencyInAmount) return false;
      if (VoucherInCashableAmount != other.VoucherInCashableAmount) return false;
      if (VoucherInCashablePromoAmount != other.VoucherInCashablePromoAmount) return false;
      if (VoucherInNonCashableAmount != other.VoucherInNonCashableAmount) return false;
      if (VoucherInNonTransferableAmount != other.VoucherInNonTransferableAmount) return false;
      if (TrueCoinOut != other.TrueCoinOut) return false;
      if (VoucherOutCashableAmount != other.VoucherOutCashableAmount) return false;
      if (VoucherOutCashablePromoAmount != other.VoucherOutCashablePromoAmount) return false;
      if (VoucherOutNonCashableAmount != other.VoucherOutNonCashableAmount) return false;
      if (HandpaidCancelAmount != other.HandpaidCancelAmount) return false;
      if (CoinDrop != other.CoinDrop) return false;
      if (HandPaidBonusAmount != other.HandPaidBonusAmount) return false;
      if (EgmPaidBonusAmount != other.EgmPaidBonusAmount) return false;
      if (SecondaryPlayedCount != other.SecondaryPlayedCount) return false;
      if (SecondaryWageredAmount != other.SecondaryWageredAmount) return false;
      if (SecondaryWonAmount != other.SecondaryWonAmount) return false;
      if (WatOnCashableAmount != other.WatOnCashableAmount) return false;
      if (WatOffCashableAmount != other.WatOffCashableAmount) return false;
      if (WatOnNonCashableAmount != other.WatOnNonCashableAmount) return false;
      if (WatOffNonCashableAmount != other.WatOffNonCashableAmount) return false;
      if (WatOnCashablePromoAmount != other.WatOnCashablePromoAmount) return false;
      if (WatOffCashablePromoAmount != other.WatOffCashablePromoAmount) return false;
      if (EgmPaidProgWonAmount != other.EgmPaidProgWonAmount) return false;
      if (WageredPromoAmount != other.WageredPromoAmount) return false;
      if (HardMeterOutAmount != other.HardMeterOutAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) hash ^= PlayState.GetHashCode();
      if (CurrentCredits != 0L) hash ^= CurrentCredits.GetHashCode();
      if (WageredAmount != 0L) hash ^= WageredAmount.GetHashCode();
      if (EgmPaidGameWonAmount != 0L) hash ^= EgmPaidGameWonAmount.GetHashCode();
      if (EgmPaidGameWinBonusAmount != 0L) hash ^= EgmPaidGameWinBonusAmount.GetHashCode();
      if (EgmPaidBonusCashableInAmount != 0L) hash ^= EgmPaidBonusCashableInAmount.GetHashCode();
      if (EgmPaidBonusNonCashInAmount != 0L) hash ^= EgmPaidBonusNonCashInAmount.GetHashCode();
      if (EgmPaidBonusPromoInAmount != 0L) hash ^= EgmPaidBonusPromoInAmount.GetHashCode();
      if (HandPaidGameWinBonusAmount != 0L) hash ^= HandPaidGameWinBonusAmount.GetHashCode();
      if (HandPaidGameWonAmount != 0L) hash ^= HandPaidGameWonAmount.GetHashCode();
      if (HandPaidProgWonAmount != 0L) hash ^= HandPaidProgWonAmount.GetHashCode();
      if (HandPaidBonusCashableInAmount != 0L) hash ^= HandPaidBonusCashableInAmount.GetHashCode();
      if (HandPaidBonusNonCashInAmount != 0L) hash ^= HandPaidBonusNonCashInAmount.GetHashCode();
      if (HandPaidBonusPromoInAmount != 0L) hash ^= HandPaidBonusPromoInAmount.GetHashCode();
      if (TrueCoinIn != 0L) hash ^= TrueCoinIn.GetHashCode();
      if (CurrencyInAmount != 0L) hash ^= CurrencyInAmount.GetHashCode();
      if (VoucherInCashableAmount != 0L) hash ^= VoucherInCashableAmount.GetHashCode();
      if (VoucherInCashablePromoAmount != 0L) hash ^= VoucherInCashablePromoAmount.GetHashCode();
      if (VoucherInNonCashableAmount != 0L) hash ^= VoucherInNonCashableAmount.GetHashCode();
      if (VoucherInNonTransferableAmount != 0L) hash ^= VoucherInNonTransferableAmount.GetHashCode();
      if (TrueCoinOut != 0L) hash ^= TrueCoinOut.GetHashCode();
      if (VoucherOutCashableAmount != 0L) hash ^= VoucherOutCashableAmount.GetHashCode();
      if (VoucherOutCashablePromoAmount != 0L) hash ^= VoucherOutCashablePromoAmount.GetHashCode();
      if (VoucherOutNonCashableAmount != 0L) hash ^= VoucherOutNonCashableAmount.GetHashCode();
      if (HandpaidCancelAmount != 0L) hash ^= HandpaidCancelAmount.GetHashCode();
      if (CoinDrop != 0L) hash ^= CoinDrop.GetHashCode();
      if (HandPaidBonusAmount != 0L) hash ^= HandPaidBonusAmount.GetHashCode();
      if (EgmPaidBonusAmount != 0L) hash ^= EgmPaidBonusAmount.GetHashCode();
      if (SecondaryPlayedCount != 0L) hash ^= SecondaryPlayedCount.GetHashCode();
      if (SecondaryWageredAmount != 0L) hash ^= SecondaryWageredAmount.GetHashCode();
      if (SecondaryWonAmount != 0L) hash ^= SecondaryWonAmount.GetHashCode();
      if (WatOnCashableAmount != 0L) hash ^= WatOnCashableAmount.GetHashCode();
      if (WatOffCashableAmount != 0L) hash ^= WatOffCashableAmount.GetHashCode();
      if (WatOnNonCashableAmount != 0L) hash ^= WatOnNonCashableAmount.GetHashCode();
      if (WatOffNonCashableAmount != 0L) hash ^= WatOffNonCashableAmount.GetHashCode();
      if (WatOnCashablePromoAmount != 0L) hash ^= WatOnCashablePromoAmount.GetHashCode();
      if (WatOffCashablePromoAmount != 0L) hash ^= WatOffCashablePromoAmount.GetHashCode();
      if (EgmPaidProgWonAmount != 0L) hash ^= EgmPaidProgWonAmount.GetHashCode();
      if (WageredPromoAmount != 0L) hash ^= WageredPromoAmount.GetHashCode();
      if (HardMeterOutAmount != 0L) hash ^= HardMeterOutAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayState);
      }
      if (CurrentCredits != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurrentCredits);
      }
      if (WageredAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WageredAmount);
      }
      if (EgmPaidGameWonAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EgmPaidGameWonAmount);
      }
      if (EgmPaidGameWinBonusAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EgmPaidGameWinBonusAmount);
      }
      if (EgmPaidBonusCashableInAmount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EgmPaidBonusCashableInAmount);
      }
      if (EgmPaidBonusNonCashInAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EgmPaidBonusNonCashInAmount);
      }
      if (EgmPaidBonusPromoInAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EgmPaidBonusPromoInAmount);
      }
      if (HandPaidGameWinBonusAmount != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(HandPaidGameWinBonusAmount);
      }
      if (HandPaidGameWonAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(HandPaidGameWonAmount);
      }
      if (HandPaidProgWonAmount != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(HandPaidProgWonAmount);
      }
      if (HandPaidBonusCashableInAmount != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(HandPaidBonusCashableInAmount);
      }
      if (HandPaidBonusNonCashInAmount != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(HandPaidBonusNonCashInAmount);
      }
      if (HandPaidBonusPromoInAmount != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(HandPaidBonusPromoInAmount);
      }
      if (TrueCoinIn != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(TrueCoinIn);
      }
      if (CurrencyInAmount != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(CurrencyInAmount);
      }
      if (VoucherInCashableAmount != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(VoucherInCashableAmount);
      }
      if (VoucherInCashablePromoAmount != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(VoucherInCashablePromoAmount);
      }
      if (VoucherInNonCashableAmount != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(VoucherInNonCashableAmount);
      }
      if (VoucherInNonTransferableAmount != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(VoucherInNonTransferableAmount);
      }
      if (TrueCoinOut != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TrueCoinOut);
      }
      if (VoucherOutCashableAmount != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(VoucherOutCashableAmount);
      }
      if (VoucherOutCashablePromoAmount != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(VoucherOutCashablePromoAmount);
      }
      if (VoucherOutNonCashableAmount != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(VoucherOutNonCashableAmount);
      }
      if (HandpaidCancelAmount != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(HandpaidCancelAmount);
      }
      if (CoinDrop != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(CoinDrop);
      }
      if (HandPaidBonusAmount != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(HandPaidBonusAmount);
      }
      if (EgmPaidBonusAmount != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(EgmPaidBonusAmount);
      }
      if (SecondaryPlayedCount != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(SecondaryPlayedCount);
      }
      if (SecondaryWageredAmount != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(SecondaryWageredAmount);
      }
      if (SecondaryWonAmount != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(SecondaryWonAmount);
      }
      if (WatOnCashableAmount != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(WatOnCashableAmount);
      }
      if (WatOffCashableAmount != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(WatOffCashableAmount);
      }
      if (WatOnNonCashableAmount != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(WatOnNonCashableAmount);
      }
      if (WatOffNonCashableAmount != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(WatOffNonCashableAmount);
      }
      if (WatOnCashablePromoAmount != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(WatOnCashablePromoAmount);
      }
      if (WatOffCashablePromoAmount != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(WatOffCashablePromoAmount);
      }
      if (EgmPaidProgWonAmount != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(EgmPaidProgWonAmount);
      }
      if (WageredPromoAmount != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(WageredPromoAmount);
      }
      if (HardMeterOutAmount != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(HardMeterOutAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PlayState);
      }
      if (CurrentCredits != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CurrentCredits);
      }
      if (WageredAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(WageredAmount);
      }
      if (EgmPaidGameWonAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EgmPaidGameWonAmount);
      }
      if (EgmPaidGameWinBonusAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(EgmPaidGameWinBonusAmount);
      }
      if (EgmPaidBonusCashableInAmount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(EgmPaidBonusCashableInAmount);
      }
      if (EgmPaidBonusNonCashInAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EgmPaidBonusNonCashInAmount);
      }
      if (EgmPaidBonusPromoInAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(EgmPaidBonusPromoInAmount);
      }
      if (HandPaidGameWinBonusAmount != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(HandPaidGameWinBonusAmount);
      }
      if (HandPaidGameWonAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(HandPaidGameWonAmount);
      }
      if (HandPaidProgWonAmount != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(HandPaidProgWonAmount);
      }
      if (HandPaidBonusCashableInAmount != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(HandPaidBonusCashableInAmount);
      }
      if (HandPaidBonusNonCashInAmount != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(HandPaidBonusNonCashInAmount);
      }
      if (HandPaidBonusPromoInAmount != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(HandPaidBonusPromoInAmount);
      }
      if (TrueCoinIn != 0L) {
        output.WriteRawTag(120);
        output.WriteInt64(TrueCoinIn);
      }
      if (CurrencyInAmount != 0L) {
        output.WriteRawTag(128, 1);
        output.WriteInt64(CurrencyInAmount);
      }
      if (VoucherInCashableAmount != 0L) {
        output.WriteRawTag(136, 1);
        output.WriteInt64(VoucherInCashableAmount);
      }
      if (VoucherInCashablePromoAmount != 0L) {
        output.WriteRawTag(144, 1);
        output.WriteInt64(VoucherInCashablePromoAmount);
      }
      if (VoucherInNonCashableAmount != 0L) {
        output.WriteRawTag(152, 1);
        output.WriteInt64(VoucherInNonCashableAmount);
      }
      if (VoucherInNonTransferableAmount != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(VoucherInNonTransferableAmount);
      }
      if (TrueCoinOut != 0L) {
        output.WriteRawTag(168, 1);
        output.WriteInt64(TrueCoinOut);
      }
      if (VoucherOutCashableAmount != 0L) {
        output.WriteRawTag(176, 1);
        output.WriteInt64(VoucherOutCashableAmount);
      }
      if (VoucherOutCashablePromoAmount != 0L) {
        output.WriteRawTag(184, 1);
        output.WriteInt64(VoucherOutCashablePromoAmount);
      }
      if (VoucherOutNonCashableAmount != 0L) {
        output.WriteRawTag(192, 1);
        output.WriteInt64(VoucherOutNonCashableAmount);
      }
      if (HandpaidCancelAmount != 0L) {
        output.WriteRawTag(200, 1);
        output.WriteInt64(HandpaidCancelAmount);
      }
      if (CoinDrop != 0L) {
        output.WriteRawTag(208, 1);
        output.WriteInt64(CoinDrop);
      }
      if (HandPaidBonusAmount != 0L) {
        output.WriteRawTag(216, 1);
        output.WriteInt64(HandPaidBonusAmount);
      }
      if (EgmPaidBonusAmount != 0L) {
        output.WriteRawTag(224, 1);
        output.WriteInt64(EgmPaidBonusAmount);
      }
      if (SecondaryPlayedCount != 0L) {
        output.WriteRawTag(232, 1);
        output.WriteInt64(SecondaryPlayedCount);
      }
      if (SecondaryWageredAmount != 0L) {
        output.WriteRawTag(240, 1);
        output.WriteInt64(SecondaryWageredAmount);
      }
      if (SecondaryWonAmount != 0L) {
        output.WriteRawTag(248, 1);
        output.WriteInt64(SecondaryWonAmount);
      }
      if (WatOnCashableAmount != 0L) {
        output.WriteRawTag(128, 2);
        output.WriteInt64(WatOnCashableAmount);
      }
      if (WatOffCashableAmount != 0L) {
        output.WriteRawTag(136, 2);
        output.WriteInt64(WatOffCashableAmount);
      }
      if (WatOnNonCashableAmount != 0L) {
        output.WriteRawTag(144, 2);
        output.WriteInt64(WatOnNonCashableAmount);
      }
      if (WatOffNonCashableAmount != 0L) {
        output.WriteRawTag(152, 2);
        output.WriteInt64(WatOffNonCashableAmount);
      }
      if (WatOnCashablePromoAmount != 0L) {
        output.WriteRawTag(160, 2);
        output.WriteInt64(WatOnCashablePromoAmount);
      }
      if (WatOffCashablePromoAmount != 0L) {
        output.WriteRawTag(168, 2);
        output.WriteInt64(WatOffCashablePromoAmount);
      }
      if (EgmPaidProgWonAmount != 0L) {
        output.WriteRawTag(176, 2);
        output.WriteInt64(EgmPaidProgWonAmount);
      }
      if (WageredPromoAmount != 0L) {
        output.WriteRawTag(184, 2);
        output.WriteInt64(WageredPromoAmount);
      }
      if (HardMeterOutAmount != 0L) {
        output.WriteRawTag(192, 2);
        output.WriteInt64(HardMeterOutAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayState);
      }
      if (CurrentCredits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentCredits);
      }
      if (WageredAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(WageredAmount);
      }
      if (EgmPaidGameWonAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidGameWonAmount);
      }
      if (EgmPaidGameWinBonusAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidGameWinBonusAmount);
      }
      if (EgmPaidBonusCashableInAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidBonusCashableInAmount);
      }
      if (EgmPaidBonusNonCashInAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidBonusNonCashInAmount);
      }
      if (EgmPaidBonusPromoInAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidBonusPromoInAmount);
      }
      if (HandPaidGameWinBonusAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandPaidGameWinBonusAmount);
      }
      if (HandPaidGameWonAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandPaidGameWonAmount);
      }
      if (HandPaidProgWonAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandPaidProgWonAmount);
      }
      if (HandPaidBonusCashableInAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandPaidBonusCashableInAmount);
      }
      if (HandPaidBonusNonCashInAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandPaidBonusNonCashInAmount);
      }
      if (HandPaidBonusPromoInAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HandPaidBonusPromoInAmount);
      }
      if (TrueCoinIn != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TrueCoinIn);
      }
      if (CurrencyInAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CurrencyInAmount);
      }
      if (VoucherInCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherInCashableAmount);
      }
      if (VoucherInCashablePromoAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherInCashablePromoAmount);
      }
      if (VoucherInNonCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherInNonCashableAmount);
      }
      if (VoucherInNonTransferableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherInNonTransferableAmount);
      }
      if (TrueCoinOut != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TrueCoinOut);
      }
      if (VoucherOutCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherOutCashableAmount);
      }
      if (VoucherOutCashablePromoAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherOutCashablePromoAmount);
      }
      if (VoucherOutNonCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(VoucherOutNonCashableAmount);
      }
      if (HandpaidCancelAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HandpaidCancelAmount);
      }
      if (CoinDrop != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(CoinDrop);
      }
      if (HandPaidBonusAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HandPaidBonusAmount);
      }
      if (EgmPaidBonusAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidBonusAmount);
      }
      if (SecondaryPlayedCount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SecondaryPlayedCount);
      }
      if (SecondaryWageredAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SecondaryWageredAmount);
      }
      if (SecondaryWonAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(SecondaryWonAmount);
      }
      if (WatOnCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WatOnCashableAmount);
      }
      if (WatOffCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WatOffCashableAmount);
      }
      if (WatOnNonCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WatOnNonCashableAmount);
      }
      if (WatOffNonCashableAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WatOffNonCashableAmount);
      }
      if (WatOnCashablePromoAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WatOnCashablePromoAmount);
      }
      if (WatOffCashablePromoAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WatOffCashablePromoAmount);
      }
      if (EgmPaidProgWonAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(EgmPaidProgWonAmount);
      }
      if (WageredPromoAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(WageredPromoAmount);
      }
      if (HardMeterOutAmount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(HardMeterOutAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameRoundMeterSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.PlayState != global::Aristocrat.Monaco.Gaming.Proto.PlayState.Idle) {
        PlayState = other.PlayState;
      }
      if (other.CurrentCredits != 0L) {
        CurrentCredits = other.CurrentCredits;
      }
      if (other.WageredAmount != 0L) {
        WageredAmount = other.WageredAmount;
      }
      if (other.EgmPaidGameWonAmount != 0L) {
        EgmPaidGameWonAmount = other.EgmPaidGameWonAmount;
      }
      if (other.EgmPaidGameWinBonusAmount != 0L) {
        EgmPaidGameWinBonusAmount = other.EgmPaidGameWinBonusAmount;
      }
      if (other.EgmPaidBonusCashableInAmount != 0L) {
        EgmPaidBonusCashableInAmount = other.EgmPaidBonusCashableInAmount;
      }
      if (other.EgmPaidBonusNonCashInAmount != 0L) {
        EgmPaidBonusNonCashInAmount = other.EgmPaidBonusNonCashInAmount;
      }
      if (other.EgmPaidBonusPromoInAmount != 0L) {
        EgmPaidBonusPromoInAmount = other.EgmPaidBonusPromoInAmount;
      }
      if (other.HandPaidGameWinBonusAmount != 0L) {
        HandPaidGameWinBonusAmount = other.HandPaidGameWinBonusAmount;
      }
      if (other.HandPaidGameWonAmount != 0L) {
        HandPaidGameWonAmount = other.HandPaidGameWonAmount;
      }
      if (other.HandPaidProgWonAmount != 0L) {
        HandPaidProgWonAmount = other.HandPaidProgWonAmount;
      }
      if (other.HandPaidBonusCashableInAmount != 0L) {
        HandPaidBonusCashableInAmount = other.HandPaidBonusCashableInAmount;
      }
      if (other.HandPaidBonusNonCashInAmount != 0L) {
        HandPaidBonusNonCashInAmount = other.HandPaidBonusNonCashInAmount;
      }
      if (other.HandPaidBonusPromoInAmount != 0L) {
        HandPaidBonusPromoInAmount = other.HandPaidBonusPromoInAmount;
      }
      if (other.TrueCoinIn != 0L) {
        TrueCoinIn = other.TrueCoinIn;
      }
      if (other.CurrencyInAmount != 0L) {
        CurrencyInAmount = other.CurrencyInAmount;
      }
      if (other.VoucherInCashableAmount != 0L) {
        VoucherInCashableAmount = other.VoucherInCashableAmount;
      }
      if (other.VoucherInCashablePromoAmount != 0L) {
        VoucherInCashablePromoAmount = other.VoucherInCashablePromoAmount;
      }
      if (other.VoucherInNonCashableAmount != 0L) {
        VoucherInNonCashableAmount = other.VoucherInNonCashableAmount;
      }
      if (other.VoucherInNonTransferableAmount != 0L) {
        VoucherInNonTransferableAmount = other.VoucherInNonTransferableAmount;
      }
      if (other.TrueCoinOut != 0L) {
        TrueCoinOut = other.TrueCoinOut;
      }
      if (other.VoucherOutCashableAmount != 0L) {
        VoucherOutCashableAmount = other.VoucherOutCashableAmount;
      }
      if (other.VoucherOutCashablePromoAmount != 0L) {
        VoucherOutCashablePromoAmount = other.VoucherOutCashablePromoAmount;
      }
      if (other.VoucherOutNonCashableAmount != 0L) {
        VoucherOutNonCashableAmount = other.VoucherOutNonCashableAmount;
      }
      if (other.HandpaidCancelAmount != 0L) {
        HandpaidCancelAmount = other.HandpaidCancelAmount;
      }
      if (other.CoinDrop != 0L) {
        CoinDrop = other.CoinDrop;
      }
      if (other.HandPaidBonusAmount != 0L) {
        HandPaidBonusAmount = other.HandPaidBonusAmount;
      }
      if (other.EgmPaidBonusAmount != 0L) {
        EgmPaidBonusAmount = other.EgmPaidBonusAmount;
      }
      if (other.SecondaryPlayedCount != 0L) {
        SecondaryPlayedCount = other.SecondaryPlayedCount;
      }
      if (other.SecondaryWageredAmount != 0L) {
        SecondaryWageredAmount = other.SecondaryWageredAmount;
      }
      if (other.SecondaryWonAmount != 0L) {
        SecondaryWonAmount = other.SecondaryWonAmount;
      }
      if (other.WatOnCashableAmount != 0L) {
        WatOnCashableAmount = other.WatOnCashableAmount;
      }
      if (other.WatOffCashableAmount != 0L) {
        WatOffCashableAmount = other.WatOffCashableAmount;
      }
      if (other.WatOnNonCashableAmount != 0L) {
        WatOnNonCashableAmount = other.WatOnNonCashableAmount;
      }
      if (other.WatOffNonCashableAmount != 0L) {
        WatOffNonCashableAmount = other.WatOffNonCashableAmount;
      }
      if (other.WatOnCashablePromoAmount != 0L) {
        WatOnCashablePromoAmount = other.WatOnCashablePromoAmount;
      }
      if (other.WatOffCashablePromoAmount != 0L) {
        WatOffCashablePromoAmount = other.WatOffCashablePromoAmount;
      }
      if (other.EgmPaidProgWonAmount != 0L) {
        EgmPaidProgWonAmount = other.EgmPaidProgWonAmount;
      }
      if (other.WageredPromoAmount != 0L) {
        WageredPromoAmount = other.WageredPromoAmount;
      }
      if (other.HardMeterOutAmount != 0L) {
        HardMeterOutAmount = other.HardMeterOutAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PlayState = (global::Aristocrat.Monaco.Gaming.Proto.PlayState) input.ReadEnum();
            break;
          }
          case 16: {
            CurrentCredits = input.ReadInt64();
            break;
          }
          case 24: {
            WageredAmount = input.ReadInt64();
            break;
          }
          case 32: {
            EgmPaidGameWonAmount = input.ReadInt64();
            break;
          }
          case 40: {
            EgmPaidGameWinBonusAmount = input.ReadInt64();
            break;
          }
          case 48: {
            EgmPaidBonusCashableInAmount = input.ReadInt64();
            break;
          }
          case 56: {
            EgmPaidBonusNonCashInAmount = input.ReadInt64();
            break;
          }
          case 64: {
            EgmPaidBonusPromoInAmount = input.ReadInt64();
            break;
          }
          case 72: {
            HandPaidGameWinBonusAmount = input.ReadInt64();
            break;
          }
          case 80: {
            HandPaidGameWonAmount = input.ReadInt64();
            break;
          }
          case 88: {
            HandPaidProgWonAmount = input.ReadInt64();
            break;
          }
          case 96: {
            HandPaidBonusCashableInAmount = input.ReadInt64();
            break;
          }
          case 104: {
            HandPaidBonusNonCashInAmount = input.ReadInt64();
            break;
          }
          case 112: {
            HandPaidBonusPromoInAmount = input.ReadInt64();
            break;
          }
          case 120: {
            TrueCoinIn = input.ReadInt64();
            break;
          }
          case 128: {
            CurrencyInAmount = input.ReadInt64();
            break;
          }
          case 136: {
            VoucherInCashableAmount = input.ReadInt64();
            break;
          }
          case 144: {
            VoucherInCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 152: {
            VoucherInNonCashableAmount = input.ReadInt64();
            break;
          }
          case 160: {
            VoucherInNonTransferableAmount = input.ReadInt64();
            break;
          }
          case 168: {
            TrueCoinOut = input.ReadInt64();
            break;
          }
          case 176: {
            VoucherOutCashableAmount = input.ReadInt64();
            break;
          }
          case 184: {
            VoucherOutCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 192: {
            VoucherOutNonCashableAmount = input.ReadInt64();
            break;
          }
          case 200: {
            HandpaidCancelAmount = input.ReadInt64();
            break;
          }
          case 208: {
            CoinDrop = input.ReadInt64();
            break;
          }
          case 216: {
            HandPaidBonusAmount = input.ReadInt64();
            break;
          }
          case 224: {
            EgmPaidBonusAmount = input.ReadInt64();
            break;
          }
          case 232: {
            SecondaryPlayedCount = input.ReadInt64();
            break;
          }
          case 240: {
            SecondaryWageredAmount = input.ReadInt64();
            break;
          }
          case 248: {
            SecondaryWonAmount = input.ReadInt64();
            break;
          }
          case 256: {
            WatOnCashableAmount = input.ReadInt64();
            break;
          }
          case 264: {
            WatOffCashableAmount = input.ReadInt64();
            break;
          }
          case 272: {
            WatOnNonCashableAmount = input.ReadInt64();
            break;
          }
          case 280: {
            WatOffNonCashableAmount = input.ReadInt64();
            break;
          }
          case 288: {
            WatOnCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 296: {
            WatOffCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 304: {
            EgmPaidProgWonAmount = input.ReadInt64();
            break;
          }
          case 312: {
            WageredPromoAmount = input.ReadInt64();
            break;
          }
          case 320: {
            HardMeterOutAmount = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PlayState = (global::Aristocrat.Monaco.Gaming.Proto.PlayState) input.ReadEnum();
            break;
          }
          case 16: {
            CurrentCredits = input.ReadInt64();
            break;
          }
          case 24: {
            WageredAmount = input.ReadInt64();
            break;
          }
          case 32: {
            EgmPaidGameWonAmount = input.ReadInt64();
            break;
          }
          case 40: {
            EgmPaidGameWinBonusAmount = input.ReadInt64();
            break;
          }
          case 48: {
            EgmPaidBonusCashableInAmount = input.ReadInt64();
            break;
          }
          case 56: {
            EgmPaidBonusNonCashInAmount = input.ReadInt64();
            break;
          }
          case 64: {
            EgmPaidBonusPromoInAmount = input.ReadInt64();
            break;
          }
          case 72: {
            HandPaidGameWinBonusAmount = input.ReadInt64();
            break;
          }
          case 80: {
            HandPaidGameWonAmount = input.ReadInt64();
            break;
          }
          case 88: {
            HandPaidProgWonAmount = input.ReadInt64();
            break;
          }
          case 96: {
            HandPaidBonusCashableInAmount = input.ReadInt64();
            break;
          }
          case 104: {
            HandPaidBonusNonCashInAmount = input.ReadInt64();
            break;
          }
          case 112: {
            HandPaidBonusPromoInAmount = input.ReadInt64();
            break;
          }
          case 120: {
            TrueCoinIn = input.ReadInt64();
            break;
          }
          case 128: {
            CurrencyInAmount = input.ReadInt64();
            break;
          }
          case 136: {
            VoucherInCashableAmount = input.ReadInt64();
            break;
          }
          case 144: {
            VoucherInCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 152: {
            VoucherInNonCashableAmount = input.ReadInt64();
            break;
          }
          case 160: {
            VoucherInNonTransferableAmount = input.ReadInt64();
            break;
          }
          case 168: {
            TrueCoinOut = input.ReadInt64();
            break;
          }
          case 176: {
            VoucherOutCashableAmount = input.ReadInt64();
            break;
          }
          case 184: {
            VoucherOutCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 192: {
            VoucherOutNonCashableAmount = input.ReadInt64();
            break;
          }
          case 200: {
            HandpaidCancelAmount = input.ReadInt64();
            break;
          }
          case 208: {
            CoinDrop = input.ReadInt64();
            break;
          }
          case 216: {
            HandPaidBonusAmount = input.ReadInt64();
            break;
          }
          case 224: {
            EgmPaidBonusAmount = input.ReadInt64();
            break;
          }
          case 232: {
            SecondaryPlayedCount = input.ReadInt64();
            break;
          }
          case 240: {
            SecondaryWageredAmount = input.ReadInt64();
            break;
          }
          case 248: {
            SecondaryWonAmount = input.ReadInt64();
            break;
          }
          case 256: {
            WatOnCashableAmount = input.ReadInt64();
            break;
          }
          case 264: {
            WatOffCashableAmount = input.ReadInt64();
            break;
          }
          case 272: {
            WatOnNonCashableAmount = input.ReadInt64();
            break;
          }
          case 280: {
            WatOffNonCashableAmount = input.ReadInt64();
            break;
          }
          case 288: {
            WatOnCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 296: {
            WatOffCashablePromoAmount = input.ReadInt64();
            break;
          }
          case 304: {
            EgmPaidProgWonAmount = input.ReadInt64();
            break;
          }
          case 312: {
            WageredPromoAmount = input.ReadInt64();
            break;
          }
          case 320: {
            HardMeterOutAmount = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class FreeGame : pb::IMessage<FreeGame>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FreeGame> _parser = new pb::MessageParser<FreeGame>(() => new FreeGame());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FreeGame> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGame() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGame(FreeGame other) : this() {
      startDateTime_ = other.startDateTime_ != null ? other.startDateTime_.Clone() : null;
      endDateTime_ = other.endDateTime_ != null ? other.endDateTime_.Clone() : null;
      startCredits_ = other.startCredits_;
      endCredits_ = other.endCredits_;
      finalWin_ = other.finalWin_;
      result_ = other.result_;
      amountOut_ = other.amountOut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FreeGame Clone() {
      return new FreeGame(this);
    }

    /// <summary>Field number for the "start_date_time" field.</summary>
    public const int StartDateTimeFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp startDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp StartDateTime {
      get { return startDateTime_; }
      set {
        startDateTime_ = value;
      }
    }

    /// <summary>Field number for the "end_date_time" field.</summary>
    public const int EndDateTimeFieldNumber = 2;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endDateTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndDateTime {
      get { return endDateTime_; }
      set {
        endDateTime_ = value;
      }
    }

    /// <summary>Field number for the "start_credits" field.</summary>
    public const int StartCreditsFieldNumber = 3;
    private long startCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long StartCredits {
      get { return startCredits_; }
      set {
        startCredits_ = value;
      }
    }

    /// <summary>Field number for the "end_credits" field.</summary>
    public const int EndCreditsFieldNumber = 4;
    private long endCredits_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long EndCredits {
      get { return endCredits_; }
      set {
        endCredits_ = value;
      }
    }

    /// <summary>Field number for the "final_win" field.</summary>
    public const int FinalWinFieldNumber = 5;
    private long finalWin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long FinalWin {
      get { return finalWin_; }
      set {
        finalWin_ = value;
      }
    }

    /// <summary>Field number for the "result" field.</summary>
    public const int ResultFieldNumber = 6;
    private global::Aristocrat.Monaco.Gaming.Proto.GameResult result_ = global::Aristocrat.Monaco.Gaming.Proto.GameResult.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.GameResult Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "amount_out" field.</summary>
    public const int AmountOutFieldNumber = 7;
    private long amountOut_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long AmountOut {
      get { return amountOut_; }
      set {
        amountOut_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FreeGame);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FreeGame other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartDateTime, other.StartDateTime)) return false;
      if (!object.Equals(EndDateTime, other.EndDateTime)) return false;
      if (StartCredits != other.StartCredits) return false;
      if (EndCredits != other.EndCredits) return false;
      if (FinalWin != other.FinalWin) return false;
      if (Result != other.Result) return false;
      if (AmountOut != other.AmountOut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (startDateTime_ != null) hash ^= StartDateTime.GetHashCode();
      if (endDateTime_ != null) hash ^= EndDateTime.GetHashCode();
      if (StartCredits != 0L) hash ^= StartCredits.GetHashCode();
      if (EndCredits != 0L) hash ^= EndCredits.GetHashCode();
      if (FinalWin != 0L) hash ^= FinalWin.GetHashCode();
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) hash ^= Result.GetHashCode();
      if (AmountOut != 0L) hash ^= AmountOut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startDateTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartDateTime);
      }
      if (endDateTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndDateTime);
      }
      if (StartCredits != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartCredits);
      }
      if (EndCredits != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndCredits);
      }
      if (FinalWin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FinalWin);
      }
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Result);
      }
      if (AmountOut != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AmountOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startDateTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartDateTime);
      }
      if (endDateTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndDateTime);
      }
      if (StartCredits != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartCredits);
      }
      if (EndCredits != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndCredits);
      }
      if (FinalWin != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(FinalWin);
      }
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Result);
      }
      if (AmountOut != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(AmountOut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (startDateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartDateTime);
      }
      if (endDateTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndDateTime);
      }
      if (StartCredits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartCredits);
      }
      if (EndCredits != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndCredits);
      }
      if (FinalWin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinalWin);
      }
      if (Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Result);
      }
      if (AmountOut != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountOut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FreeGame other) {
      if (other == null) {
        return;
      }
      if (other.startDateTime_ != null) {
        if (startDateTime_ == null) {
          StartDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        StartDateTime.MergeFrom(other.StartDateTime);
      }
      if (other.endDateTime_ != null) {
        if (endDateTime_ == null) {
          EndDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndDateTime.MergeFrom(other.EndDateTime);
      }
      if (other.StartCredits != 0L) {
        StartCredits = other.StartCredits;
      }
      if (other.EndCredits != 0L) {
        EndCredits = other.EndCredits;
      }
      if (other.FinalWin != 0L) {
        FinalWin = other.FinalWin;
      }
      if (other.Result != global::Aristocrat.Monaco.Gaming.Proto.GameResult.None) {
        Result = other.Result;
      }
      if (other.AmountOut != 0L) {
        AmountOut = other.AmountOut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startDateTime_ == null) {
              StartDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDateTime);
            break;
          }
          case 18: {
            if (endDateTime_ == null) {
              EndDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndDateTime);
            break;
          }
          case 24: {
            StartCredits = input.ReadInt64();
            break;
          }
          case 32: {
            EndCredits = input.ReadInt64();
            break;
          }
          case 40: {
            FinalWin = input.ReadInt64();
            break;
          }
          case 48: {
            Result = (global::Aristocrat.Monaco.Gaming.Proto.GameResult) input.ReadEnum();
            break;
          }
          case 56: {
            AmountOut = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startDateTime_ == null) {
              StartDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(StartDateTime);
            break;
          }
          case 18: {
            if (endDateTime_ == null) {
              EndDateTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndDateTime);
            break;
          }
          case 24: {
            StartCredits = input.ReadInt64();
            break;
          }
          case 32: {
            EndCredits = input.ReadInt64();
            break;
          }
          case 40: {
            FinalWin = input.ReadInt64();
            break;
          }
          case 48: {
            Result = (global::Aristocrat.Monaco.Gaming.Proto.GameResult) input.ReadEnum();
            break;
          }
          case 56: {
            AmountOut = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class CashOutInfo : pb::IMessage<CashOutInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<CashOutInfo> _parser = new pb::MessageParser<CashOutInfo>(() => new CashOutInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CashOutInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CashOutInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CashOutInfo(CashOutInfo other) : this() {
      amount_ = other.amount_;
      wager_ = other.wager_;
      reason_ = other.reason_;
      handpay_ = other.handpay_;
      complete_ = other.complete_;
      traceId_ = other.traceId_;
      associatedTransactions_ = other.associatedTransactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CashOutInfo Clone() {
      return new CashOutInfo(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "wager" field.</summary>
    public const int WagerFieldNumber = 2;
    private long wager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Wager {
      get { return wager_; }
      set {
        wager_ = value;
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason reason_ = global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason.ReasonCashOut;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason Reason {
      get { return reason_; }
      set {
        reason_ = value;
      }
    }

    /// <summary>Field number for the "handpay" field.</summary>
    public const int HandpayFieldNumber = 4;
    private bool handpay_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Handpay {
      get { return handpay_; }
      set {
        handpay_ = value;
      }
    }

    /// <summary>Field number for the "complete" field.</summary>
    public const int CompleteFieldNumber = 5;
    private bool complete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Complete {
      get { return complete_; }
      set {
        complete_ = value;
      }
    }

    /// <summary>Field number for the "trace_id" field.</summary>
    public const int TraceIdFieldNumber = 6;
    private pb::ByteString traceId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "associated_transactions" field.</summary>
    public const int AssociatedTransactionsFieldNumber = 7;
    private static readonly pb::FieldCodec<long> _repeated_associatedTransactions_codec
        = pb::FieldCodec.ForInt64(58);
    private readonly pbc::RepeatedField<long> associatedTransactions_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<long> AssociatedTransactions {
      get { return associatedTransactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as CashOutInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CashOutInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      if (Wager != other.Wager) return false;
      if (Reason != other.Reason) return false;
      if (Handpay != other.Handpay) return false;
      if (Complete != other.Complete) return false;
      if (TraceId != other.TraceId) return false;
      if(!associatedTransactions_.Equals(other.associatedTransactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Wager != 0L) hash ^= Wager.GetHashCode();
      if (Reason != global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason.ReasonCashOut) hash ^= Reason.GetHashCode();
      if (Handpay != false) hash ^= Handpay.GetHashCode();
      if (Complete != false) hash ^= Complete.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      hash ^= associatedTransactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Amount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amount);
      }
      if (Wager != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Wager);
      }
      if (Reason != global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason.ReasonCashOut) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Reason);
      }
      if (Handpay != false) {
        output.WriteRawTag(32);
        output.WriteBool(Handpay);
      }
      if (Complete != false) {
        output.WriteRawTag(40);
        output.WriteBool(Complete);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(TraceId);
      }
      associatedTransactions_.WriteTo(output, _repeated_associatedTransactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Amount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amount);
      }
      if (Wager != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Wager);
      }
      if (Reason != global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason.ReasonCashOut) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Reason);
      }
      if (Handpay != false) {
        output.WriteRawTag(32);
        output.WriteBool(Handpay);
      }
      if (Complete != false) {
        output.WriteRawTag(40);
        output.WriteBool(Complete);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(TraceId);
      }
      associatedTransactions_.WriteTo(ref output, _repeated_associatedTransactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (Wager != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Wager);
      }
      if (Reason != global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason.ReasonCashOut) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reason);
      }
      if (Handpay != false) {
        size += 1 + 1;
      }
      if (Complete != false) {
        size += 1 + 1;
      }
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TraceId);
      }
      size += associatedTransactions_.CalculateSize(_repeated_associatedTransactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CashOutInfo other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Wager != 0L) {
        Wager = other.Wager;
      }
      if (other.Reason != global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason.ReasonCashOut) {
        Reason = other.Reason;
      }
      if (other.Handpay != false) {
        Handpay = other.Handpay;
      }
      if (other.Complete != false) {
        Complete = other.Complete;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      associatedTransactions_.Add(other.associatedTransactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Amount = input.ReadInt64();
            break;
          }
          case 16: {
            Wager = input.ReadInt64();
            break;
          }
          case 24: {
            Reason = (global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason) input.ReadEnum();
            break;
          }
          case 32: {
            Handpay = input.ReadBool();
            break;
          }
          case 40: {
            Complete = input.ReadBool();
            break;
          }
          case 50: {
            TraceId = input.ReadBytes();
            break;
          }
          case 58:
          case 56: {
            associatedTransactions_.AddEntriesFrom(input, _repeated_associatedTransactions_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Amount = input.ReadInt64();
            break;
          }
          case 16: {
            Wager = input.ReadInt64();
            break;
          }
          case 24: {
            Reason = (global::Aristocrat.Monaco.Gaming.Proto.TransferOutReason) input.ReadEnum();
            break;
          }
          case 32: {
            Handpay = input.ReadBool();
            break;
          }
          case 40: {
            Complete = input.ReadBool();
            break;
          }
          case 50: {
            TraceId = input.ReadBytes();
            break;
          }
          case 58:
          case 56: {
            associatedTransactions_.AddEntriesFrom(ref input, _repeated_associatedTransactions_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Outcome : pb::IMessage<Outcome>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Outcome> _parser = new pb::MessageParser<Outcome>(() => new Outcome());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Outcome> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Outcome() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Outcome(Outcome other) : this() {
      id_ = other.id_;
      gameSetId_ = other.gameSetId_;
      subsetId_ = other.subsetId_;
      reference_ = other.reference_;
      type_ = other.type_;
      value_ = other.value_;
      winLevelIndex_ = other.winLevelIndex_;
      lookupData_ = other.lookupData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Outcome Clone() {
      return new Outcome(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "game_set_id" field.</summary>
    public const int GameSetIdFieldNumber = 2;
    private long gameSetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long GameSetId {
      get { return gameSetId_; }
      set {
        gameSetId_ = value;
      }
    }

    /// <summary>Field number for the "subset_id" field.</summary>
    public const int SubsetIdFieldNumber = 3;
    private long subsetId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SubsetId {
      get { return subsetId_; }
      set {
        subsetId_ = value;
      }
    }

    /// <summary>Field number for the "reference" field.</summary>
    public const int ReferenceFieldNumber = 4;
    private global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference reference_ = global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference.Direct;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference Reference {
      get { return reference_; }
      set {
        reference_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Aristocrat.Monaco.Gaming.Proto.OutcomeType type_ = global::Aristocrat.Monaco.Gaming.Proto.OutcomeType.Standard;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Aristocrat.Monaco.Gaming.Proto.OutcomeType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 6;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "win_level_index" field.</summary>
    public const int WinLevelIndexFieldNumber = 7;
    private int winLevelIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WinLevelIndex {
      get { return winLevelIndex_; }
      set {
        winLevelIndex_ = value;
      }
    }

    /// <summary>Field number for the "lookup_data" field.</summary>
    public const int LookupDataFieldNumber = 8;
    private string lookupData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LookupData {
      get { return lookupData_; }
      set {
        lookupData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Outcome);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Outcome other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GameSetId != other.GameSetId) return false;
      if (SubsetId != other.SubsetId) return false;
      if (Reference != other.Reference) return false;
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (WinLevelIndex != other.WinLevelIndex) return false;
      if (LookupData != other.LookupData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (GameSetId != 0L) hash ^= GameSetId.GetHashCode();
      if (SubsetId != 0L) hash ^= SubsetId.GetHashCode();
      if (Reference != global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference.Direct) hash ^= Reference.GetHashCode();
      if (Type != global::Aristocrat.Monaco.Gaming.Proto.OutcomeType.Standard) hash ^= Type.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (WinLevelIndex != 0) hash ^= WinLevelIndex.GetHashCode();
      if (LookupData.Length != 0) hash ^= LookupData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (GameSetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GameSetId);
      }
      if (SubsetId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SubsetId);
      }
      if (Reference != global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference.Direct) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Reference);
      }
      if (Type != global::Aristocrat.Monaco.Gaming.Proto.OutcomeType.Standard) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (Value != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Value);
      }
      if (WinLevelIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WinLevelIndex);
      }
      if (LookupData.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LookupData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (GameSetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GameSetId);
      }
      if (SubsetId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SubsetId);
      }
      if (Reference != global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference.Direct) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Reference);
      }
      if (Type != global::Aristocrat.Monaco.Gaming.Proto.OutcomeType.Standard) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (Value != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Value);
      }
      if (WinLevelIndex != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(WinLevelIndex);
      }
      if (LookupData.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LookupData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (GameSetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GameSetId);
      }
      if (SubsetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SubsetId);
      }
      if (Reference != global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference.Direct) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Reference);
      }
      if (Type != global::Aristocrat.Monaco.Gaming.Proto.OutcomeType.Standard) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Value);
      }
      if (WinLevelIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WinLevelIndex);
      }
      if (LookupData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LookupData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Outcome other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.GameSetId != 0L) {
        GameSetId = other.GameSetId;
      }
      if (other.SubsetId != 0L) {
        SubsetId = other.SubsetId;
      }
      if (other.Reference != global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference.Direct) {
        Reference = other.Reference;
      }
      if (other.Type != global::Aristocrat.Monaco.Gaming.Proto.OutcomeType.Standard) {
        Type = other.Type;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.WinLevelIndex != 0) {
        WinLevelIndex = other.WinLevelIndex;
      }
      if (other.LookupData.Length != 0) {
        LookupData = other.LookupData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            GameSetId = input.ReadInt64();
            break;
          }
          case 24: {
            SubsetId = input.ReadInt64();
            break;
          }
          case 32: {
            Reference = (global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference) input.ReadEnum();
            break;
          }
          case 40: {
            Type = (global::Aristocrat.Monaco.Gaming.Proto.OutcomeType) input.ReadEnum();
            break;
          }
          case 48: {
            Value = input.ReadInt64();
            break;
          }
          case 56: {
            WinLevelIndex = input.ReadInt32();
            break;
          }
          case 66: {
            LookupData = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            GameSetId = input.ReadInt64();
            break;
          }
          case 24: {
            SubsetId = input.ReadInt64();
            break;
          }
          case 32: {
            Reference = (global::Aristocrat.Monaco.Gaming.Proto.OutcomeReference) input.ReadEnum();
            break;
          }
          case 40: {
            Type = (global::Aristocrat.Monaco.Gaming.Proto.OutcomeType) input.ReadEnum();
            break;
          }
          case 48: {
            Value = input.ReadInt64();
            break;
          }
          case 56: {
            WinLevelIndex = input.ReadInt32();
            break;
          }
          case 66: {
            LookupData = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class GameRoundDetails : pb::IMessage<GameRoundDetails>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GameRoundDetails> _parser = new pb::MessageParser<GameRoundDetails>(() => new GameRoundDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GameRoundDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Aristocrat.Monaco.Gaming.Proto.GameHistoryLogReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameRoundDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameRoundDetails(GameRoundDetails other) : this() {
      presentationIndex_ = other.presentationIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GameRoundDetails Clone() {
      return new GameRoundDetails(this);
    }

    /// <summary>Field number for the "presentation_index" field.</summary>
    public const int PresentationIndexFieldNumber = 1;
    private long presentationIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long PresentationIndex {
      get { return presentationIndex_; }
      set {
        presentationIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GameRoundDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GameRoundDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PresentationIndex != other.PresentationIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PresentationIndex != 0L) hash ^= PresentationIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PresentationIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PresentationIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PresentationIndex != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PresentationIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PresentationIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PresentationIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GameRoundDetails other) {
      if (other == null) {
        return;
      }
      if (other.PresentationIndex != 0L) {
        PresentationIndex = other.PresentationIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PresentationIndex = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PresentationIndex = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
