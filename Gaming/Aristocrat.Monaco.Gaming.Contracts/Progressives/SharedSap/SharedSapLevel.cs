namespace Aristocrat.Monaco.Gaming.Contracts.Progressives.SharedSap
{
    using System;
    using System.Collections.Generic;
    using System.Text;
    using Models;

    /// <summary>
    ///     Shared Sap Levels are standalone progressives that can be generated from a progressive xml via
    ///     associative SAP or created via an operator through the operator menu. In both cases, a shared sap
    ///     level is a standalone progressive level that is shared across multiple games. 
    /// </summary>
    public class SharedSapLevel : IViewableSharedSapLevel
    {
        /// <summary>
        ///     Gets the unique identifier for the level
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        ///     Gets or sets the level id for the selectable progressive level.
        /// </summary>
        public int LevelId { get; set; }

        /// <summary>
        ///     Gets or sets the level name.
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        ///     Gets or sets the game types associated with progressive level
        /// </summary>
        public IEnumerable<GameType> SupportedGameTypes { get; set; }

        /// <summary>
        ///     Gets or sets the initial value. 
        /// </summary>
        public long InitialValue { get; set; }

        /// <summary>
        ///     Gets or sets the reset value
        /// </summary>
        public long ResetValue { get; set; }

        /// <summary>
        ///     Gets or sets the increment rate
        /// </summary>
        public long IncrementRate { get; set; }

        /// <summary>
        ///     Gets or sets the maximum value
        /// </summary>
        public long MaximumValue { get; set; }

        /// <summary>
        ///     Gets or sets the current progressive level
        /// </summary>
        public long CurrentValue { get; set; }

        /// <summary>
        ///     Gets or sets the hidden increment rate
        /// </summary>
        public long HiddenIncrementRate { get; set; }

        /// <summary>
        ///     The total value of the hidden pool (in millicents) which will be added after JP hit and reset
        /// </summary>
        public long HiddenValue { get; set; }

        /// <summary>
        ///     Gets or sets the accumulated hidden amount
        /// </summary>
        public long HiddenTotal { get; set; }

        /// <summary>
        ///     Gets or sets the residual or fractional amount
        /// </summary>
        public long Residual { get; set; }

        /// <summary>
        ///     Gets or sets the overflow amount
        /// </summary>
        public long Overflow { get; set; }

        /// <summary>
        ///     Gets or sets the accumulated overflow amount
        /// </summary>
        public long OverflowTotal { get; set; }

        /// <summary>
        ///     Gets or sets the accumulated bulk amount
        /// </summary>
        public long BulkTotal { get; set; }

        /// <summary>
        ///     Gets or set the current error status
        /// </summary>
        public ProgressiveErrors CurrentErrorStatus { get; set; }

        /// <summary>
        ///     Gets a boolean value that determines if the level can be edited.
        /// </summary>
        public bool CanEdit { get; set; } = true;

        /// <summary>
        ///     Gets a boolean value indicating if the level was auto-generated
        /// </summary>
        public bool AutoGenerated { get; set; }

        /// <summary>
        ///     Gets or sets the date and time that the level was created
        /// </summary>
        public DateTime CreatedDateTime { get; set; }

        /// <inheritdoc />
        public string LevelAssignmentKey => Id.ToString("B");

        /// <summary>
        ///     Gets the string value of the progressive level
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return "SharedProgressiveLevel: " +
                   $"Id={Id}, " +
                   $"Name={Name}, " +
                   $"LevelId={LevelId}, " +
                   $"GameTypes={GameTypesToStrings()} " +
                   $"InitialValue={InitialValue}," +
                   $"ResetValue={ResetValue}," +
                   $"CurrentValue={CurrentValue}," +
                   $"IncrementRate={IncrementRate}, " +
                   $"HiddenIncrementRate={HiddenIncrementRate}," +
                   $"HiddenTotal={HiddenTotal}" +
                   $"BulkTotal={BulkTotal}" +
                   $"MaxValue={MaximumValue}, " +
                   $"CurrentErrorStatus={CurrentErrorStatus}, " +
                   $"CanEdit={CanEdit}, " +
                   $"AutoGenerated={AutoGenerated}, " +
                   $"CreatedDateTime={CreatedDateTime}";
        }

        private string GameTypesToStrings()
        {
            var gameTypesString = new StringBuilder();

            foreach (var gameTypes in SupportedGameTypes)
            {
                gameTypesString.Append($"{gameTypes}, ");
            }

            return gameTypesString.ToString();
        }
    }
}