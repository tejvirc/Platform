namespace Aristocrat.Monaco.Gaming.Contracts.Progressives.SharedSap
{
    using System;
    using System.Collections.Generic;
    using Models;

    /// <summary>
    ///     Provides an interface for a read-only view into a <see cref="SharedSapLevel"/>
    /// </summary>
    public interface IViewableSharedSapLevel : IAssignableLevel
    {
        /// <summary>
        ///     Gets the unique identifier for the level
        /// </summary>
        Guid Id { get; }

        /// <summary>
        ///     Gets the id for the shared sap level.
        /// </summary>
        int LevelId { get; }

        /// <summary>
        ///     Gets the level name. 
        /// </summary>
        string Name { get; }

        /// <summary>
        ///     Gets the game types associated with progressive level
        /// </summary>
        IEnumerable<GameType> SupportedGameTypes { get; }

        /// <summary>
        ///     Gets the initial value. 
        /// </summary>
        long InitialValue { get; }

        /// <summary>
        ///     Gets the reset value
        /// </summary>
        long ResetValue { get; }

        /// <summary>
        ///     Gets the increment rate
        /// </summary>
        long IncrementRate { get; }

        /// <summary>
        ///     Gets the maximum value
        /// </summary>
        long MaximumValue { get; }

        /// <summary>
        ///     Gets the hidden increment rate
        /// </summary>
        long HiddenIncrementRate { get; }

        /// <summary>
        ///     The total value of the hidden pool (in millicents) which will be added after JP hit and reset
        /// </summary>
        long HiddenTotal { get; }

        /// <summary>
        ///     Gets the current value of the progressive level
        /// </summary>
        long CurrentValue { get; }

        /// <summary>
        ///     Gets the residual or fractional amount
        /// </summary>
        long Residual { get; }

        /// <summary>
        ///     Gets the overflow amount
        /// </summary>
        long Overflow { get; }

        /// <summary>
        ///     The total accumulated value of the overflow amounts over the life of the machine (in millicents)
        /// </summary>
        long OverflowTotal { get; }

        /// <summary>
        ///     Gets the current error status
        /// </summary>
        ProgressiveErrors CurrentErrorStatus { get; }

        /// <summary>
        ///     Gets a boolean value indicating if the level can be edited
        /// </summary>
        bool CanEdit { get; }

        /// <summary>
        ///     Gets a boolean value indicating if the level was auto-generated
        /// </summary>
        bool AutoGenerated { get; }

        /// <summary>
        ///     Gets the date and time that the level was created
        /// </summary>
        DateTime CreatedDateTime { get; }
    }
}