<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Application.UI.Views.SoundConfigPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Application.UI.ViewModels"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                               xmlns:common="http://monaco.aristocrat.com/common"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu"
                               xmlns:local="clr-namespace:Aristocrat.Monaco.Application.UI.Views"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               mc:Ignorable="d"
                               common:DialogParticipation.Register="{Binding}"
                               d:DataContext="{d:DesignInstance viewModels:SoundConfigPageViewModel, IsDesignTimeCreatable=False}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <Grid AutomationProperties.AutomationId="Grid0_529054B4">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"
                           AutomationProperties.AutomationId="RowDefinition1_529054B4" />
            <RowDefinition Height="*"
                           AutomationProperties.AutomationId="RowDefinition2_529054B4" />
            <RowDefinition Height="Auto"
                           AutomationProperties.AutomationId="RowDefinition3_529054B4" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"
                              AutomationProperties.AutomationId="ColumnDefinition4_529054B4" />
            <ColumnDefinition Width="*"
                              AutomationProperties.AutomationId="ColumnDefinition5_529054B4" />
        </Grid.ColumnDefinitions>
        <local:VolumeControl Grid.Row="0"
                             DataContext="{Binding VolumeViewModel}"
                             AutomationProperties.AutomationId="VolumeControl1_529054B4" />
        <StackPanel Grid.Row="1" Margin="0 10"
                    VerticalAlignment="Top"
                    HorizontalAlignment="Left"
                    Visibility="{Binding IsAlertConfigurable, Converter={StaticResource TrueVisibleFalseCollapsed}}"
                    AutomationProperties.AutomationId="StackPanel9_529054B4">
            <Label Content="{lex:Loc Key={x:Static loc:ResourceKeys.AlertVolumeLabel}}"
                   VerticalAlignment="Center" HorizontalAlignment="Left"
                   AutomationProperties.AutomationId="Label10_529054B4" />
            <Slider x:Name="AlertSlider"
                    Style="{StaticResource MonacoSlider}"
                    Value="{Binding AlertVolume}"
                    MinWidth="400"
                    HorizontalAlignment="Left"
                    Minimum="{Binding AlertMinimumVolume}"
                    Maximum="100"
                    TickFrequency="{Binding AlertVolumeTickFrequency}"
                    IsSnapToTickEnabled="True"
                    IsEnabled="{Binding Path=VolumeViewModel.CanEditVolume}"
                    AutomationProperties.AutomationId="Slider11_529054B4" />
        </StackPanel>
        <local:SoundTestPage x:Name="TestControl"
                             Grid.Row="0"
                             Grid.Column="1"
                             DataContext="{Binding TestViewModel}"
                             Visibility="{Binding Visibility, ElementName=ExitTestModeButton}"/>
        <StackPanel Grid.Row="2" Margin="0 10"
                    VerticalAlignment="Bottom"
                    Orientation="Horizontal"
                    HorizontalAlignment="Left"
                    Visibility="{Binding IsWizardPage, Converter={StaticResource TrueHiddenFalseVisible}}"
                    AutomationProperties.AutomationId="StackPanel13_529054B4">
            <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.EnterSoundTest}}"
                    Command="{Binding ToggleTestModeCommand}"
                    Visibility="{Binding InTestMode, Converter={StaticResource TrueCollapsedFalseVisible}}"
                    AutomationProperties.AutomationId="Button14_529054B4" />
            <Button Name="ExitTestModeButton"
                    Content="{lex:Loc Key={x:Static loc:ResourceKeys.ExitSoundTest}}"
                    Command="{Binding ToggleTestModeCommand}"
                    Visibility="{Binding InTestMode, Converter={StaticResource TrueVisibleFalseCollapsed}}"
                    AutomationProperties.AutomationId="Button15_529054B4" />
            <Button Name="WarningButton"
                    Style="{StaticResource MonacoWarningButton}"
                    Command="{Binding ShowInfoPopupCommand}"
                    Visibility="{Binding TestModeEnabled, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource TrueCollapsedFalseVisible}}"
                    AutomationProperties.AutomationId="Button16_529054B4">
                <Button.CommandParameter>
                    <MultiBinding Converter="{StaticResource MultiValueConverter}">
                        <Binding ElementName="WarningButton" />
                        <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Control}"
                                 Path="DataContext.TestWarningText" />
                    </MultiBinding>
                </Button.CommandParameter>
            </Button>
        </StackPanel>
    </Grid>
</operatorMenu:OperatorMenuPage>