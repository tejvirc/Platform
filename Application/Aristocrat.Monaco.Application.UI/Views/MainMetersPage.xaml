<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Application.UI.Views.MainMetersPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               Background="Transparent"
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Application.UI.ViewModels"
                               xmlns:common="clr-namespace:Aristocrat.Monaco.UI.Common;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               lex:ResxLocalizationProvider.DefaultAssembly="Aristocrat.Monaco.Localization"
                               lex:ResxLocalizationProvider.DefaultDictionary="Resources" 
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               mc:Ignorable="d"
                               d:DataContext="{d:DesignInstance {x:Type viewModels:MainMetersPageViewModel}}"
                               common:DialogParticipation.Register="{Binding}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid x:Name="MainGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <!-- Meters Table Section -->
        <Grid x:Name="Meters" Grid.Row="0">
            <Grid.RowDefinitions>
                <RowDefinition Height="*" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <!-- Fill in the space when we're hiding the right column. -->
                <ColumnDefinition>
                    <ColumnDefinition.Style>
                        <Style>
                            <Setter Property="ColumnDefinition.Width" Value="Auto"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ShowRightColumn}" Value="False">
                                    <Setter Property="ColumnDefinition.Width" Value="*"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ColumnDefinition.Style>
                </ColumnDefinition>
                <!-- Set Width to zero when we're hiding the right column. -->
                <ColumnDefinition>
                    <ColumnDefinition.Style>
                        <Style>
                            <Setter Property="ColumnDefinition.Width" Value="*"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ShowRightColumn}" Value="False">
                                    <Setter Property="ColumnDefinition.Width" Value="0"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </ColumnDefinition.Style>
                </ColumnDefinition>
            </Grid.ColumnDefinitions>

            <!-- Left Meter Column Section -->
            <DataGrid x:Name="LeftMeterGrid"
                      Grid.Row="0"
                      Grid.Column="0"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      ItemsSource="{Binding MetersLeftColumn}" 
                      Margin="0 -20 0 0" >

                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource MonacoDataGridRow}" >
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HideRowForPeriod}" Value="True" >
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>

                <DataGrid.Columns>
                    <DataGridTextColumn Header="{lex:Loc Meter}" 
                                        Width="360"
                                        Binding="{Binding Name}" />
                    <DataGridTextColumn Header="{lex:Loc Value}" 
                                        Width="200"
                                        Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged}" 
                                        HeaderStyle="{StaticResource DataGridColumnHeaderRight}"
                                        CellStyle="{StaticResource DataGridCellRight}" />
                </DataGrid.Columns>
            </DataGrid>

            <!-- Right Meter Column Section -->
            <DataGrid x:Name="RightMeterGrid" 
                      Grid.Row="0" 
                      Grid.Column="1" 
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      ItemsSource="{Binding MetersRightColumn}" 
                      Margin="60 -20 0 0"
                      Width="650"
                      Visibility="{Binding ShowRightColumn, Converter={StaticResource BoolToVisHiddenConverter}}" >

                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow" BasedOn="{StaticResource MonacoDataGridRow}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding HideRowForPeriod}" Value="True" >
                                <Setter Property="Visibility" Value="Collapsed" />
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </DataGrid.RowStyle>

                <DataGrid.Columns>
                    <DataGridTextColumn Header="{lex:Loc Meter}" 
                                        Width="380"
                                        Binding="{Binding Name}" />
                    <DataGridTextColumn Header="{lex:Loc Value}" 
                                        Width="200"
                                        Binding="{Binding Value, UpdateSourceTrigger=PropertyChanged}" 
                                        HeaderStyle="{StaticResource DataGridColumnHeaderRight}"
                                        CellStyle="{StaticResource DataGridCellRight}" />
                </DataGrid.Columns>
            </DataGrid>
        </Grid>

        <!-- Button Section -->
        <StackPanel Grid.Row="1" 
                    Orientation="Horizontal" 
                    Margin="0 15 0 0">
            <Button Margin="0 0 15 0" 
                    Width="250"
                    Command="{Binding ClearPeriodCommand}"
                    Content="{lex:Loc ClearPeriodButtonTex}"
                    IsEnabled="{Binding ClearButtonEnabled, UpdateSourceTrigger=PropertyChanged}"
                    Visibility="{Binding ClearPeriodMetersButtonIsVisible, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Margin="0 0 15 0" 
                    Width="250"
                    Content="{lex:Loc PrintVerificationButtonText}"
                    Command="{Binding PrintVerificationButtonClickedCommand}"
                    IsEnabled="{Binding PrinterButtonsEnabled}"
                    Visibility="{Binding PrintVerificationButtonIsVisible, Converter={StaticResource BoolToVisConverter}}"/>
            <Button Margin="0 0 15 0" 
                    Width="250"
                    Content="{lex:Loc PrintPeriodicResetButtonText}"
                    Command="{Binding PrintPeriodicResetButtonClickedCommand}"
                    IsEnabled="{Binding PrinterButtonsEnabled}"/>
            <Button Margin="0 0 15 0" 
                    Width="250"
                    Content="{lex:Loc PrintAuditTicketButtonText}"
                    Command="{Binding PrintAuditTicketButtonClickedCommand}"
                    IsEnabled="{Binding PrinterButtonsEnabled}"
                    Visibility="{Binding PrintAuditTicketButtonIsVisible, Converter={StaticResource BoolToVisConverter}}"/>

            <Label HorizontalAlignment="Left" 
                   VerticalAlignment="Center"
                   Content="{Binding DropMessageLabelText}"/>
        </StackPanel>
    </Grid>
</operatorMenu:OperatorMenuPage>

