<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Application.UI.Views.NoteAcceptorPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                               xmlns:extensions="clr-namespace:Aristocrat.Monaco.UI.Common.Extensions;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Application.UI.ViewModels.NoteAcceptor"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu"
                               xmlns:common="clr-namespace:Aristocrat.Monaco.UI.Common;assembly=Aristocrat.Monaco.UI.Common"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               lex:ResxLocalizationProvider.DefaultAssembly="Aristocrat.Monaco.Localization"
                               lex:ResxLocalizationProvider.DefaultDictionary="Resources" 
                               xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                               xmlns:helpers="http://monaco.aristocrat.com/common"
                               mc:Ignorable="d"
                               d:DataContext="{d:DesignInstance viewModels:NoteAcceptorViewModel, IsDesignTimeCreatable=False}"
                               Background="Transparent"
                               common:DialogParticipation.Register="{Binding}"
                               Loaded="NoteAcceptorPage_Loaded">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>
            
            <Style TargetType="Label" BasedOn="{StaticResource MonacoLabel}">
                <Setter Property="Margin" Value="0 0 10 10" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style TargetType="TextBlock" BasedOn="{StaticResource MonacoTextBlock}">
                <Setter Property="Margin" Value="0 0 0 10" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style TargetType="CheckBox" BasedOn="{StaticResource MonacoCheckBox}">
                <Setter Property="Margin" Value="10 10 10 0" />
            </Style>

            <Style TargetType="Button" BasedOn="{StaticResource MonacoButton}">
                <Setter Property="Margin" Value="0 15 15 0" />
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Width" Value="200"/>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>

    <AdornerDecorator>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto" MinHeight="350"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <Grid Grid.Row="0" Name="NoteAcceptorInfo">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="0" Content="{lex:Loc ManufacturerLabel}"/>
                <TextBlock Grid.Row="0" Grid.Column="1" Foreground="{Binding ManufacturerForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ManufacturerText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding ManufacturerText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="1" Grid.Column="0" Content="{lex:Loc ModelLabel}"/>
                <TextBlock Grid.Row="1" Grid.Column="1" Foreground="{Binding ModelForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ModelText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding ModelText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="2" Grid.Column="0" Content="{lex:Loc ProtocolLabel}"/>
                <TextBlock Grid.Row="2" Grid.Column="1" Foreground="{Binding ProtocolForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ProtocolText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding ProtocolText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="3" Grid.Column="0" Content="{lex:Loc Port}"/>
                <TextBlock Grid.Row="3" Grid.Column="1" Foreground="{Binding PortForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding PortText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding PortText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="4" Grid.Column="0" Content="{lex:Loc SerialNumberLabel}"/>
                <TextBlock Grid.Row="4" Grid.Column="1" Foreground="{Binding SerialNumberForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding SerialNumberText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding SerialNumberText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="5" Grid.Column="0" Content="{lex:Loc FirmwareVersionLabel}"/>
                <TextBlock Grid.Row="5" Grid.Column="1" Foreground="{Binding FirmwareVersionForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FirmwareVersionText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding FirmwareVersionText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="6" Grid.Column="0" Content="{lex:Loc FirmwareRevisionLabel}"/>
                <TextBlock Grid.Row="6" Grid.Column="1" Foreground="{Binding FirmwareRevisionForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FirmwareRevisionText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding FirmwareRevisionText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label Grid.Row="7" Grid.Column="0" Content="{lex:Loc FirmwareCRCLabel}"/>
                <TextBlock Grid.Row="7" Grid.Column="1" Foreground="{Binding FirmwareCrcForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding FirmwareCrcText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding FirmwareCrcText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label  Grid.Row="8" Grid.Column="0" Content="{lex:Loc VariantNameLabel}"/>
                <TextBlock Grid.Row="8" Grid.Column="1" Foreground="{Binding VariantNameForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding VariantNameText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding VariantNameText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

                <Label  Grid.Row="9" Grid.Column="0" Content="{lex:Loc VariantVersionLabel}"/>
                <TextBlock Grid.Row="9" Grid.Column="1" Foreground="{Binding VariantVersionForeground}">
                    <TextBlock.Style>
                        <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding VariantVersionText, Mode=OneWay, TargetNullValue=''}" Value="">
                                    <Setter Property="Text" Value="{lex:BLoc NotAvailable}"/>
                                </DataTrigger>
                            </Style.Triggers>
                            <Setter Property="Text" Value="{Binding VariantVersionText, Mode=OneWay}"/>
                        </Style>
                    </TextBlock.Style>
                </TextBlock>

            </Grid>

            <Grid Grid.Row="0" Grid.RowSpan="2" Grid.Column= "1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>

                <Label Grid.Row="0" Grid.Column="0" Content="{lex:Loc StateLabel}"/>
                <TextBlock Grid.Row="0" Grid.Column="1" Text="{Binding StateText}"
                           Foreground="{Binding StateForeground}"/>

                <Label Grid.Row="1" Grid.Column="0" Content="{lex:Loc LastDocumentResultLabel}"/>
                <TextBlock Grid.Row="1" Grid.Column="1" Text="{Binding LastDocumentResultText}"/>

                <Label Grid.Row="2" Grid.Column="0" Content="{lex:Loc StackerLabel}"/>
                <TextBlock Grid.Row="2" Grid.Column="1" Text="{Binding StackerStateText}"/>

                <Label Grid.Row="3" Grid.Column="0" Content="{lex:Loc SelfTestLabel}"/>
                <TextBlock Grid.Row="3" Grid.Column="1" Text="{Binding SelfTestText}" 
                           Visibility="{Binding SelfTestStatusVisible, Converter={StaticResource TrueVisibleFalseCollapsed}, FallbackValue=Hidden}" 
                           Foreground="{Binding SelfTestForeground}"/>

                <Label Grid.Row="4" Grid.Column="0" Content="{lex:Loc ActivationTimeLabel}"  
                       Visibility="{Binding ActivationVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"/>
                <TextBlock Grid.Row="4" Grid.Column="1" Text="{Binding ActivationTime}" 
                           Foreground="{Binding ActivationForeground}"
                           Visibility="{Binding ActivationVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"/>

                <Label Grid.Row="5" Grid.Column="0" Content="{lex:Loc StatusLabel}" VerticalAlignment="Top"/>
                <TextBlock Grid.Row="5" Grid.Column="1" Text="{Binding StatusText}"  VerticalAlignment="Top" 
                           Foreground="{Binding StatusForeground}"/>

                <Label Grid.Row="6" Grid.Column="0" Content="{lex:Loc VoucherIn}"/>
                <TextBlock Grid.Row="6" Grid.Column="1" Text="{Binding VoucherInEnabledText}"
                           Foreground="{Binding VoucherInEnabledTextForeground}"/>

                <Label Grid.Row="7" Grid.Column="0" Margin="0,20,10,0" Content="{lex:Loc BillAcceptanceLimit}" Visibility="{Binding HideBillAcceptorLimitField, Converter={StaticResource TrueCollapsedFalseVisible}}"/>
                <StackPanel Grid.Row="7" Grid.Column="1" Orientation="Horizontal"  Margin="0,0,10,0"  HorizontalAlignment="Left"
                        Visibility="{Binding HideBillAcceptorLimitField, Converter={StaticResource TrueCollapsedFalseVisible}}">
                    <CheckBox IsChecked="{Binding BillAcceptanceLimitIsChecked, Mode=TwoWay}" VerticalAlignment="Center">
                        <CheckBox.IsEnabled >
                            <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                <Binding Path="InputEnabled"/>
                                <Binding Path="CanEditBillAcceptanceLimit"/>
                            </MultiBinding>
                        </CheckBox.IsEnabled>
                    </CheckBox>
                    <helpers:CurrencyTextBox Number="{Binding Path=BillAcceptanceLimit, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True, NotifyOnValidationError=True}"
                                         Margin="0 10 0 0"
                                         Width="200" VerticalAlignment="Center"
                                         PreventNegatives="True"
                                         Visibility="{Binding BillAcceptanceLimitIsChecked, Converter={StaticResource TrueVisibleFalseCollapsed}, UpdateSourceTrigger=PropertyChanged}" >
                        <helpers:CurrencyTextBox.IsEnabled >
                            <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                <Binding Path="InputEnabled"/>
                                <Binding Path="CanEditBillAcceptanceLimit"/>
                            </MultiBinding>
                        </helpers:CurrencyTextBox.IsEnabled>
                    </helpers:CurrencyTextBox>
                    <TextBlock Margin="0 30 0 20"
                           VerticalAlignment="Center"
                           Text="{lex:Loc NoLimit}"
                           Visibility="{Binding BillAcceptanceLimitIsChecked, Converter={StaticResource TrueHiddenFalseVisible}, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>

                <Label Grid.Row="8" Grid.Column="0" Margin="0 15 10 0" Content="{lex:Loc ExcessiveRejectDisable}"
                       Visibility="{Binding ExcessiveRejectDisableIsVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"/>
                <controls:ToggleSwitch Grid.Row="8" Grid.Column="1" Margin="0 15 0 0"
                                             Visibility="{Binding ExcessiveRejectDisableIsVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"
                                             controls:ControlsHelper.ContentCharacterCasing="Upper"
                                             controls:ControlsHelper.CornerRadius="0"
                                             helpers:ToggleSwitchButtonHelper.OffContent="{lex:Loc Off}"
                                             helpers:ToggleSwitchButtonHelper.OnContent="{lex:Loc On}">
                    <controls:ToggleSwitch.IsEnabled>
                        <MultiBinding Converter="{StaticResource BoolAndConverter}">
                            <Binding Path="IsNoteAcceptorConnected" />
                            <Binding Path="InputEnabledByRuleOverride" />
                        </MultiBinding>
                    </controls:ToggleSwitch.IsEnabled>
                </controls:ToggleSwitch>

            </Grid>

            <Grid Grid.Row="1" Grid.Column="0" Grid.ColumnSpan="2" Margin="0,20,0,0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <Label Grid.Row="0" Content="{lex:Loc EnabledDenominationsLabel}"/>
                <CheckBox Grid.Row="1"
                          Name="CheckBoxAllDenomsSelection"
                          IsChecked="{Binding AllowBillIn}"
                          Margin="21,10,0,0"
                          Content="{lex:Loc AllowBillInLabel}">
                    <CheckBox.IsEnabled>
                        <MultiBinding Converter="{StaticResource BoolAndConverter}">
                            <Binding Path="AllowBillInEnabled" />
                            <Binding ElementName="NoteAcceptorInfo" Path="DataContext.CanEgmModifyDenominations" />
                        </MultiBinding>
                    </CheckBox.IsEnabled>
                </CheckBox>
                <ListBox Grid.Row="2" ItemsSource="{Binding Denominations}" 
                         Style="{StaticResource MonacoListBox}"
                         Visibility="{Binding IsChecked, ElementName=CheckBoxAllDenomsSelection, Converter={StaticResource TrueVisibleFalseCollapsed}, FallbackValue=Collapsed}"
                         Margin="0 10 0 0"
                         ItemContainerStyle="{StaticResource MonacoUnselectableListBoxItem}">
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <CheckBox HorizontalAlignment="Center" 
                                      Visibility="{Binding Visible, Converter={StaticResource TrueVisibleFalseCollapsed}, FallbackValue=Collapsed}" 
                                      IsChecked="{Binding Selected}"
                                      Content="{Binding DisplayValue}">
                                <CheckBox.IsEnabled>
                                    <MultiBinding Converter="{StaticResource BoolAndConverter}">
                                        <Binding Path="Enabled" />
                                        <Binding ElementName="NoteAcceptorInfo" Path="DataContext.CanEgmModifyDenominations" />
                                    </MultiBinding>
                                </CheckBox.IsEnabled>
                            </CheckBox>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Grid>

            <!-- Main grid row 2 consists of 4 rows of buttons. -->
            <Grid Grid.Row="2" Grid.Column="0" Margin="0,15,0,0" VerticalAlignment="Bottom">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                
                <Button Grid.Row="0" Grid.Column="0" Name="SelfTestButton"
                        Content="{lex:Loc SelfTestLabel}"
                        Visibility="{Binding SelfTestButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}" 
                        IsEnabled="{Binding SelfTestButtonEnabled}" 
                        Command="{Binding SelfTestButtonCommand}"/>
                <Button Grid.Row="0" Grid.Column="1" 
                        Content="{lex:Loc SelfTestClearNVM}" 
                        Visibility="{Binding SelfTestClearNvmButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}" 
                        IsEnabled="{Binding SelfTestButtonEnabled}" 
                        Command="{Binding SelfTestClearButtonCommand}" />

                <Button Grid.Row="1" Grid.Column="0"
                        Content="{lex:Loc InspectButton}"
                        Visibility="{Binding InspectButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}" 
                        extensions:FocusExtension.IsFocused="{Binding InspectButtonFocused}"
                        Command="{Binding InspectButtonCommand}" />

                <Button Grid.Row="2" Grid.Column="0" 
                        IsEnabled="{Binding ReturnButtonEnabled}" 
                        Content="{lex:Loc ReturnButton}"
                        Visibility="{Binding ReturnButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}" 
                        Command="{Binding ReturnButtonCommand}" />
                <Button Grid.Row="2" Grid.Column="1" 
                        IsEnabled="{Binding StackButtonEnabled}" 
                        Command="{Binding StackButtonCommand}"
                        Visibility="{Binding StackButtonVisible, Converter={StaticResource TrueVisibleFalseCollapsed}}"
                        Content="{lex:Loc StackButton}" />

                <Button Grid.Row="3" Grid.Column="0" Content="{lex:Loc NoteAcceptorTest}" 
                        Command="{Binding NoteAcceptorTestCommand}"
                        IsEnabled="{Binding TestModeEnabled}" />
                <Button Grid.Row="3" Grid.Column="1" Margin="0 15 0 0" HorizontalAlignment="Left"
                        Name="WarningButton" Style="{StaticResource MonacoWarningButton}"
                        Command="{Binding ShowInfoPopupCommand}"
                        Visibility="{Binding TestModeToolTipDisabled, Converter={StaticResource TrueHiddenFalseVisible}}">
                    <Button.CommandParameter>
                        <MultiBinding Converter="{StaticResource MultiValueConverter}">
                            <Binding ElementName="WarningButton"/>
                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Control}" Path="DataContext.TestWarningText" />
                        </MultiBinding>
                    </Button.CommandParameter>
                </Button>
            </Grid>
        </Grid>
    </AdornerDecorator>
</operatorMenu:OperatorMenuPage>

