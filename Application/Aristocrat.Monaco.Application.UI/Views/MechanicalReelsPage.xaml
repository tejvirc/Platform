<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Application.UI.Views.MechanicalReelsPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Application.UI.ViewModels"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               xmlns:models="clr-namespace:Aristocrat.Monaco.Application.UI.Models"
                               xmlns:views="clr-namespace:Aristocrat.Monaco.Application.UI.Views"
                               xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                               mc:Ignorable="d" 
                               Background="Transparent"
                               d:DataContext="{d:DesignInstance {x:Type viewModels:MechanicalReelsPageViewModel}}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/Styles.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style TargetType="Label" BasedOn="{StaticResource MonacoLabel}">
                <Setter Property="Margin" Value="0 0 10 10" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style TargetType="TextBlock" BasedOn="{StaticResource MonacoTextBlock}">
                <Setter Property="Margin" Value="0 0 0 10" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style TargetType="CheckBox" BasedOn="{StaticResource MonacoCheckBox}">
                <Setter Property="Margin" Value="16 0 0 5" />
            </Style>

            <Style TargetType="Button" BasedOn="{StaticResource MonacoButton}">
                <Setter Property="Margin" Value="5 5 5 5" />
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Width" Value="200"/>
            </Style>

            <Style TargetType="TextBox" BasedOn="{StaticResource MonacoTextBox}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="MinWidth" Value="40"/>
                <Setter Property="Margin" Value="16 5 0 5" />
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
        </Grid.ColumnDefinitions>

        <StackPanel Grid.Row="0">
            <!-- Main Page -->
            <StackPanel Visibility="{Binding SettingsScreenHidden, Converter={StaticResource TrueCollapsedFalseVisible}}">
                <!-- Device information -->
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <Border Grid.Row="0" Grid.Column="0">
                        <Grid Name="MechanicalReelsInfo">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Label Grid.Row="0" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.ManufacturerLabel}}" />
                            <TextBlock Grid.Row="0" Grid.Column="1" Foreground="{Binding ManufacturerForeground}" Margin="10 0 0 0">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ManufacturerText, Mode=OneWay, TargetNullValue=''}" Value="">
                                                <Setter Property="Text" Value="{lex:BLoc Key={x:Static loc:ResourceKeys.NotAvailable}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Text" Value="{Binding ManufacturerText, Mode=OneWay}"/>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <Label Grid.Row="1" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.ModelLabel}}" />
                            <TextBlock Grid.Row="1" Grid.Column="1" Foreground="{Binding ModelForeground}" Margin="10 0 0 0">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ModelText, Mode=OneWay, TargetNullValue=''}" Value="">
                                                <Setter Property="Text" Value="{lex:BLoc Key={x:Static loc:ResourceKeys.NotAvailable}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Text" Value="{Binding ModelText, Mode=OneWay}"/>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <Label Grid.Row="2" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.FirmwareVersionLabel}}" />
                            <TextBlock Grid.Row="2" Grid.Column="1" Foreground="{Binding FirmwareVersionForeground}" Margin="10 0 0 0">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding FirmwareVersionText, Mode=OneWay, TargetNullValue=''}" Value="">
                                                <Setter Property="Text" Value="{lex:BLoc Key={x:Static loc:ResourceKeys.NotAvailable}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Text" Value="{Binding FirmwareVersionText, Mode=OneWay}"/>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <Label Grid.Row="3" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.MechanicalReels_ReelCountLabel}}" />
                            <TextBlock Grid.Row="3" Grid.Column="1" Foreground="{Binding ReelCountForeground}" Margin="10 0 0 0">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding ReelCount, Mode=OneWay, TargetNullValue=''}" Value="">
                                                <Setter Property="Text" Value="{lex:BLoc Key={x:Static loc:ResourceKeys.NotAvailable}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Text" Value="{Binding ReelCount, Mode=OneWay}"/>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <Label Grid.Row="4" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.StatusLabel}}" />
                            <TextBlock Grid.Row="4" Grid.Column="1" Foreground="{Binding StateForeground}" Margin="10 0 0 0">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding StatusText, Mode=OneWay, TargetNullValue=''}" Value="">
                                                <Setter Property="Text" Value="{lex:BLoc Key={x:Static loc:ResourceKeys.NotAvailable}}"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                        <Setter Property="Text" Value="{Binding StatusText, Mode=OneWay}"/>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>
                    </Border>
                </Grid>

                <!-- Settings -->
                <Grid Margin="0 20 0 0">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="50"/>
                        <RowDefinition Height="100"/>
                    </Grid.RowDefinitions>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="200"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>

                    <Grid.IsEnabled>
                        <MultiBinding Converter="{StaticResource BoolAndConverter}">
                            <Binding Path="InputEnabled"/>
                            <Binding Path="ReelsEnabled"/>
                        </MultiBinding>
                    </Grid.IsEnabled>

                    <Label Grid.Row="0" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.OffsetText}}" Margin="5 0 0 0" VerticalAlignment="Center" />
                    <Label Grid.Row="1" Grid.Column="0" Content="{lex:Loc Key={x:Static loc:ResourceKeys.MechanicalReels_ReelBrightnessLabel}}" Margin="5 0 0 0" VerticalAlignment="Center" />

                    <ItemsControl Grid.Row="0" Grid.Column="1" x:Name="ReelInfo" ItemsSource="{Binding ReelInfo}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal" />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type models:ReelInfoItem}">
                                <StackPanel Orientation="Horizontal">
                                    <Label Content="{Binding Name}" Margin="10 0 0 0"/>
                                    <xctk:IntegerUpDown
                                        Style="{StaticResource MonacoIntegerUpDown}"
                                        Margin="10 0 0 0"
                                        VerticalAlignment="Center"
                                        Value="{Binding OffsetSteps}"
                                        Minimum="{Binding MinReelOffset}"
                                        Maximum="{Binding MaxReelOffset}"
                                        Increment="1"
                                        AllowSpin="True"
                                        FontSize="18"
                                        Width="130"
                                        Height="45">
                                    </xctk:IntegerUpDown>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                        <Slider 
                            Width="250" 
                            Style="{StaticResource MonacoSlider}"
                            TickFrequency="1"
                            IsSnapToTickEnabled="True"
                            Minimum="{Binding MinimumBrightness, Mode=OneWay}"
                            Maximum="{Binding MaximumBrightness, Mode=OneWay}"
                            Value="{Binding Brightness}"
                            IsEnabled="{Binding BrightnessChanging, Converter={StaticResource InverseBoolConverter}}"/>
                    
                        <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.ApplyLabel}}"
                                IsEnabled="{Binding BrightnessChangePending}"
                                Command="{Binding ApplyBrightnessCommand}"
                                Margin="10 0 0 0" VerticalAlignment="Center" Height="50" Width="150"/>
                    </StackPanel>
                </Grid>
            </StackPanel>

            <StackPanel>
                <StackPanel.IsEnabled>
                    <MultiBinding Converter="{StaticResource BoolAndConverter}">
                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type operatorMenu:OperatorMenuPage}}" Path="DataContext.TestModeEnabled"/>
                        <Binding RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type operatorMenu:OperatorMenuPage}}" Path="DataContext.ReelsEnabled"/>
                    </MultiBinding>
                </StackPanel.IsEnabled>

                <!-- Reels -->
                <StackPanel Visibility="{Binding ReelTestScreenHidden, Converter={StaticResource TrueCollapsedFalseVisible}}">
                    <views:MechanicalReelsTestControl x:Name="ReelTestControl" DataContext="{Binding ReelTestViewModel}" />
                </StackPanel>

                <!-- Lights -->
                <StackPanel Visibility="{Binding LightTestScreenHidden, Converter={StaticResource TrueCollapsedFalseVisible}}">
                    <views:MechanicalReelsLightTestControl x:Name="LightTestControl" DataContext="{Binding LightTestViewModel}" />
                </StackPanel>
            </StackPanel>
        </StackPanel>

        <Border Grid.Row="1" Margin="0 15 0 0" VerticalAlignment="Bottom">
            <StackPanel Orientation="Horizontal">

                <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.MechanicalReels_ReelSettingsText}}" 
                        Command="{Binding ShowSettingsCommand}"
                        Visibility="{Binding SettingsButtonHidden, Converter={StaticResource TrueCollapsedFalseVisible}}"
                        Margin="0 10 10 10" VerticalAlignment="Center" Height="50" Width="150"/>

                <StackPanel Orientation="Horizontal">
                    <StackPanel.IsEnabled>
                        <MultiBinding Converter="{StaticResource BoolAndConverter}">
                            <Binding Path="TestModeEnabled"/>
                        </MultiBinding>
                    </StackPanel.IsEnabled>

                    <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.MechanicalReels_TestReelsText}}" 
                            Command="{Binding ShowReelTestCommand}"
                            Visibility="{Binding ReelTestButtonHidden, Converter={StaticResource TrueCollapsedFalseVisible}}"
                            Margin="0 10 10 10" VerticalAlignment="Center" Height="50" Width="150"/>

                    <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.MechanicalReels_TestLightsText}}" 
                            Command="{Binding ShowLightTestCommand}"
                            Visibility="{Binding LightTestButtonHidden, Converter={StaticResource TrueCollapsedFalseVisible}}"
                            Margin="0 10 10 10" VerticalAlignment="Center" Height="50" Width="150"/>

                    <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.SelfTestLabel}}"
                            Command="{Binding SelfTestCommand}"
                            Visibility="{Binding SettingsScreenHidden, Converter={StaticResource TrueCollapsedFalseVisible}}"
                            Margin="0 10 0 10" VerticalAlignment="Center" Height="50" Width="150"/>

                    <Button Content="{lex:Loc Key={x:Static loc:ResourceKeys.SelfTestClearNVM}}" 
                            Command="{Binding SelfTestClearCommand}" 
                            Visibility="{Binding SettingsScreenHidden, Converter={StaticResource TrueCollapsedFalseVisible}}"
                            Margin="10 10 10 10" VerticalAlignment="Center" Height="50" Width="250"/>
                </StackPanel>

                <Button Name="WarningButton" Style="{StaticResource MonacoWarningButton}"
                        Command="{Binding ShowInfoPopupCommand}"
                        Visibility="{Binding TestModeToolTipDisabled, Converter={StaticResource TrueHiddenFalseVisible}}"
                        Margin="0 10 10 10" VerticalAlignment="Center">
                    <Button.CommandParameter>
                        <MultiBinding Converter="{StaticResource MultiValueConverter}">
                            <Binding ElementName="WarningButton"/>
                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Control}" Path="DataContext.TestWarningText" />
                        </MultiBinding>
                    </Button.CommandParameter>
                </Button>
            </StackPanel>
        </Border>
    </Grid>
</operatorMenu:OperatorMenuPage>
