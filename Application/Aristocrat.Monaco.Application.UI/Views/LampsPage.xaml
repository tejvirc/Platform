<operatorMenu:OperatorMenuPage x:Class="Aristocrat.Monaco.Application.UI.Views.LampsPage"
                               xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                               xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                               xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
                               xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                               xmlns:common="http://monaco.aristocrat.com/common"
                               xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                               xmlns:operatorMenu="clr-namespace:Aristocrat.Monaco.Application.UI.OperatorMenu"
                               xmlns:viewModels="clr-namespace:Aristocrat.Monaco.Application.UI.ViewModels"
                               xmlns:lex="http://wpflocalizeextension.codeplex.com"
                               xmlns:loc="http://monaco.aristocrat.com/localization"
                               mc:Ignorable="d" 
                               d:DataContext="{d:DesignInstance {x:Type viewModels:LampsPageViewModel}}">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Aristocrat.Monaco.UI.Common;component/Skins/OperatorMenu.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <common:EnumDescriptionConverter x:Key="EnumDescriptionConverter"/>

            <Style x:Key="ToggleSwitchButtonStyle"
                   TargetType="controls:ToggleSwitchButton"
                   BasedOn="{StaticResource MonacoToggleSwitchButton}">
                <Setter Property="Height" Value="40"/>
                <Setter Property="HorizontalAlignment" Value="Center"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="ThumbIndicatorWidth" Value="75"/>
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="150"/>
            </Style>

            <Style x:Key="LampButtonListBoxItemStyle" 
                   TargetType="{x:Type ListBoxItem}"
                   BasedOn="{StaticResource MonacoListBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Border Grid.Column="0">
                                    <controls:ToggleSwitchButton Style="{StaticResource ToggleSwitchButtonStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>
                                <Border Grid.Column="1"
                                        Margin="10 0 0 0">
                                    <TextBlock VerticalAlignment="Center" IsHitTestVisible="False" Style="{StaticResource MonacoTextBlock}">
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0}">
                                                <Binding Path="DataContext" 
                                                         RelativeSource="{RelativeSource TemplatedParent}" />
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </Border>

                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="LampButtonListBoxStyle" 
                   TargetType="{x:Type ListBox}"
                   BasedOn="{StaticResource MonacoListBox}">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="ItemContainerStyle" Value="{StaticResource LampButtonListBoxItemStyle}" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Vertical"
                                       ItemHeight="60"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="Margin" Value="0" />
                <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False"/>
            </Style>

            <Style x:Key="IntervalButtonListBoxItemStyle" 
                   TargetType="{x:Type ListBoxItem}"
                   BasedOn="{StaticResource MonacoListBoxItem}">
                <Setter Property="Margin" Value="0 0 50 0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>

                                <Border Grid.Column="0">
                                    <controls:ToggleSwitchButton Style="{StaticResource ToggleSwitchButtonStyle}"
                                                                 IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>

                                <Border Grid.Column="1"
                                        Margin="10 0 0 0">
                                    <TextBlock VerticalAlignment="Center" IsHitTestVisible="False" Style="{StaticResource MonacoTextBlock}">
                                        <TextBlock.Text>
                                            <MultiBinding StringFormat="{}{0} {1}">
                                                <Binding Path="DataContext" 
                                                         RelativeSource="{RelativeSource TemplatedParent}" />
                                                <Binding ElementName="MillisecondIntervalTextProxy" Path="Result"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                        <lex:LocProxy x:Name="MillisecondIntervalTextProxy" Source="{x:Static loc:ResourceKeys.MillisecondIntervalText}" />
                                    </TextBlock>
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="IntervalButtonListBoxStyle" 
                   TargetType="{x:Type ListBox}"
                   BasedOn="{StaticResource MonacoListBox}">
                <Setter Property="BorderThickness" Value="0" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <WrapPanel Orientation="Horizontal" />
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemContainerStyle" Value="{StaticResource IntervalButtonListBoxItemStyle}" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="False"/>
            </Style>

            <Style TargetType="GroupBox" BasedOn="{StaticResource MonacoGroupBox}">
                <Setter Property="Margin" Value="0 10 0 0"/>
                <Setter Property="Padding" Value="10 0 10 0"/>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <GroupBox Grid.Row="0" 
                  Grid.Column="0"
                  Margin="0"
                  Header="{lex:Loc Key={x:Static loc:ResourceKeys.TestButtonLamps}}"
                  IsEnabled="{Binding TestModeEnabled}"
                  Visibility="{Binding ButtonLampsAvailable, Converter={StaticResource BoolToVisConverter}}">
            <StackPanel>
                <ListBox ItemsSource="{Binding ButtonLamps}"
                         SelectedItem="{Binding SelectedButtonLamp}"
                         SelectionMode="Single"
                         Style="{StaticResource LampButtonListBoxStyle}"
                         Visibility="{Binding ButtonLampsAvailable, Converter={StaticResource BoolToVisConverter}}" />
                <Label Content="{lex:Loc Key={x:Static loc:ResourceKeys.FlashIntervals}}" Margin="0 20 0 10" />
                <ListBox ItemsSource="{Binding Intervals}"
                         SelectedItem="{Binding SelectedInterval}"
                         SelectionMode="Single"
                         Style="{StaticResource IntervalButtonListBoxStyle}" />
            </StackPanel>
        </GroupBox>

        <GroupBox Grid.Row="2"
                  Grid.Column="0"
                  IsEnabled="{Binding TestModeEnabled}"
                  Header="{lex:Loc Key={x:Static loc:ResourceKeys.TestTowerLights}}"
                  Visibility="{Binding TowerLightsEnabled, Converter={StaticResource BoolToVisConverter}}">
            <Grid Margin="4" VerticalAlignment="Top">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="100"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <ComboBox Grid.Column="0" 
                          ItemsSource="{Binding TowerLights}" 
                          SelectedItem="{Binding SelectedTowerLight}"
                          DisplayMemberPath="Name"
                          MinWidth="140" 
                          MaxHeight="45"/>
                <ComboBox Grid.Column="1" 
                          ItemsSource="{Binding FlashStates}" 
                          SelectedItem="{Binding SelectedFlashState}"
                          MinWidth="240" 
                          MaxHeight="45"
                          Margin="15 0 0 0">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={StaticResource EnumDescriptionConverter}}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <Button Grid.Column="2"
                        Content="{lex:Loc Key={x:Static loc:ResourceKeys.Set}}"
                        Command="{Binding SetTowerLightFlashStateCommand}"
                        MaxHeight="45"
                        Margin="15 0 0 0"/>
                <ListBox Grid.Column="4" 
                         ItemsSource="{Binding TowerLights}" 
                         ItemContainerStyle="{StaticResource MonacoUnselectableListBoxItem}"
                         MinWidth="275"
                         BorderBrush="{DynamicResource GrayBrush9}"
                         Style="{StaticResource MonacoListBox}">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" MinWidth="80"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Column="0" Text="{Binding Name}"/>
                                <RadioButton Grid.Column="1"
                                             IsChecked="{Binding State}" 
                                             Content="{Binding FlashStateName}" 
                                             IsEnabled="False" 
                                             Margin="15 0 0 0"/>
                            </Grid>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
            </Grid>
        </GroupBox>
    </Grid>

</operatorMenu:OperatorMenuPage>