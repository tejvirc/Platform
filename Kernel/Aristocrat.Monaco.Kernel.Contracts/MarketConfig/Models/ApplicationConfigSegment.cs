//------------------------------------------------------------------------------
// <auto-generated>
// This file was automatically generated by a tool.
// Schema Format Version: 1.3
// Generator Version: 2.5.0.0
//
// DO NOT MODIFY THIS FILE MANUALLY.
// Changes to this file may cause incorrect behavior and will be overwritten.
// </auto-generated>
//------------------------------------------------------------------------------
using Newtonsoft.Json;
using System;
using System.Collections.Generic;

namespace Aristocrat.Monaco.Kernel.MarketConfig.Models.Application
{
    /// <summary>
    /// Gaming Runnable Enumeration
    /// </summary>
    public enum GamingRunnableType
    {
        /// <summary>Class 3</summary>
        Class3,
        /// <summary>Class 2</summary>
        Class2,
        /// <summary>VLT</summary>
        VLT,
        /// <summary>COAM</summary>
        Class3Coam,
    }

    /// <summary>
    /// Currency Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class CurrencyFieldset
    {
        /// <summary>
        /// Currency code
        /// </summary>
        [JsonProperty(PropertyName = "currency_code", Required = Required.Always)]
        public String CurrencyCode { get; set; }

        /// <summary>
        /// Configurable
        /// </summary>
        [JsonProperty(PropertyName = "configurable", Required = Required.Always)]
        public Boolean Configurable { get; set; }
    }

    /// <summary>
    /// Edge light configuration Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class EdgeLightConfigurationFieldset
    {
        /// <summary>
        /// Lobby mode color
        /// </summary>
        [JsonProperty(PropertyName = "lobby_mode_color", Required = Required.Always)]
        public String LobbyModeColor { get; set; }

        /// <summary>
        /// Attract mode color
        /// </summary>
        [JsonProperty(PropertyName = "attract_mode_color", Required = Required.Always)]
        public String AttractModeColor { get; set; }

        /// <summary>
        /// Default color
        /// </summary>
        [JsonProperty(PropertyName = "default_color", Required = Required.Always)]
        public String DefaultColor { get; set; }
    }

    /// <summary>
    /// GAT serial Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class GatSerialFieldset
    {
        /// <summary>
        /// Version
        /// </summary>
        [JsonProperty(PropertyName = "version", Required = Required.Always)]
        public String Version { get; set; }

        /// <summary>
        /// COM port
        /// </summary>
        [JsonProperty(PropertyName = "com_port", Required = Required.Always)]
        public String ComPort { get; set; }
    }

    /// <summary>
    /// Disable on error Enumeration
    /// </summary>
    public enum NoteAcceptorMonitorDisableBehavior
    {
        /// <summary>Immediate</summary>
        Immediate,
        /// <summary>Queue</summary>
        Queue
    }

    /// <summary>
    /// Note acceptor monitor Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class NoteAcceptorMonitorFieldset
    {
        /// <summary>
        /// Disable on error
        /// </summary>
        [JsonProperty(PropertyName = "disable_on_error", Required = Required.Always)]
        public NoteAcceptorMonitorDisableBehavior DisableOnError { get; set; }

        /// <summary>
        /// Lockup on disconnect
        /// </summary>
        [JsonProperty(PropertyName = "lockup_on_disconnect", Required = Required.Always)]
        public Boolean LockupOnDisconnect { get; set; }

        /// <summary>
        /// Soft error on Stacker Full
        /// </summary>
        [JsonProperty(PropertyName = "soft_error_on_stacker_full", Required = Required.Always)]
        public Boolean SoftErrorOnStackerFull { get; set; }

        /// <summary>
        /// Lockup on Stacker Full
        /// </summary>
        [JsonProperty(PropertyName = "lockup_on_stacker_full", Required = Required.Always)]
        public Boolean LockupOnStackerFull { get; set; }

        /// <summary>
        /// Stop alarm when audit menu opened
        /// </summary>
        [JsonProperty(PropertyName = "stop_alarm_when_audit_menu_opened", Required = Required.Always)]
        public Boolean StopAlarmWhenAuditMenuOpened { get; set; }
    }

    /// <summary>
    /// Printer monitor Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class PrinterMonitorFieldset
    {
        /// <summary>
        /// Form feed after key off
        /// </summary>
        [JsonProperty(PropertyName = "form_feed_after_key_off", Required = Required.Always)]
        public Boolean FormFeedAfterKeyOff { get; set; }

        /// <summary>
        /// Stop alarm when audit menu opened
        /// </summary>
        [JsonProperty(PropertyName = "stop_alarm_when_audit_menu_opened", Required = Required.Always)]
        public Boolean StopAlarmWhenAuditMenuOpened { get; set; }
    }

    /// <summary>
    /// Firmware CRC monitor Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class FirmwareCrcMonitorFieldset
    {
        /// <summary>
        /// Enabled
        /// </summary>
        [JsonProperty(PropertyName = "enabled", Required = Required.Always)]
        public Boolean Enabled { get; set; }

        /// <summary>
        /// Seed
        /// </summary>
        [JsonProperty(PropertyName = "seed", Required = Required.Always)]
        public Int32 Seed { get; set; }
    }

    /// <summary>
    /// Ticket mode audit behavior Enumeration
    /// </summary>
    public enum TicketModeAuditBehavior
    {
        /// <summary>Audit</summary>
        Audit,
        /// <summary>Inspection</summary>
        Inspection
    }

    /// <summary>
    /// General messages Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class GeneralMessagesFieldset
    {
        /// <summary>
        /// Disabled by operator
        /// </summary>
        [JsonProperty(PropertyName = "disabled_by_operator", Required = Required.Always)]
        public String DisabledByOperator { get; set; }

        /// <summary>
        /// Lockup culture
        /// </summary>
        [JsonProperty(PropertyName = "lockup_culture", Required = Required.Always)]
        public String LockupCulture { get; set; }
    }

    /// <summary>
    /// Note acceptor error messages Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class NoteAcceptorErrorMessagesFieldset
    {
        /// <summary>
        /// Bill jam
        /// </summary>
        [JsonProperty(PropertyName = "bill_jam", Required = Required.Always)]
        public String BillJam { get; set; }

        /// <summary>
        /// Bill stacker error
        /// </summary>
        [JsonProperty(PropertyName = "bill_stacker_error", Required = Required.Always)]
        public String BillStackerError { get; set; }

        /// <summary>
        /// Bill stacker full
        /// </summary>
        [JsonProperty(PropertyName = "bill_stacker_full", Required = Required.Always)]
        public String BillStackerFull { get; set; }

        /// <summary>
        /// Bill stacker jam
        /// </summary>
        [JsonProperty(PropertyName = "bill_stacker_jam", Required = Required.Always)]
        public String BillStackerJam { get; set; }

        /// <summary>
        /// Bill unexpected error
        /// </summary>
        [JsonProperty(PropertyName = "bill_unexpected_error", Required = Required.Always)]
        public String BillUnexpectedError { get; set; }

        /// <summary>
        /// Bill validator fault
        /// </summary>
        [JsonProperty(PropertyName = "bill_validator_fault", Required = Required.Always)]
        public String BillValidatorFault { get; set; }

        /// <summary>
        /// Invalid bill
        /// </summary>
        [JsonProperty(PropertyName = "invalid_bill", Required = Required.Always)]
        public String InvalidBill { get; set; }

        /// <summary>
        /// Cash box removed
        /// </summary>
        [JsonProperty(PropertyName = "cash_box_removed", Required = Required.Always)]
        public String CashBoxRemoved { get; set; }

        /// <summary>
        /// General failure
        /// </summary>
        [JsonProperty(PropertyName = "general_failure", Required = Required.Always)]
        public String GeneralFailure { get; set; }
    }

    /// <summary>
    /// Printer error messages Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class PrinterErrorMessagesFieldset
    {
        /// <summary>
        /// Malfunction error
        /// </summary>
        [JsonProperty(PropertyName = "malfunction_error", Required = Required.Always)]
        public String MalfunctionError { get; set; }

        /// <summary>
        /// Paper out
        /// </summary>
        [JsonProperty(PropertyName = "paper_out", Required = Required.Always)]
        public String PaperOut { get; set; }

        /// <summary>
        /// Error while printing
        /// </summary>
        [JsonProperty(PropertyName = "error_while_printing", Required = Required.Always)]
        public String ErrorWhilePrinting { get; set; }

        /// <summary>
        /// Drawer error
        /// </summary>
        [JsonProperty(PropertyName = "drawer_error", Required = Required.Always)]
        public String DrawerError { get; set; }

        /// <summary>
        /// Printer offline
        /// </summary>
        [JsonProperty(PropertyName = "printer_offline", Required = Required.Always)]
        public String PrinterOffline { get; set; }

        /// <summary>
        /// Paper in chute
        /// </summary>
        [JsonProperty(PropertyName = "paper_in_chute", Required = Required.Always)]
        public String PaperInChute { get; set; }

        /// <summary>
        /// Printer open
        /// </summary>
        [JsonProperty(PropertyName = "printer_open", Required = Required.Always)]
        public String PrinterOpen { get; set; }

        /// <summary>
        /// Stopped responding
        /// </summary>
        [JsonProperty(PropertyName = "stopped_responding", Required = Required.Always)]
        public String StoppedResponding { get; set; }

        /// <summary>
        /// Failed minimum requirements
        /// </summary>
        [JsonProperty(PropertyName = "failed_minimum_requirements", Required = Required.Always)]
        public String FailedMinimumRequirements { get; set; }

        /// <summary>
        /// Missing supply index
        /// </summary>
        [JsonProperty(PropertyName = "missing_supply_index", Required = Required.Always)]
        public String MissingSupplyIndex { get; set; }

        /// <summary>
        /// Printer DFU download in progress
        /// </summary>
        [JsonProperty(PropertyName = "printer_dfu_download_in_progress", Required = Required.Always)]
        public String PrinterDfuDownloadInProgress { get; set; }

        /// <summary>
        /// Transfer status error
        /// </summary>
        [JsonProperty(PropertyName = "transfer_status_error", Required = Required.Always)]
        public String TransferStatusError { get; set; }

        /// <summary>
        /// Printer firmware download interrupted
        /// </summary>
        [JsonProperty(PropertyName = "printer_firmware_download_interrupted", Required = Required.Always)]
        public String PrinterFirmwareDownloadInterrupted { get; set; }
    }

    /// <summary>
    /// Bell configuration Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class BellConfigurationFieldset
    {
        /// <summary>
        /// Initial value
        /// </summary>
        [JsonProperty(PropertyName = "initial_value", Required = Required.Always)]
        public Int64 InitialValue { get; set; }

        /// <summary>
        /// Interval value
        /// </summary>
        [JsonProperty(PropertyName = "interval_value", Required = Required.Always)]
        public Int64 IntervalValue { get; set; }

        /// <summary>
        /// Max bell value
        /// </summary>
        [JsonProperty(PropertyName = "max_bell_value", Required = Required.Always)]
        public Int64 MaxBellValue { get; set; }
    }

    /// <summary>
    /// Meter rollover Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class MeterRolloverFieldset
    {
        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty(PropertyName = "currency", Required = Required.Always)]
        public Int64 Currency { get; set; }

        /// <summary>
        /// Occurrence
        /// </summary>
        [JsonProperty(PropertyName = "occurrence", Required = Required.Always)]
        public Int64 Occurrence { get; set; }
    }

    /// <summary>
    /// Auto-clear period meters behavior Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class AutoClearPeriodMetersBehaviorFieldset
    {
        /// <summary>
        /// Auto-clear period meters
        /// </summary>
        [JsonProperty(PropertyName = "auto_clear_period_meters", Required = Required.Always)]
        public Boolean AutoClearPeriodMeters { get; set; }

        /// <summary>
        /// Meter clear time
        /// The number of hours after midnight (local time) for period meters to auto-clear, if enabled.
        /// </summary>
        [JsonProperty(PropertyName = "meter_clear_time", Required = Required.Always)]
        public Double MeterClearTime { get; set; }
    }

    /// <summary>
    /// Alert volume Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class AlertVolumeFieldset
    {
        /// <summary>
        /// Value
        /// </summary>
        [JsonProperty(PropertyName = "value", Required = Required.Always)]
        public Byte Value { get; set; }

        /// <summary>
        /// Minimum
        /// </summary>
        [JsonProperty(PropertyName = "minimum", Required = Required.Always)]
        public Byte Minimum { get; set; }

        /// <summary>
        /// Logic door full volume alert
        /// </summary>
        [JsonProperty(PropertyName = "logic_door_full_volume_alert", Required = Required.Always)]
        public Boolean LogicDoorFullVolumeAlert { get; set; }

        /// <summary>
        /// Configurable
        /// </summary>
        [JsonProperty(PropertyName = "configurable", Required = Required.Always)]
        public Boolean Configurable { get; set; }

        /// <summary>
        /// Play test sound
        /// </summary>
        [JsonProperty(PropertyName = "play_test_sound", Required = Required.Always)]
        public Boolean PlayTestSound { get; set; }
    }

    /// <summary>
    /// Location Enumeration
    /// </summary>
    public enum VolumeControlLocation
    {
        /// <summary>Lobby</summary>
        Lobby,
        /// <summary>Game</summary>
        Game,
        /// <summary>Lobby and Game</summary>
        LobbyAndGame
    }

    /// <summary>
    /// Sound configuration Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class SoundConfigurationFieldset
    {
        /// <summary>
        /// Default volume level
        /// </summary>
        [JsonProperty(PropertyName = "default_volume_level", Required = Required.Always)]
        public Byte DefaultVolumeLevel { get; set; }

        /// <summary>
        /// Alert volume
        /// </summary>
        [JsonProperty(PropertyName = "alert_volume", Required = Required.Always)]
        public AlertVolumeFieldset AlertVolume { get; set; }

        /// <summary>
        /// Location
        /// </summary>
        [JsonProperty(PropertyName = "location", Required = Required.Always)]
        public VolumeControlLocation Location { get; set; }

        /// <summary>
        /// Use game type volume
        /// </summary>
        [JsonProperty(PropertyName = "use_game_type_volume", Required = Required.Always)]
        public Boolean UseGameTypeVolume { get; set; }

        /// <summary>
        /// Lobby volume scalar
        /// </summary>
        [JsonProperty(PropertyName = "lobby_volume_scalar", Required = Required.Always)]
        public Byte LobbyVolumeScalar { get; set; }

        /// <summary>
        /// Player volume scalar
        /// </summary>
        [JsonProperty(PropertyName = "player_volume_scalar", Required = Required.Always)]
        public Byte PlayerVolumeScalar { get; set; }
    }

    /// <summary>
    /// Lockup type Enumeration
    /// </summary>
    public enum ExcessiveDocumentRejectLockupType
    {
        /// <summary>Soft</summary>
        Soft,
        /// <summary>Hard</summary>
        Hard
    }

    /// <summary>
    /// Reset method key Enumeration
    /// </summary>
    public enum ResetMethodKeyType
    {
        /// <summary>Main door</summary>
        MainDoor,
        /// <summary>Jackpot Key</summary>
        JackpotKey
    }

    /// <summary>
    /// Excessive document rejection Fieldset Component
    /// Applicable to bills/vouchers rejection
    /// Access this field using the parent segment class
    /// </summary>
    public class ExcessiveDocumentRejectionFieldset
    {
        /// <summary>
        /// Lockup type
        /// </summary>
        [JsonProperty(PropertyName = "lockup_type", Required = Required.Always)]
        public ExcessiveDocumentRejectLockupType LockupType { get; set; }

        /// <summary>
        /// Consecutive rejects before lockup
        /// -1 means this lockup is not applicable to this market
        /// </summary>
        [JsonProperty(PropertyName = "consecutive_rejects_before_lockup", Required = Required.Always)]
        public Int32 ConsecutiveRejectsBeforeLockup { get; set; }

        /// <summary>
        /// Sound file path
        /// </summary>
        [JsonProperty(PropertyName = "sound_file_path", Required = Required.Always)]
        public String SoundFilePath { get; set; }

        /// <summary>
        /// Reset method key
        /// </summary>
        [JsonProperty(PropertyName = "reset_method_key", Required = Required.Always)]
        public ResetMethodKeyType ResetMethodKey { get; set; }
    }

    /// <summary>
    /// Critical memory integrity check Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class CriticalMemoryIntegrityCheckFieldset
    {
        /// <summary>
        /// Enabled
        /// </summary>
        [JsonProperty(PropertyName = "enabled", Required = Required.Always)]
        public Boolean Enabled { get; set; }

        /// <summary>
        /// Value
        /// </summary>
        [JsonProperty(PropertyName = "value", Required = Required.Always)]
        public Int32 Value { get; set; }

        /// <summary>
        /// Sound file path
        /// </summary>
        [JsonProperty(PropertyName = "sound_file_path", Required = Required.Always)]
        public String SoundFilePath { get; set; }
    }

    /// <summary>
    /// Barcode type Enumeration
    /// </summary>
    public enum BarcodeTypeOptions
    {
        /// <summary>Interleave 2 of 5</summary>
        Interleave2of5
    }

    /// <summary>
    /// Validation length Enumeration
    /// </summary>
    public enum ValidationLengthOptions
    {
        /// <summary>System</summary>
        System
    }

    /// <summary>
    /// Layout type Enumeration
    /// </summary>
    public enum LayoutTypeOptions
    {
        /// <summary>Extended Layout</summary>
        ExtendedLayout
    }

    /// <summary>
    /// Clock Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class ClockFieldset
    {
        /// <summary>
        /// Enabled
        /// </summary>
        [JsonProperty(PropertyName = "enabled", Required = Required.Always)]
        public Boolean Enabled { get; set; }

        /// <summary>
        /// Format
        /// </summary>
        [JsonProperty(PropertyName = "format", Required = Required.Always)]
        public Int32 Format { get; set; }
    }

    /// <summary>
    /// Cashout Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class CashoutFieldset
    {
        /// <summary>
        /// Clear wins
        /// </summary>
        [JsonProperty(PropertyName = "clear_wins", Required = Required.Always)]
        public Boolean ClearWins { get; set; }

        /// <summary>
        /// Commit storage after cashout
        /// </summary>
        [JsonProperty(PropertyName = "commit_storage_after_cashout", Required = Required.Always)]
        public Boolean CommitStorageAfterCashout { get; set; }
    }

    /// <summary>
    /// Multi-game Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class MultiGameFieldset
    {
        /// <summary>
        /// Default bet after switch
        /// </summary>
        [JsonProperty(PropertyName = "default_bet_after_switch", Required = Required.Always)]
        public Boolean DefaultBetAfterSwitch { get; set; }

        /// <summary>
        /// Restore reboot state after switch
        /// </summary>
        [JsonProperty(PropertyName = "restore_reboot_state_after_switch", Required = Required.Always)]
        public Boolean RestoreRebootStateAfterSwitch { get; set; }

        /// <summary>
        /// State storage location
        /// </summary>
        [JsonProperty(PropertyName = "state_storage_location", Required = Required.Always)]
        public String StateStorageLocation { get; set; }
    }

    /// <summary>
    /// Audit ticket Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class AuditTicketFieldset
    {
        /// <summary>
        /// Printer protocol
        /// </summary>
        [JsonProperty(PropertyName = "printer_protocol", Required = Required.Always)]
        public String PrinterProtocol { get; set; }

        /// <summary>
        /// Line limit
        /// </summary>
        [JsonProperty(PropertyName = "line_limit", Required = Required.Always)]
        public Int32 LineLimit { get; set; }

        /// <summary>
        /// Events per page
        /// </summary>
        [JsonProperty(PropertyName = "events_per_page", Required = Required.Always)]
        public Int32 EventsPerPage { get; set; }
    }

    /// <summary>
    /// Reserve service Fieldset Component
    /// Access this field using the parent segment class
    /// </summary>
    public class ReserveServiceFieldset
    {
        /// <summary>
        /// Allowed
        /// </summary>
        [JsonProperty(PropertyName = "allowed", Required = Required.Always)]
        public Boolean Allowed { get; set; }

        /// <summary>
        /// Enabled
        /// </summary>
        [JsonProperty(PropertyName = "enabled", Required = Required.Always)]
        public Boolean Enabled { get; set; }

        /// <summary>
        /// Timeout in seconds
        /// </summary>
        [JsonProperty(PropertyName = "timeout_in_seconds", Required = Required.Always)]
        public Int32 TimeoutInSeconds { get; set; }
    }

    /// <summary>
    /// Market Jurisdiction Configuration for the Application segment
    /// </summary>
    [MarketConfigSegment("application")]
    public class ApplicationConfigSegment
    {
        /// <summary>
        /// Gaming Runnable
        /// </summary>
        [JsonProperty(PropertyName = "gaming_runnable", Required = Required.Always)]
        public GamingRunnableType GamingRunnable { get; set; }

        /// <summary>
        /// Currency
        /// </summary>
        [JsonProperty(PropertyName = "currency", Required = Required.Always)]
        public CurrencyFieldset Currency { get; set; }

        /// <summary>
        /// Edge light configuration
        /// </summary>
        [JsonProperty(PropertyName = "edge_light_configuration", Required = Required.Always)]
        public EdgeLightConfigurationFieldset EdgeLightConfiguration { get; set; }

        /// <summary>
        /// GAT serial
        /// </summary>
        [JsonProperty(PropertyName = "gat_serial", Required = Required.Always)]
        public GatSerialFieldset GatSerial { get; set; }

        /// <summary>
        /// Disable hard meter monitor on error
        /// </summary>
        [JsonProperty(PropertyName = "disable_hard_meter_monitor_on_error", Required = Required.Always)]
        public Boolean DisableHardMeterMonitorOnError { get; set; }

        /// <summary>
        /// Note acceptor monitor
        /// </summary>
        [JsonProperty(PropertyName = "note_acceptor_monitor", Required = Required.Always)]
        public NoteAcceptorMonitorFieldset NoteAcceptorMonitor { get; set; }

        /// <summary>
        /// Printer monitor
        /// </summary>
        [JsonProperty(PropertyName = "printer_monitor", Required = Required.Always)]
        public PrinterMonitorFieldset PrinterMonitor { get; set; }

        /// <summary>
        /// Firmware CRC monitor
        /// </summary>
        [JsonProperty(PropertyName = "firmware_crc_monitor", Required = Required.Always)]
        public FirmwareCrcMonitorFieldset FirmwareCrcMonitor { get; set; }

        /// <summary>
        /// Memory monitor low memory threshold
        /// </summary>
        [JsonProperty(PropertyName = "memory_monitor_low_memory_threshold", Required = Required.Always)]
        public Int64 MemoryMonitorLowMemoryThreshold { get; set; }

        /// <summary>
        /// Ticket mode audit behavior
        /// </summary>
        [JsonProperty(PropertyName = "ticket_mode_audit_behavior", Required = Required.Always)]
        public TicketModeAuditBehavior TicketModeAuditBehavior { get; set; }

        /// <summary>
        /// Media display enabled
        /// </summary>
        [JsonProperty(PropertyName = "media_display_enabled", Required = Required.Always)]
        public Boolean MediaDisplayEnabled { get; set; }

        /// <summary>
        /// Detailed audit tickets enabled
        /// </summary>
        [JsonProperty(PropertyName = "detailed_audit_tickets_enabled", Required = Required.Always)]
        public Boolean DetailedAuditTicketsEnabled { get; set; }

        /// <summary>
        /// General messages
        /// </summary>
        [JsonProperty(PropertyName = "general_messages", Required = Required.Always)]
        public GeneralMessagesFieldset GeneralMessages { get; set; }

        /// <summary>
        /// Note acceptor error messages
        /// </summary>
        [JsonProperty(PropertyName = "note_acceptor_error_messages", Required = Required.Always)]
        public NoteAcceptorErrorMessagesFieldset NoteAcceptorErrorMessages { get; set; }

        /// <summary>
        /// Printer error messages
        /// </summary>
        [JsonProperty(PropertyName = "printer_error_messages", Required = Required.Always)]
        public PrinterErrorMessagesFieldset PrinterErrorMessages { get; set; }

        /// <summary>
        /// Bell configuration
        /// </summary>
        [JsonProperty(PropertyName = "bell_configuration", Required = Required.Always)]
        public BellConfigurationFieldset BellConfiguration { get; set; }

        /// <summary>
        /// Meter rollover
        /// </summary>
        [JsonProperty(PropertyName = "meter_rollover", Required = Required.Always)]
        public MeterRolloverFieldset MeterRollover { get; set; }

        /// <summary>
        /// Auto-clear period meters when removing stacker
        /// </summary>
        [JsonProperty(PropertyName = "auto_clear_period_meters_when_removing_stacker", Required = Required.Always)]
        public Boolean AutoClearPeriodMetersWhenRemovingStacker { get; set; }

        /// <summary>
        /// Auto-clear period meters behavior
        /// </summary>
        [JsonProperty(PropertyName = "auto_clear_period_meters_behavior", Required = Required.Always)]
        public AutoClearPeriodMetersBehaviorFieldset AutoClearPeriodMetersBehavior { get; set; }

        /// <summary>
        /// Sound configuration
        /// </summary>
        [JsonProperty(PropertyName = "sound_configuration", Required = Required.Always)]
        public SoundConfigurationFieldset SoundConfiguration { get; set; }

        /// <summary>
        /// Read-only media required
        /// </summary>
        [JsonProperty(PropertyName = "read_only_media_required", Required = Required.Always)]
        public Boolean ReadOnlyMediaRequired { get; set; }

        /// <summary>
        /// Demonstration enabled
        /// </summary>
        [JsonProperty(PropertyName = "demonstration_enabled", Required = Required.Always)]
        public Boolean DemonstrationEnabled { get; set; }

        /// <summary>
        /// Delete package after software install
        /// </summary>
        [JsonProperty(PropertyName = "delete_package_after_software_install", Required = Required.Always)]
        public Boolean DeletePackageAfterSoftwareInstall { get; set; }

        /// <summary>
        /// Excessive document rejection
        /// Applicable to bills/vouchers rejection
        /// </summary>
        [JsonProperty(PropertyName = "excessive_document_rejection", Required = Required.Always)]
        public ExcessiveDocumentRejectionFieldset ExcessiveDocumentRejection { get; set; }

        /// <summary>
        /// "Paper in chute" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "paper_in_chute_sound_file_path", Required = Required.Always)]
        public String PaperInChuteSoundFilePath { get; set; }

        /// <summary>
        /// "Printer error" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "printer_error_sound_file_path", Required = Required.Always)]
        public String PrinterErrorSoundFilePath { get; set; }

        /// <summary>
        /// "Printer warning" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "printer_warning_sound_file_path", Required = Required.Always)]
        public String PrinterWarningSoundFilePath { get; set; }

        /// <summary>
        /// "Note acceptor error" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "note_acceptor_error_sound_file_path", Required = Required.Always)]
        public String NoteAcceptorErrorSoundFilePath { get; set; }

        /// <summary>
        /// "Disk space monitor error" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "disk_space_monitor_error_sound_file_path", Required = Required.Always)]
        public String DiskSpaceMonitorErrorSoundFilePath { get; set; }

        /// <summary>
        /// "Firmware CRC error" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "firmware_crc_error_sound_file_path", Required = Required.Always)]
        public String FirmwareCrcErrorSoundFilePath { get; set; }

        /// <summary>
        /// "Live authentication failed" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "live_authentication_failed_sound_file_path", Required = Required.Always)]
        public String LiveAuthenticationFailedSoundFilePath { get; set; }

        /// <summary>
        /// "Touch" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "touch_sound_file_path", Required = Required.Always)]
        public String TouchSoundFilePath { get; set; }

        /// <summary>
        /// "Coin in" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "coin_in_sound_file_path", Required = Required.Always)]
        public String CoinInSoundFilePath { get; set; }

        /// <summary>
        /// "Coin out" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "coin_out_sound_file_path", Required = Required.Always)]
        public String CoinOutSoundFilePath { get; set; }

        /// <summary>
        /// "Feature bell" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "feature_bell_sound_file_path", Required = Required.Always)]
        public String FeatureBellSoundFilePath { get; set; }

        /// <summary>
        /// "Collect" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "collect_sound_file_path", Required = Required.Always)]
        public String CollectSoundFilePath { get; set; }

        /// <summary>
        /// "Host offline" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "host_offline_sound_file_path", Required = Required.Always)]
        public String HostOfflineSoundFilePath { get; set; }

        /// <summary>
        /// "Ding" sound file path
        /// </summary>
        [JsonProperty(PropertyName = "ding_sound_file_path", Required = Required.Always)]
        public String DingSoundFilePath { get; set; }

        /// <summary>
        /// Critical memory integrity check
        /// </summary>
        [JsonProperty(PropertyName = "critical_memory_integrity_check", Required = Required.Always)]
        public CriticalMemoryIntegrityCheckFieldset CriticalMemoryIntegrityCheck { get; set; }

        /// <summary>
        /// Barcode type
        /// </summary>
        [JsonProperty(PropertyName = "barcode_type", Required = Required.Always)]
        public BarcodeTypeOptions BarcodeType { get; set; }

        /// <summary>
        /// Validation length
        /// </summary>
        [JsonProperty(PropertyName = "validation_length", Required = Required.Always)]
        public ValidationLengthOptions ValidationLength { get; set; }

        /// <summary>
        /// Layout type
        /// </summary>
        [JsonProperty(PropertyName = "layout_type", Required = Required.Always)]
        public LayoutTypeOptions LayoutType { get; set; }

        /// <summary>
        /// Operator lockup reset enabled
        /// </summary>
        [JsonProperty(PropertyName = "operator_lockup_reset_enabled", Required = Required.Always)]
        public Boolean OperatorLockupResetEnabled { get; set; }

        /// <summary>
        /// Log types allowed for display
        /// </summary>
        [JsonProperty(PropertyName = "log_types_allowed_for_display", Required = Required.Always)]
        public List<String> LogTypesAllowedForDisplay { get; set; }

        /// <summary>
        /// Clock
        /// </summary>
        [JsonProperty(PropertyName = "clock", Required = Required.Always)]
        public ClockFieldset Clock { get; set; }

        /// <summary>
        /// Cashout
        /// </summary>
        [JsonProperty(PropertyName = "cashout", Required = Required.Always)]
        public CashoutFieldset Cashout { get; set; }

        /// <summary>
        /// Multi-game
        /// </summary>
        [JsonProperty(PropertyName = "multi_game", Required = Required.Always)]
        public MultiGameFieldset MultiGame { get; set; }

        /// <summary>
        /// Show master result for software verification
        /// </summary>
        [JsonProperty(PropertyName = "show_master_result_for_software_verification", Required = Required.Always)]
        public Boolean ShowMasterResultForSoftwareVerification { get; set; }

        /// <summary>
        /// Platform enhanced display enabled
        /// </summary>
        [JsonProperty(PropertyName = "platform_enhanced_display_enabled", Required = Required.Always)]
        public Boolean PlatformEnhancedDisplayEnabled { get; set; }

        /// <summary>
        /// Secondary storage media required
        /// </summary>
        [JsonProperty(PropertyName = "secondary_storage_media_required", Required = Required.Always)]
        public Boolean SecondaryStorageMediaRequired { get; set; }

        /// <summary>
        /// Audit ticket
        /// </summary>
        [JsonProperty(PropertyName = "audit_ticket", Required = Required.Always)]
        public AuditTicketFieldset AuditTicket { get; set; }

        /// <summary>
        /// Handpay receipt printing enabled
        /// </summary>
        [JsonProperty(PropertyName = "handpay_receipt_printing_enabled", Required = Required.Always)]
        public Boolean HandpayReceiptPrintingEnabled { get; set; }

        /// <summary>
        /// Reserve service
        /// </summary>
        [JsonProperty(PropertyName = "reserve_service", Required = Required.Always)]
        public ReserveServiceFieldset ReserveService { get; set; }

        /// <summary>
        /// Wait for progressive initialization enabled
        /// </summary>
        [JsonProperty(PropertyName = "wait_for_progressive_initialization_enabled", Required = Required.Always)]
        public Boolean WaitForProgressiveInitializationEnabled { get; set; }

        /// <summary>
        /// Live authentication manager runs signature verification after reboot
        /// </summary>
        [JsonProperty(PropertyName = "live_authentication_manager_runs_signature_verification_after_reboot", Required = Required.Always)]
        public Boolean LiveAuthenticationManagerRunsSignatureVerificationAfterReboot { get; set; }

        /// <summary>
        /// Large win info shows wager
        /// </summary>
        [JsonProperty(PropertyName = "large_win_info_shows_wager", Required = Required.Always)]
        public Boolean LargeWinInfoShowsWager { get; set; }

        /// <summary>
        /// Display rather than require EGM reconfigure if topper disconnected
        /// Do not require the EGM to be reconfigured if the Topper gets disconnected. Note Topper must be connected for initial configure.
        /// </summary>
        [JsonProperty(PropertyName = "display_rather_than_require_egm_reconfigure_if_topper_disconnected", Required = Required.Always)]
        public Boolean DisplayRatherThanRequireEgmReconfigureIfTopperDisconnected { get; set; }
    }
}