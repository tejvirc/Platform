From 4c5b3bf23ff76e3388c54b681ccb6833a5c955e5 Mon Sep 17 00:00:00 2001
From: Wei Zhou <wei.zhou@aristocrat.com>
Date: Wed, 6 Jul 2022 13:08:26 +1000
Subject: [PATCH] Support No Currency in platform

---
 .../ApplicationConfigurationSettings.cs       |   4 +
 .../Settings/MachineSettings.cs               |  29 ++
 .../Settings/MachineSettings.xaml             |   2 +-
 .../ViewModels/CurrencyViewModel.cs           |  28 ++
 .../ViewModels/MachineSetupPageViewModel.cs   |  34 ++-
 .../ViewModels/NoCurrencyViewModel.cs         |  26 ++
 .../Views/MachineSetupPage.xaml               |   2 +-
 .../Helpers/CurrencyCultureHelper.cs          |  71 ++++-
 .../Localization/CurrencyCultureProvider.cs   | 270 ++++++++++++------
 ...tocrat.Monaco.Application.Contracts.csproj |   3 -
 .../Currency/Currency.cs                      |  55 +++-
 .../Currency/NoCurrency.cs                    |  57 ++++
 .../Currency/NoCurrencyFormat.cs              |  54 ++++
 .../Currency/NoCurrencyOptions.cs             | 108 +++++++
 .../Extensions/CurrencyExtensions.cs          | 174 +++++++----
 .../Extensions/TicketCurrencyExtensions.cs    |  24 ++
 .../Tickets/AuditTicket.cs                    |   2 +-
 .../Tickets/TextTicket.cs                     |   2 +-
 .../JurisdictionSettingsPageViewModel.cs      |  11 +-
 .../Commands/ConfigureClientCommandHandler.cs |  20 +-
 .../NoteAcceptor/INoteAcceptor.cs             |   3 +
 .../NoteAcceptor/NoteAcceptorAdapter.cs       |   9 +-
 .../CanceledCreditsTicketsCreatorTest.cs      |  21 +-
 .../HandpayTicketProxyTest.cs                 |  22 +-
 .../Tickets/BillEventLogTicketCreatorTest.cs  |  11 +
 .../CashSlipEventLogTicketCreatorTest.cs      |   9 +
 .../Tickets/VoucherTicketsCreatorTest.cs      |  21 +-
 .../VoucherOutTicketProxyTest.cs              |  20 +-
 .../BillsMetersPageViewModelTest.cs           |  12 +-
 .../HandpayMetersPageViewModelTest.cs         |   9 +-
 .../VoucherMetersPageViewModelTest.cs         |  11 +-
 .../Extensions/CurrencyExtensionsTests.cs     |  33 ++-
 .../Helper/CurrencyCultureHelperTest.cs       |  38 +--
 .../Tickets/EventLogTicketCreatorTest.cs      |  10 +
 .../Tickets/MetersTicketCreatorTest.cs        |  13 +-
 .../Tickets/PeriodicResetTicketCreatorTest.cs |  12 +-
 .../ConfigureClientCommandHandlerTests.cs     |  10 +-
 .../GameHelpTextProviderTest.cs               |   6 +-
 .../Tickets/AuditTicketCreatorTest.cs         |   9 +-
 .../Tickets/GameMetersTicketCreatorTest.cs    |  10 +-
 .../SingaporeClubsAuditTicketCreatorTest.cs   |  10 +-
 .../OperatorMenu/LogDetailsViewModelTest.cs   |   5 +-
 .../Services/HandpayValidatorTest.cs          |   5 +-
 .../Services/VoucherValidatorTest.cs          |   5 +-
 .../SASAftReceiptCreatorTest.cs               |   4 +-
 45 files changed, 1038 insertions(+), 256 deletions(-)
 create mode 100644 Application/Aristocrat.Monaco.Application.UI/ViewModels/CurrencyViewModel.cs
 create mode 100644 Application/Aristocrat.Monaco.Application.UI/ViewModels/NoCurrencyViewModel.cs
 create mode 100644 Application/Monaco.Application.Contracts/Currency/NoCurrency.cs
 create mode 100644 Application/Monaco.Application.Contracts/Currency/NoCurrencyFormat.cs
 create mode 100644 Application/Monaco.Application.Contracts/Currency/NoCurrencyOptions.cs

diff --git a/Application/Aristocrat.Monaco.Application.UI/Settings/ApplicationConfigurationSettings.cs b/Application/Aristocrat.Monaco.Application.UI/Settings/ApplicationConfigurationSettings.cs
index 275a4c32..b80090a8 100644
--- a/Application/Aristocrat.Monaco.Application.UI/Settings/ApplicationConfigurationSettings.cs
+++ b/Application/Aristocrat.Monaco.Application.UI/Settings/ApplicationConfigurationSettings.cs
@@ -16,6 +16,9 @@
     using Kernel.Contracts;
     using MVVM;
     using Application.Contracts.Localization;
+    using Aristocrat.Monaco.Application.Helpers;
+    using Aristocrat.Monaco.Application.UI.ViewModels;
+    using Aristocrat.Monaco.Application.Localization;
 
     /// <summary>
     ///     Implements the <see cref="IConfigurationSettings"/> interface.
@@ -122,6 +125,7 @@
                 disabledNotes = new DisabledNotes[0];
             }
 
+
             var noteAcceptorEnabled = _propertiesManager.GetValue(ApplicationConstants.NoteAcceptorEnabled, false);
             var printerEnabled = _propertiesManager.GetValue(ApplicationConstants.PrinterEnabled, false);
             var idReaderEnabled = _propertiesManager.GetValue(ApplicationConstants.IdReaderEnabled, false);
diff --git a/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.cs b/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.cs
index 8ac70c50..2285f1de 100644
--- a/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.cs
+++ b/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.cs
@@ -2,6 +2,8 @@
 {
     using System;
     using System.Collections.ObjectModel;
+    using System.Windows.Navigation;
+    using Application.Helpers;
     using Contracts.Extensions;
     using Contracts.Localization;
     using Contracts.Protocol;
@@ -11,6 +13,10 @@
     using MVVM.Model;
     using Newtonsoft.Json;
     using Contracts;
+    using Contracts.Currency;
+    using Kernel;
+    using Localization;
+    using ViewModels;
 
     /// <summary>
     ///     Application machine settings.
@@ -114,6 +120,29 @@
             set => SetProperty(ref _currencyDescription, value);
         }
 
+        /// <summary>
+        ///     Gets or sets the currency display text.
+        /// </summary>
+        public string CurrencyDisplayText
+        {
+            get
+            {
+                string currencyDisplayText = CurrencyDescription;
+                
+                var localization =
+                    ServiceManager.GetInstance().GetService<ILocalization>();
+                var currencyProvider = localization.GetProvider(CultureFor.Currency) as CurrencyCultureProvider;
+                if (currencyProvider?.ConfiguredCurrency != null)
+                {
+                    currencyDisplayText = (currencyProvider.ConfiguredCurrency is NoCurrency noCurrency) ?
+                        new NoCurrencyViewModel(noCurrency).DisplayText :
+                        new CurrencyViewModel(currencyProvider.ConfiguredCurrency).DisplayText;
+                }
+
+                return currencyDisplayText;
+            }
+        }
+
         /// <summary>
         ///     Gets or sets a list of operating hours.
         /// </summary>
diff --git a/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.xaml b/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.xaml
index 5fca80d5..1a713470 100644
--- a/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.xaml
+++ b/Application/Aristocrat.Monaco.Application.UI/Settings/MachineSettings.xaml
@@ -144,7 +144,7 @@
                     <TextBlock Style="{DynamicResource SettingNameStyle}"
                                Text="{lex:Loc {x:Static loc:ResourceKeys.Currency}}" />
                     <TextBlock Style="{DynamicResource SettingValueStyle}"
-                               Text="{Binding CurrencyDescription}" />
+                               Text="{Binding CurrencyDisplayText}" />
                 </StackPanel>
 
                 <StackPanel Orientation="Horizontal">
diff --git a/Application/Aristocrat.Monaco.Application.UI/ViewModels/CurrencyViewModel.cs b/Application/Aristocrat.Monaco.Application.UI/ViewModels/CurrencyViewModel.cs
new file mode 100644
index 00000000..4fa9818d
--- /dev/null
+++ b/Application/Aristocrat.Monaco.Application.UI/ViewModels/CurrencyViewModel.cs
@@ -0,0 +1,28 @@
+ï»¿namespace Aristocrat.Monaco.Application.UI.ViewModels
+{
+    using System;
+
+    using Contracts.Currency;
+
+    public class CurrencyViewModel
+    {
+#pragma warning disable CS3008 // Identifier is not CLS-compliant
+        protected readonly Currency _currency;
+#pragma warning restore CS3008 // Identifier is not CLS-compliant
+
+        public CurrencyViewModel(Currency currency)
+        {
+            _currency = currency ?? throw new ArgumentNullException(nameof(currency));
+        }
+
+        public string IsoCode => _currency.IsoCode;
+
+        public string Description => _currency.Description;
+
+        /// <summary>
+        /// Currency display value
+        /// </summary>
+        public virtual string DisplayText => _currency.DescriptionWithMinorSymbol;
+        
+    }
+}
diff --git a/Application/Aristocrat.Monaco.Application.UI/ViewModels/MachineSetupPageViewModel.cs b/Application/Aristocrat.Monaco.Application.UI/ViewModels/MachineSetupPageViewModel.cs
index 5b15d18e..27befe7a 100644
--- a/Application/Aristocrat.Monaco.Application.UI/ViewModels/MachineSetupPageViewModel.cs
+++ b/Application/Aristocrat.Monaco.Application.UI/ViewModels/MachineSetupPageViewModel.cs
@@ -24,8 +24,9 @@
 
         private INoteAcceptor _noteAcceptor;
         private bool _requireZeroCredit;
-        private Currency _selectedCurrency;
-        private List<Currency> _currencies;
+        private CurrencyViewModel _selectedCurrency;
+        private List<CurrencyViewModel> _currencies;
+
 
         public MachineSetupPageViewModel()
             : base(true)
@@ -56,7 +57,7 @@
             CurrencyChangeAllowed = configuration.Currency.Configurable;
         }
 
-        public List<Currency> Currencies
+        public List<CurrencyViewModel> Currencies
         {
             get => _currencies;
             set
@@ -66,7 +67,7 @@
             }
         }
 
-        public Currency SelectedCurrency
+        public CurrencyViewModel SelectedCurrency
         {
             get => _selectedCurrency;
             set
@@ -100,7 +101,7 @@
         {
             _noteAcceptor = _serviceManager.TryGetService<INoteAcceptor>();
 
-            _currencies = new List<Currency>();
+            _currencies = new List<CurrencyViewModel>();
             var currencyCode = PropertiesManager.GetValue(
                 ApplicationConstants.CurrencyId,
                 string.Empty);
@@ -111,12 +112,12 @@
 
             Logger.Info($"CultureInfo.CurrentCulture.Name {CultureInfo.CurrentCulture.Name} - currencyCode {currencyCode}");
 
-            _currencyDefaults = CurrencyCultureHelper.GetCurrencyDefaults();
+           
 
             var currencyDescription = (string)PropertiesManager.GetProperty(
                 ApplicationConstants.CurrencyDescription,
                 string.Empty);
-            _currencies.AddRange(CurrencyCultureHelper.GetSupportedCurrencies(currencyCode, _currencyDefaults, Logger, _noteAcceptor, CurrencyChangeAllowed).OrderBy(a => a.Description));
+            _currencies = GetSupportedCurrencies(currencyCode).ToList<CurrencyViewModel>();
 
             Currencies = _currencies;
 
@@ -126,7 +127,6 @@
             SelectedCurrency = currency;
         }
 
-        
 
         protected override void SaveChanges()
         {
@@ -165,5 +165,23 @@
 
             base.LoadAutoConfiguration();
         }
+
+        private IEnumerable<CurrencyViewModel> GetSupportedCurrencies(string currencyCode)
+        {
+            var currencies = CurrencyCultureHelper.GetSupportedCurrencies(
+                currencyCode,
+                _currencyDefaults,
+                Logger,
+                _noteAcceptor,
+                CurrencyChangeAllowed);
+
+            var orderedSet = currencies.OrderBy(a => a.Description).ToList();
+            var currencyVMs = orderedSet.Select(s => new CurrencyViewModel(s));
+
+            // Append No Currency options
+            currencyVMs = currencyVMs.Concat(CurrencyCultureHelper.GetNoCurrencies().Select(s => new NoCurrencyViewModel(s)));
+
+            return currencyVMs;
+        }
     }
 }
\ No newline at end of file
diff --git a/Application/Aristocrat.Monaco.Application.UI/ViewModels/NoCurrencyViewModel.cs b/Application/Aristocrat.Monaco.Application.UI/ViewModels/NoCurrencyViewModel.cs
new file mode 100644
index 00000000..b6977c83
--- /dev/null
+++ b/Application/Aristocrat.Monaco.Application.UI/ViewModels/NoCurrencyViewModel.cs
@@ -0,0 +1,26 @@
+ï»¿namespace Aristocrat.Monaco.Application.UI.ViewModels
+{
+    using Aristocrat.Monaco.Application.Contracts.Currency;
+
+    public class NoCurrencyViewModel : CurrencyViewModel
+    {
+        public NoCurrencyViewModel(NoCurrency currency) : base(currency)
+        {
+        }
+
+        public override string DisplayText => GetNoCurrencyDisplayText();
+        
+        private string GetNoCurrencyDisplayText()
+        {
+            string decimalText = _currency.Culture.NumberFormat.CurrencyDecimalDigits > 0 ?
+                $"0{_currency.Culture.NumberFormat.CurrencyDecimalSeparator}10" :
+                "(no sub-unit)";
+
+            const decimal defaultDescriptionAmount = 1000.00M;
+            string amountText = defaultDescriptionAmount.ToString($"C{_currency.Culture.NumberFormat.CurrencyDecimalDigits}", _currency.Culture);
+
+            string displayText = $"{NoCurrency.NoCurrencyName} {amountText} {decimalText}".Trim();
+            return displayText;
+        }
+    }
+}
diff --git a/Application/Aristocrat.Monaco.Application.UI/Views/MachineSetupPage.xaml b/Application/Aristocrat.Monaco.Application.UI/Views/MachineSetupPage.xaml
index c5df35a5..bc79cb44 100644
--- a/Application/Aristocrat.Monaco.Application.UI/Views/MachineSetupPage.xaml
+++ b/Application/Aristocrat.Monaco.Application.UI/Views/MachineSetupPage.xaml
@@ -41,7 +41,7 @@
         <ComboBox Grid.Column="0" Grid.Row="1" MinWidth="300" Width="Auto"
                   HorizontalAlignment="Left"
                   ItemsSource="{Binding Currencies}" 
-                  DisplayMemberPath="DescriptionWithMinorSymbol"
+                  DisplayMemberPath="DisplayText"
                   SelectedItem="{Binding SelectedCurrency}"
                   IsEnabled="{Binding CurrencyChangeAllowed}"/>
         <Label Grid.Column="0" Grid.Row="2" Margin="0 20 0 0"
diff --git a/Application/Aristocrat.Monaco.Application/Helpers/CurrencyCultureHelper.cs b/Application/Aristocrat.Monaco.Application/Helpers/CurrencyCultureHelper.cs
index d0da3e2b..85e7f002 100644
--- a/Application/Aristocrat.Monaco.Application/Helpers/CurrencyCultureHelper.cs
+++ b/Application/Aristocrat.Monaco.Application/Helpers/CurrencyCultureHelper.cs
@@ -18,6 +18,7 @@
     using log4net;
 
     using CurrencyDefaultsCurrencyInfo = Localization.CurrencyDefaultsCurrencyInfo;
+    using Aristocrat.Monaco.Application.Contracts.Extensions;
 
     public static class CurrencyCultureHelper
     {
@@ -50,8 +51,8 @@
             return defaults;
         }
 
-        public static List<Currency> GetSupportedCurrencies(string currencyCode,
-            IDictionary<string, CurrencyDefaultsCurrencyInfo> currencyDefaults,
+        public static List<Currency> GetSupportedCurrencies(string defaultCurrencyCode,
+            IDictionary<string, CurrencyDefaultsCurrencyInfo> currencyDefaultFormats,
             ILog logger,
             INoteAcceptor noteAcceptor,
             bool currencyChangeAllowed)
@@ -59,7 +60,7 @@
             Dictionary<string, List<int>> currencyFormats = new();
 
             var set = new List<Currency>();
-            
+
             // Get supported currencies from Windows system
             var currencies = CurrencyLoader.GetCurrenciesFromWindows(logger);
             foreach(var currencyInfo in currencies)
@@ -75,8 +76,8 @@
                 var region = new RegionInfo(culture.Name);
                 var currency = new Currency(currencyInfo.Key, region, culture);
 
-                if (currencyDefaults != null &&
-                    currencyDefaults.TryGetValue(currencyInfo.Key, out var defaults))
+                if (currencyDefaultFormats != null &&
+                    currencyDefaultFormats.TryGetValue(currencyInfo.Key, out var defaults))
                 {
                     if (defaults != null)
                     {
@@ -116,9 +117,9 @@
                 }
 
                 if (currencyAdded ||
-                    currencyCode == null ||
+                    //currencyCode == null ||
                     set.Any(c => c.IsoCode.Equals(currency.IsoCode, StringComparison.OrdinalIgnoreCase)) ||
-                    !currencyChangeAllowed && currency.IsoCode != currencyCode ||
+                    !currencyChangeAllowed && currency.IsoCode != defaultCurrencyCode ||
                     currencyChangeAllowed && noteAcceptor != null && !(noteAcceptor.GetSupportedNotes(currencyInfo.Key).Count > 0))
                 {
                     continue;
@@ -173,5 +174,61 @@
 
             return configuration?.Currency.Id ?? defaultValue;
         }
+
+        public static List<NoCurrency> GetNoCurrencies()
+        {
+            List<NoCurrency> noCurrencies = new List<NoCurrency>();
+
+            // go through No Currency format options and apply it to the culture info for each no currency
+            foreach (var currencyDef in NoCurrencyOptions.Options)
+            {
+                CultureInfo currencyCulture = (CultureInfo)CultureInfo.InvariantCulture.Clone();
+                ConfigureNoCurrencyCultureFormat(currencyDef.Id, currencyCulture);
+
+                NoCurrency noSymbolCurrency = new NoCurrency(currencyDef.Id, currencyCulture);
+                noCurrencies.Add(noSymbolCurrency);
+            }
+
+            return noCurrencies;
+        }
+
+        /// <summary>
+        /// Configure the currency format in the culture info for No Currency
+        /// </summary>
+        /// <param name="id">format id</param>
+        /// <param name="currencyCulture">Currency culture</param>
+        public static void ConfigureNoCurrencyCultureFormat(int id, CultureInfo currencyCulture)
+        {
+            var format = NoCurrencyOptions.Get(id);
+            currencyCulture.ApplyNoCurrencyFormat(format);
+        }
+
+        /// <summary>
+        /// Get the format id of No Currency
+        /// </summary>
+        /// <param name="currencyDesc"></param>
+        /// <returns></returns>
+        public static int GetNoCurrencyFormatId(string currencyDesc)
+        {
+            var id = NoCurrencyOptions.Options.FirstOrDefault(o =>
+                o.FormatString.Equals(currencyDesc.Substring(NoCurrency.NoCurrencyCode.Length + 1).Trim()))?.Id;
+
+            return id ?? -1;
+        }
+
+        /// <summary>
+        /// Check if the currency code is No Currency
+        /// </summary>
+        /// <param name="currencyCode"></param>
+        /// <returns></returns>
+        public static bool IsNoCurrency(string currencyCode)
+        {
+            if (string.IsNullOrWhiteSpace(currencyCode))
+            {
+                return false;
+            }
+
+            return currencyCode.Equals(NoCurrency.NoCurrencyCode);
+        }
     }
 }
diff --git a/Application/Aristocrat.Monaco.Application/Localization/CurrencyCultureProvider.cs b/Application/Aristocrat.Monaco.Application/Localization/CurrencyCultureProvider.cs
index 93006909..f754a993 100644
--- a/Application/Aristocrat.Monaco.Application/Localization/CurrencyCultureProvider.cs
+++ b/Application/Aristocrat.Monaco.Application/Localization/CurrencyCultureProvider.cs
@@ -7,6 +7,7 @@
     using System.Globalization;
     using System.Linq;
     using System.Reflection;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts;
     using Contracts.Extensions;
     using Contracts.Localization;
@@ -34,7 +35,9 @@
         private readonly ILocalization _localization;
 
         //private readonly Dictionary<string, CurrenciesCurrencyFormatOverride[]> _currencyCodeToFormatOverride = new();
-        private IDictionary<string, CurrencyDefaultsCurrencyInfo> _currencyDefaults = new Dictionary<string, CurrencyDefaultsCurrencyInfo>();
+        private IDictionary<string, CurrencyDefaultsCurrencyInfo> _currencyDefaults =
+            new Dictionary<string, CurrencyDefaultsCurrencyInfo>();
+
         private Collection<NoteDefinitions> _noteDefinitions = new();
         private readonly object _setCurrencyLock = new object();
 
@@ -68,6 +71,8 @@
 
         public override string ProviderName => CultureFor.Currency;
 
+        public Currency ConfiguredCurrency { get; private set; }
+
         protected override void OnInitialize()
         {
             _eventBus.Subscribe<PropertyChangedEvent>(this, _ => Initialize(), PropertyChangedEventFilter);
@@ -165,13 +170,13 @@
 
                             // get the currency override format 
                             var format = GetCurrencyOverrideFormat(currency.CurrencyCode);
-                            
+
                             _noteDefinitions.Add(
                                 new NoteDefinitions(
-                                        currency.CurrencyCode,
-                                        excludedDenoms,
-                                        format?.Multiplier ?? 0,
-                                        format?.MinorUnitSymbol));
+                                    currency.CurrencyCode,
+                                    excludedDenoms,
+                                    format?.Multiplier ?? 0,
+                                    format?.MinorUnitSymbol));
                         }
                     }
                     else
@@ -188,7 +193,7 @@
             _noteAcceptor?.SetNoteDefinitions(_noteDefinitions);
         }
 
-        private string SetUpCurrency()
+        private string GetConfiguredCurrencyCode()
         {
             lock (_setCurrencyLock)
             {
@@ -207,11 +212,14 @@
                     }
                 }
 
-                if (_noteAcceptor?.GetSupportedNotes(currencyCode).Count == 0)
+                // Don't need to check currency mismatch if it is No Currency
+                if (!CurrencyCultureHelper.IsNoCurrency(currencyCode) &&
+                    _noteAcceptor?.GetSupportedNotes(currencyCode).Count == 0)
                 {
                     var foundCurrencySymbol = GetNonNeutralCultureInfos()
                         .Select(culture => new RegionInfo(culture.Name))
-                        .FirstOrDefault(region => (bool)_noteAcceptor?.GetSupportedNotes(region.ISOCurrencySymbol).Any())
+                        .FirstOrDefault(
+                            region => (bool)_noteAcceptor?.GetSupportedNotes(region.ISOCurrencySymbol).Any())
                         ?.ISOCurrencySymbol;
                     if (foundCurrencySymbol != null)
                     {
@@ -234,88 +242,113 @@
         {
             lock (_setCurrencyLock)
             {
-                var currencyCode = SetUpCurrency();
+                var currencyCode = GetConfiguredCurrencyCode();
 
                 if (string.IsNullOrEmpty(currencyCode))
                 {
                     return;
                 }
 
-                var cultureInfo = _localization.CurrentCulture;
+                CultureInfo cultureInfo = null;
+                double currencyMultiplier = Currency.DefaultCurrencyMultiplier;
 
-                var cultureName = cultureInfo.Name;
-                if (!string.IsNullOrEmpty(cultureName))
+                if (CurrencyCultureHelper.IsNoCurrency(currencyCode))
                 {
-                    var currencySymbol = new RegionInfo(cultureName).ISOCurrencySymbol;
-                    if (currencySymbol.Equals(currencyCode))
-                    {
-                        cultureInfo = new CultureInfo(cultureName);
-                    }
-                    else
-                    {
-                        SetCultureInfo(currencyCode, ref cultureInfo);
-                    }
+                    cultureInfo = SetNoCurrencyFormat(currencyCode);
                 }
-                else
-                {
-                    SetCultureInfo(currencyCode, ref cultureInfo);
-                }
-
-                _noteAcceptor?.SetIsoCode(currencyCode);
 
-                if (!_properties.GetValue(PropertyKey.NoteIn, true))
+                if (cultureInfo == null)
                 {
-                    if (_noteAcceptor?.Denominations.Count > 0)
+                    cultureInfo = _localization.CurrentCulture;
+
+                    RegionInfo region;
+                    var cultureName = cultureInfo.Name;
+                    if (!string.IsNullOrEmpty(cultureName))
                     {
-                        foreach (var denom in _noteAcceptor.Denominations.ToArray())
+                        region = new RegionInfo(cultureName);
+                        var currencySymbol = region.ISOCurrencySymbol;
+                        if (currencySymbol.Equals(currencyCode))
+                        {
+                            cultureInfo = new CultureInfo(cultureName);
+                        }
+                        else
                         {
-                            _noteAcceptor.UpdateDenom(denom, false);
+                            FindCultureInfo(currencyCode, ref cultureInfo);
                         }
                     }
-                }
-
-                var minorUnitSymbol =
-                    _noteDefinitions != null && _noteDefinitions.Any(
-                        a => a.Code == currencyCode && !string.IsNullOrEmpty(a.MinorUnitSymbol))
-                        ? _noteDefinitions.First(a => a.Code == currencyCode).MinorUnitSymbol
-                        : GetDefaultMinorUnitSymbol(currencyCode);
-
-                var (minorUnits, minorUnitsPlural, pluralizeMajorUnits, pluralizeMinorUnits) =
-                    GetOverrideInformation(cultureInfo, currencyCode, ref minorUnitSymbol);
+                    else
+                    {
+                        FindCultureInfo(currencyCode, ref cultureInfo);
+                        region = new RegionInfo(cultureInfo.Name);
+                    }
 
-                var defaultMultiplier = CurrencyExtensions.SetCultureInfo(
-                    cultureInfo,
-                    minorUnits,
-                    minorUnitsPlural,
-                    pluralizeMajorUnits,
-                    pluralizeMinorUnits,
-                    minorUnitSymbol);
+                    UpdateNoteAcceptor(currencyCode);
+
+                    var minorUnitSymbol =
+                        _noteDefinitions != null && _noteDefinitions.Any(
+                            a => a.Code == currencyCode && !string.IsNullOrEmpty(a.MinorUnitSymbol))
+                            ? _noteDefinitions.First(a => a.Code == currencyCode).MinorUnitSymbol
+                            : GetDefaultMinorUnitSymbol(currencyCode);
+
+                    var (minorUnits, minorUnitsPlural, pluralizeMajorUnits, pluralizeMinorUnits) =
+                        GetOverrideInformation(cultureInfo, currencyCode, ref minorUnitSymbol);
+
+                    ConfiguredCurrency = new Currency(currencyCode, region, cultureInfo, minorUnitSymbol);
+                    CurrencyExtensions.Currency = ConfiguredCurrency;
+
+                    var defaultMultiplier = CurrencyExtensions.SetCultureInfo(
+                        currencyCode,
+                        cultureInfo,
+                        minorUnits,
+                        minorUnitsPlural,
+                        pluralizeMajorUnits,
+                        pluralizeMinorUnits,
+                        minorUnitSymbol);
+                    currencyMultiplier =
+                        _noteDefinitions != null &&
+                        _noteDefinitions.Any(a => a.Code == currencyCode && a.Multiplier > 0)
+                            ? _noteDefinitions.First(a => a.Code == currencyCode).Multiplier
+                            : defaultMultiplier;
+                }
 
-                var currencyMultiplier =
-                    _noteDefinitions != null && _noteDefinitions.Any(a => a.Code == currencyCode && a.Multiplier > 0)
-                        ? _noteDefinitions.First(a => a.Code == currencyCode).Multiplier
-                        : defaultMultiplier;
                 _properties.SetProperty(ApplicationConstants.CurrencyMultiplierKey, currencyMultiplier);
             }
         }
 
-        private CultureInfo LoadCultureInfo(string locale, string defaultLocale)
+
+        private CultureInfo LoadCultureInfoForCurrency(string locale, string currencyCode)
         {
             CultureInfo cultureInfo = null;
 
-            if (string.IsNullOrEmpty(locale))
+            try
             {
-                SetCultureInfo(defaultLocale, ref cultureInfo);
+                if (CurrencyCultureHelper.IsNoCurrency(currencyCode))
+                {
+                    // If selected currency is No Currency, use the invariant culture
+                    return (CultureInfo)CultureInfo.InvariantCulture.Clone();
+                }
+
+                if (string.IsNullOrEmpty(locale))
+                {
+                    FindCultureInfo(currencyCode, ref cultureInfo);
+                }
+                else
+                {
+                    // Use the locale language and the BNA currency code to find the correct culture for this player ticket locale
+                    cultureInfo = locale.Length == 2
+                        ? GetNonNeutralCultureInfos()
+                            .FirstOrDefault(
+                                c => c.TwoLetterISOLanguageName == locale &&
+                                     new RegionInfo(c.Name).ISOCurrencySymbol == currencyCode)
+                        : new CultureInfo(locale);
+
+                }
             }
-            else
+            catch (Exception e)
             {
-                // Use the locale language and the BNA currency code to find the correct culture for this player ticket locale
-                cultureInfo = locale.Length == 2
-                    ? GetNonNeutralCultureInfos()
-                        .FirstOrDefault(
-                            c => c.TwoLetterISOLanguageName == locale &&
-                                 new RegionInfo(c.Name).ISOCurrencySymbol == defaultLocale)
-                    : new CultureInfo(locale);
+                cultureInfo = _localization.CurrentCulture;
+
+                Logger.Error($"Failed to find the culture for ticket, configured locale: {locale}, currency: {currencyCode}", e);
             }
 
             return cultureInfo;
@@ -323,40 +356,51 @@
 
         private void SetTicketCultureInfo(PlayerTicketSelectionArrayEntry entry)
         {
-            var valueCultureInfo = LoadCultureInfo(
+            var currencyCode = _properties.GetValue(ApplicationConstants.CurrencyId, string.Empty);
+
+            var valueCultureInfo = LoadCultureInfoForCurrency(
                 entry.CurrencyValueLocale,
-                _properties.GetValue(ApplicationConstants.CurrencyId, string.Empty));
-            var wordsCultureInfo = LoadCultureInfo(
+                currencyCode);
+            var wordsCultureInfo = LoadCultureInfoForCurrency(
                 entry.CurrencyWordsLocale,
-                _properties.GetValue(ApplicationConstants.LocalizationPlayerTicketLocale, string.Empty));
+                currencyCode);
 
             if (valueCultureInfo == null || wordsCultureInfo == null)
             {
                 return;
             }
 
-            var currencyCode = _properties.GetValue(ApplicationConstants.CurrencyId, string.Empty);
-
-            var minorUnitSymbol =
+            if (!CurrencyCultureHelper.IsNoCurrency(currencyCode))
+            {
+                var minorUnitSymbol =
                 _noteDefinitions != null && _noteDefinitions.Any(
                     a => a.Code == currencyCode && !string.IsNullOrEmpty(a.MinorUnitSymbol))
                     ? _noteDefinitions.First(a => a.Code == currencyCode).MinorUnitSymbol
                     : GetDefaultMinorUnitSymbol(currencyCode);
 
-            var selectedOverride = GetOverrideSelectionFromCurrencyDefault(valueCultureInfo, currencyCode, ref minorUnitSymbol);
+                var selectedOverride = GetOverrideSelectionFromCurrencyDefault(valueCultureInfo, currencyCode, ref minorUnitSymbol);
 
-            var (minorUnits, minorUnitsPlural, pluralizeMajorUnits, pluralizeMinorUnits) =
-                GetOverrideInformation(wordsCultureInfo, currencyCode, ref minorUnitSymbol, selectedOverride);
+                var (minorUnits, minorUnitsPlural, pluralizeMajorUnits, pluralizeMinorUnits) =
+                    GetOverrideInformation(wordsCultureInfo, currencyCode, ref minorUnitSymbol, selectedOverride);
 
-            TicketCurrencyExtensions.SetCultureInfo(
-                entry.Locale,
-                valueCultureInfo,
-                wordsCultureInfo,
-                minorUnits,
-                minorUnitsPlural,
-                pluralizeMajorUnits,
-                pluralizeMinorUnits,
-                minorUnitSymbol);
+                TicketCurrencyExtensions.SetCultureInfo(
+                    entry.Locale,
+                    valueCultureInfo,
+                    wordsCultureInfo,
+                    minorUnits,
+                    minorUnitsPlural,
+                    pluralizeMajorUnits,
+                    pluralizeMinorUnits,
+                    minorUnitSymbol);
+            }
+            else
+            {
+                // No currency is configured
+                TicketCurrencyExtensions.SetCultureInfo(
+                    entry.Locale,
+                    valueCultureInfo,
+                    NoCurrency.NoCurrencyName);
+            }
         }
 
         private void SetTicketCurrency()
@@ -387,6 +431,60 @@
             }
         }
 
+        private CultureInfo SetNoCurrencyFormat(string currencyCode)
+        {
+            var noCurrencyCulture = (CultureInfo)CultureInfo.InvariantCulture.Clone();
+
+            var currencyDesc = _properties.GetValue(ApplicationConstants.CurrencyDescription, string.Empty);
+
+            int id = CurrencyCultureHelper.GetNoCurrencyFormatId(currencyDesc);
+
+            if (id >= 0)
+            {
+                CurrencyCultureHelper.ConfigureNoCurrencyCultureFormat(id, noCurrencyCulture);
+
+                CurrencyExtensions.SetCultureInfo(
+                    currencyCode,
+                    noCurrencyCulture,
+                    null,
+                    null,
+                    false,
+                    false,
+                    null);
+            }
+
+            // No Currency is not a valid ISO currency code, so we can't set it in the BNA
+            var supportedCurrencies = _noteAcceptor?.GetSupportedCurrencies();
+            if (supportedCurrencies?.Count > 0)
+            {
+                Logger.Debug($"No currency '{currencyDesc}' is configured. Use currency '{supportedCurrencies[0].ToString()}' to set BNA.");
+                // Use the first supported currency to set the BNA
+                UpdateNoteAcceptor(supportedCurrencies[0].ToString());
+            }
+
+
+            ConfiguredCurrency = new NoCurrency(id, noCurrencyCulture);
+            CurrencyExtensions.Currency = ConfiguredCurrency;
+
+            return noCurrencyCulture;
+        }
+
+        private void UpdateNoteAcceptor(string currencyCode)
+        {
+            _noteAcceptor?.SetIsoCode(currencyCode);
+
+            if (!_properties.GetValue(PropertyKey.NoteIn, true))
+            {
+                if (_noteAcceptor?.Denominations.Count > 0)
+                {
+                    foreach (var denom in _noteAcceptor.Denominations.ToArray())
+                    {
+                        _noteAcceptor.UpdateDenom(denom, false);
+                    }
+                }
+            }
+        }
+
         private (string minorUnits, string minorUnitsPlural, bool pluralizeMajorUnits, bool pluralizeMinorUnits)
             GetOverrideInformation(CultureInfo cultureInfo, string currencyCode, ref string minorUnitSymbol, CurrencyDefaultsCurrencyInfoFormat selectedOverride = null)
         {
@@ -412,7 +510,7 @@
                     overrideFormat.ExcludePluralizeMajorUnits = configuredCurrency?.Format?.ExcludePluralizeMajorUnits;
                     overrideFormat.ExcludePluralizeMinorUnits = configuredCurrency?.Format?.ExcludePluralizeMinorUnits;
                     unitResults = SetFormatOverrides(overrideFormat, cultureInfo, ref minorUnitSymbol);
-                    if (currencyDescription.Equals(cultureInfo.GetFormattedDescription()))
+                    if (currencyDescription.Equals(cultureInfo.GetFormattedDescription(currencyCode)))
                     {
                         return unitResults;
                     }
@@ -530,7 +628,7 @@
             return null;
         }
 
-        private void SetCultureInfo(string currencyCode, ref CultureInfo cultureInfo)
+        private void FindCultureInfo(string currencyCode, ref CultureInfo cultureInfo)
         {
             var currencyDescription = _properties.GetValue(ApplicationConstants.CurrencyDescription, string.Empty);
 
@@ -567,7 +665,7 @@
 
             _ = GetOverrideInformation(culture, currencyCode, ref minorSymbol);
 
-            return description.Equals(culture.GetFormattedDescription());
+            return description.Equals(culture.GetFormattedDescription(currencyCode));
         }
 
         private string GetDefaultMinorUnitSymbol(string currencyCode)
diff --git a/Application/Monaco.Application.Contracts/Aristocrat.Monaco.Application.Contracts.csproj b/Application/Monaco.Application.Contracts/Aristocrat.Monaco.Application.Contracts.csproj
index 497201f1..72aed2c7 100644
--- a/Application/Monaco.Application.Contracts/Aristocrat.Monaco.Application.Contracts.csproj
+++ b/Application/Monaco.Application.Contracts/Aristocrat.Monaco.Application.Contracts.csproj
@@ -139,7 +139,4 @@
     <PackageReference Include="Mono.Addins" Version="1.0.0" />
     <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
   </ItemGroup>
-  <ItemGroup>
-    <Folder Include="Currency\" />
-  </ItemGroup>
 </Project>
\ No newline at end of file
diff --git a/Application/Monaco.Application.Contracts/Currency/Currency.cs b/Application/Monaco.Application.Contracts/Currency/Currency.cs
index 970d802c..20fdfb13 100644
--- a/Application/Monaco.Application.Contracts/Currency/Currency.cs
+++ b/Application/Monaco.Application.Contracts/Currency/Currency.cs
@@ -10,6 +10,11 @@
     /// </summary>
     public class Currency
     {
+        /// <summary>
+        /// The default value of currency multiplier
+        /// </summary>
+        public static readonly long DefaultCurrencyMultiplier = 1M.DollarsToMillicents();
+
         /// <summary>
         /// Constructor
         /// </summary>
@@ -20,23 +25,61 @@
         public Currency(string isoCurrencyCode, RegionInfo region, CultureInfo culture, string minorUnitSymbol = null)
         {
             IsoCode = isoCurrencyCode;
-            Description = culture.GetFormattedDescription(region);
-            DescriptionWithMinorSymbol = CurrencyExtensions.GetDescriptionWithMinorSymbol(Description, minorUnitSymbol);
+            MinorUnitSymbol = minorUnitSymbol;
+            Description = culture.GetFormattedDescription(isoCurrencyCode, region);
+
+            Culture = culture;
         }
 
         /// <summary>
         /// Currency ISO code
         /// </summary>
-        public string IsoCode { get; }
+        public string IsoCode { get; protected set; }
 
         /// <summary>
         /// Description of currency
         /// </summary>
-        public string Description { get; }
+        public string Description { get; protected set; }
+
+        /// <summary>
+        /// The currency symbol
+        /// </summary>
+        public virtual string CurrencySymbol => Culture.NumberFormat.CurrencySymbol;
+
+        /// <summary>
+        /// Minor unit symbol
+        /// </summary>
+        public virtual string MinorUnitSymbol { get; }
+
+        /// <summary>
+        /// Culture used for the currency format
+        /// </summary>
+        public CultureInfo Culture { get; protected set; }
+
+        /// <summary>
+        /// The currency's english name
+        /// </summary>
+        public virtual string CurrencyName
+        {
+            get
+            {
+                RegionInfo region = new RegionInfo(Culture.Name);
+                var currencyNameArray = region.CurrencyEnglishName.Split(' ');
+                if (currencyNameArray.Length > 0)
+                {
+                    return currencyNameArray[currencyNameArray.Length - 1];
+                }
+
+                return IsoCode;
+            }
+        }
 
         /// <summary>
-        /// Description with minor symbol
+        ///     Gets Description with minor currency symbol of the current currency.
         /// </summary>
-        public string DescriptionWithMinorSymbol { get; }
+        public virtual string DescriptionWithMinorSymbol =>
+            string.IsNullOrEmpty(MinorUnitSymbol)
+                ? $"{Description}"
+                : $"{Description} 10{MinorUnitSymbol}";
     }
 }
\ No newline at end of file
diff --git a/Application/Monaco.Application.Contracts/Currency/NoCurrency.cs b/Application/Monaco.Application.Contracts/Currency/NoCurrency.cs
new file mode 100644
index 00000000..f2caeea0
--- /dev/null
+++ b/Application/Monaco.Application.Contracts/Currency/NoCurrency.cs
@@ -0,0 +1,57 @@
+ï»¿namespace Aristocrat.Monaco.Application.Contracts.Currency
+{
+    using System.Globalization;
+    using Extensions;
+
+    /// <summary>
+    /// The generic currency without having major and minor symbols
+    /// </summary>
+    public class NoCurrency : Currency
+    {
+        /// <summary>
+        /// The No Currency Code starts with NC
+        /// </summary>
+        public const string NoCurrencyCode = "NOC";
+
+        /// <summary>
+        /// The currency name for No Currency
+        /// </summary>
+        public const string NoCurrencyName = "No Currency";
+
+        /// <summary>
+        /// Constructor
+        /// </summary>
+        /// <param name="id">The currency id</param>
+        /// <param name="culture">The culture</param>
+        public NoCurrency(int id, CultureInfo culture) :
+            base(NoCurrencyCode, null, culture, null)
+        {
+            Id = id;
+            IsoCode = NoCurrencyCode;
+
+            Description = culture.GetFormattedDescription(NoCurrencyCode, null);
+
+            Culture = culture;
+        }
+
+        /// <summary>
+        /// The id of no currency option
+        /// </summary>
+        public int Id { get; }
+
+        /// <summary>
+        /// The currency symbol
+        /// </summary>
+        public override string CurrencySymbol => string.Empty;
+
+        /// <summary>
+        /// Minor unit symbol
+        /// </summary>
+        public override string MinorUnitSymbol => string.Empty;
+
+        /// <summary>
+        /// The currency's English name
+        /// </summary>
+        public override string CurrencyName => NoCurrencyName;
+    }
+}
diff --git a/Application/Monaco.Application.Contracts/Currency/NoCurrencyFormat.cs b/Application/Monaco.Application.Contracts/Currency/NoCurrencyFormat.cs
new file mode 100644
index 00000000..b78d9c1e
--- /dev/null
+++ b/Application/Monaco.Application.Contracts/Currency/NoCurrencyFormat.cs
@@ -0,0 +1,54 @@
+ï»¿namespace Aristocrat.Monaco.Application.Contracts.Currency
+{
+    using System.Globalization;
+
+    using Aristocrat.Monaco.Application.Contracts.Extensions;
+
+
+    /// <summary>
+    /// No currency format
+    /// </summary>
+    public class NoCurrencyFormat
+    {
+        /// <summary>
+        /// The currency id
+        /// </summary>
+        public int Id
+        {
+            get;
+            set;
+        }
+
+        /// <summary>
+        /// Currency group separator
+        /// </summary>
+        public string GroupSeparator
+        {
+            get;
+            set;
+        }
+
+        /// <summary>
+        /// 
+        /// </summary>
+        public string DecimalSeparator
+        {
+            get;
+            set;
+        }
+
+
+        /// <summary>
+        /// The format of No Currency option
+        /// </summary>
+        public string FormatString
+        {
+            get
+            {
+                CultureInfo culture = (CultureInfo)CultureInfo.InvariantCulture.Clone();
+                culture.ApplyNoCurrencyFormat(this);
+                return CurrencyExtensions.DefaultDescriptionAmount.FormattedCurrencyString(false, culture);
+            }
+        }
+    }
+}
diff --git a/Application/Monaco.Application.Contracts/Currency/NoCurrencyOptions.cs b/Application/Monaco.Application.Contracts/Currency/NoCurrencyOptions.cs
new file mode 100644
index 00000000..aa2f7313
--- /dev/null
+++ b/Application/Monaco.Application.Contracts/Currency/NoCurrencyOptions.cs
@@ -0,0 +1,108 @@
+ï»¿namespace Aristocrat.Monaco.Application.Contracts.Currency
+{
+    using System;
+    using System.Linq;
+
+    /// <summary>
+    /// No Currency options
+    /// </summary>
+    public static class NoCurrencyOptions
+    {
+        private static readonly NoCurrencyFormat[] NoCurrencyDefinitions = new NoCurrencyFormat[]
+            {
+                // 1,000.00 0.10
+                new ()
+                {
+                    Id = 1,
+                    GroupSeparator = ",",
+                    DecimalSeparator = ".",
+                },
+                // 1,000 (no sub-unit)
+                new ()
+                {
+                    Id = 2,
+                    GroupSeparator = ",",
+                    DecimalSeparator = string.Empty,
+                },
+                // 1.000,00 0,10
+                new ()
+                {
+                    Id = 3,
+                    GroupSeparator = ".",
+                    DecimalSeparator = ",",
+                },
+                // 1.000 (no sub-unit)
+                new ()
+                {
+                    Id = 4,
+                    GroupSeparator = ".",
+                    DecimalSeparator = string.Empty
+                },
+                // 1 000.00 0.10
+                new ()
+                {
+                    Id = 5,
+                    GroupSeparator = " ",
+                    DecimalSeparator = "."
+                },
+                // 1 000,00 0,10
+                new ()
+                {
+                    Id = 6,
+                    GroupSeparator = " ",
+                    DecimalSeparator = ","
+                },
+                // 1 000 (no sub-unit)
+                new ()
+                {
+                    Id = 7,
+                    GroupSeparator = " ",
+                    DecimalSeparator = string.Empty
+                },
+                // 1000.00 0,10
+                new ()
+                {
+                    Id = 8,
+                    GroupSeparator = string.Empty,
+                    DecimalSeparator = ","
+                },
+                // 1000.00 0.10
+                new ()
+                {
+                    Id = 9,
+                    GroupSeparator = string.Empty,
+                    DecimalSeparator = "."
+                },
+                // 1000 (no sub-unit)
+                new ()
+                {
+                    Id = 10,
+                    GroupSeparator = string.Empty,
+                    DecimalSeparator = string.Empty
+                },
+            };
+
+        /// <summary>
+        /// The options for No Currency
+        /// </summary>
+        public static NoCurrencyFormat[] Options => NoCurrencyDefinitions;
+
+
+        /// <summary>
+        /// The indexer of No currency option
+        /// </summary>
+        /// <param name="id"></param>
+        /// <returns></returns>
+        public static NoCurrencyFormat Get(int id)
+        {
+            if (id < 1 || id > NoCurrencyDefinitions.Length)
+            {
+                throw new IndexOutOfRangeException();
+            }
+
+            return NoCurrencyDefinitions.FirstOrDefault(c => c.Id == id);
+        }
+
+
+    }
+}
diff --git a/Application/Monaco.Application.Contracts/Extensions/CurrencyExtensions.cs b/Application/Monaco.Application.Contracts/Extensions/CurrencyExtensions.cs
index 808564e0..4426c0b3 100644
--- a/Application/Monaco.Application.Contracts/Extensions/CurrencyExtensions.cs
+++ b/Application/Monaco.Application.Contracts/Extensions/CurrencyExtensions.cs
@@ -6,6 +6,7 @@
     using Localization;
     using log4net;
     using Monaco.Localization.Properties;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
 
     /// <summary>
     ///     CurrencyExtensions
@@ -25,34 +26,44 @@
         private static string _minorUnitsPlural;
 
         /// <summary>
-        ///     Gets currency symbol.
+        /// The default amount used to generate currency description
         /// </summary>
-        public static string CurrencySymbol { get; private set; } = string.Empty;
+        public const decimal DefaultDescriptionAmount = 1000.00M;
 
-        /// <summary>
-        ///     Gets currency minor symbol.
-        /// </summary>
-        public static string MinorUnitSymbol { get; private set; } = string.Empty;
+        ///// <summary>
+        /////     Gets currency symbol.
+        ///// </summary>
+        //public static string CurrencySymbol { get; private set; } = string.Empty;
+
+        ///// <summary>
+        /////     Gets currency minor symbol.
+        ///// </summary>
+        //public static string MinorUnitSymbol { get; private set; } = string.Empty;
+
+        ///// <summary>
+        /////     Gets currency symbol.
+        ///// </summary>
+        //public static string CurrencyName { get; private set; } = string.Empty;
 
         /// <summary>
-        ///     Gets currency symbol.
+        /// The configured currency
         /// </summary>
-        public static string CurrencyName { get; private set; } = string.Empty;
+        public static Currency Currency { get; set; }
 
         /// <summary>
         ///     Gets the currency minor Units per major.
         /// </summary>
         public static decimal CurrencyMinorUnitsPerMajorUnit { get; private set; } = 100M;
 
-        /// <summary>
-        ///     Gets Description of the current currency.
-        /// </summary>
-        public static string Description { get; private set; } = string.Empty;
+        ///// <summary>
+        /////     Gets Description of the current currency.
+        ///// </summary>
+        //public static string Description { get; private set; } = string.Empty;
 
-        /// <summary>
-        ///     Gets Description with minor currency symbol of the current currency.
-        /// </summary>
-        public static string DescriptionWithMinorSymbol { get; private set; } = string.Empty;
+        ///// <summary>
+        /////     Gets Description with minor currency symbol of the current currency.
+        ///// </summary>
+        //public static string DescriptionWithMinorSymbol { get; private set; } = string.Empty;
 
         /// <summary>
         ///     Gets the currency culture info.
@@ -338,14 +349,28 @@
         /// <returns>Formatted denom string.</returns>
         public static string FormattedDenomString(this long amount)
         {
+            // check if the currency has symbols
+            bool isNoCurrency = string.IsNullOrEmpty(CurrencyCultureInfo.NumberFormat.CurrencySymbol) &&
+                                string.IsNullOrEmpty(Currency.MinorUnitSymbol);
+            if (isNoCurrency)
+            {
+                // for No Currency with subunits, we will show two digits in subunits
+                // eg. No Currency 1,000.00 10c, we display denoms as 0.01, 0.02, 0.05, 0.10, 1, 2, 5, etc
+                //     No Currency 1,000, we display denoms as 1, 2, 5, 10, 100, 200, 500, etc
+                return amount.CentsToDollars().ToString(
+                    $"C{CurrencyCultureInfo.NumberFormat.CurrencyDecimalDigits}",
+                    CurrencyCultureInfo);
+            }
+
             return amount >= CurrencyMinorUnitsPerMajorUnit
                 ? amount.CentsToDollars().ToString("C0", CurrencyCultureInfo)
-                : $"{amount}{MinorUnitSymbol}";
+                : $"{amount}{Currency.MinorUnitSymbol}";
         }
 
         /// <summary>
         ///     Set culture information for the currency string.
         /// </summary>
+        /// <param name="currencyCode">currency code</param>
         /// <param name="cultureInfo">CultureInfo.</param>
         /// <param name="minorUnits">Minor currency units.</param>
         /// <param name="minorUnitsPlural">Minor currency units plural form.</param>
@@ -354,6 +379,7 @@
         /// <param name="minorUnitSymbol">Minor Unit Symbol</param>
         /// <returns>Dollars to millicents conversion</returns>
         public static long SetCultureInfo(
+            string currencyCode,
             CultureInfo cultureInfo,
             string minorUnits = null,
             string minorUnitsPlural = null,
@@ -367,38 +393,45 @@
                     cultureInfo.NumberFormat.NativeDigits.Length,
                     cultureInfo.NumberFormat.CurrencyDecimalDigits));
 
-            var region = new RegionInfo(CurrencyCultureInfo.Name);
-
-            CurrencySymbol = cultureInfo.NumberFormat.CurrencySymbol;
-            MinorUnitSymbol = minorUnitSymbol ?? string.Empty;
-            Description = GetFormattedDescription(cultureInfo, region);
-            DescriptionWithMinorSymbol = GetDescriptionWithMinorSymbol(Description, MinorUnitSymbol);
-
-            Logger.Debug($"SetCultureInfo: {cultureInfo.Name} - {DescriptionWithMinorSymbol}");
+            RegionInfo region = null;
 
-            var currencyNameArray = region.CurrencyEnglishName.Split(' ');
-            if (currencyNameArray.Length > 0)
+            if (!string.IsNullOrEmpty(CurrencyCultureInfo.Name))
             {
-                CurrencyName = currencyNameArray[currencyNameArray.Length - 1];
-                _majorUnitsPlural = pluralizeMajorUnits
-                    ? CurrencyName.PluralizeWord()
-                    : CurrencyName;
+                region = new RegionInfo(CurrencyCultureInfo.Name);
             }
 
-            if (!string.IsNullOrEmpty(minorUnits))
-            {
-                _minorUnits = minorUnits;
-            }
+            //CurrencySymbol = cultureInfo.NumberFormat.CurrencySymbol;
 
-            if (!string.IsNullOrEmpty(minorUnitsPlural))
-            {
-                _minorUnitsPlural = minorUnitsPlural;
-            }
-            else
+            //Description = GetFormattedDescription(cultureInfo, currencyCode, region);
+            //DescriptionWithMinorSymbol = GetDescriptionWithMinorSymbol(Description, MinorUnitSymbol);
+
+            //Logger.Debug($"SetCultureInfo: {cultureInfo.Name} - {DescriptionWithMinorSymbol}");
+
+            if (region != null)
             {
-                _minorUnitsPlural = pluralizeMinorUnits
-                    ? _minorUnits.PluralizeWord()
-                    : _minorUnits;
+                if (Currency == null)
+                {
+                    throw new ArgumentException("Currency is not configured");
+                }
+                _majorUnitsPlural = pluralizeMajorUnits
+                    ? Currency.CurrencyName.PluralizeWord()
+                    : Currency.CurrencyName;
+
+                if (!string.IsNullOrEmpty(minorUnits))
+                {
+                    _minorUnits = minorUnits;
+                }
+
+                if (!string.IsNullOrEmpty(minorUnitsPlural))
+                {
+                    _minorUnitsPlural = minorUnitsPlural;
+                }
+                else
+                {
+                    _minorUnitsPlural = pluralizeMinorUnits
+                        ? _minorUnits.PluralizeWord()
+                        : _minorUnits;
+                }
             }
 
             return 1M.DollarsToMillicents();
@@ -424,7 +457,7 @@
             var majorUnits = (long)amount;
             var minorUnits = (int)((amount - majorUnits) * 100);
             var textualAmount = majorUnits == 1
-                ? $"{majorUnits.NumberToWords(CurrencyCultureInfo)} {CurrencyName}"
+                ? $"{majorUnits.NumberToWords(CurrencyCultureInfo)} {Currency.CurrencyName}"
                 : $"{majorUnits.NumberToWords(CurrencyCultureInfo)} {_majorUnitsPlural}";
 
             if (CurrencyCultureInfo.NumberFormat.CurrencyDecimalDigits == 0)
@@ -438,33 +471,52 @@
             return toUpper ? textualAmount.ToUpper(CurrencyCultureInfo) : textualAmount;
         }
 
-        /// <summary>
-        /// Gets the description with the minor unit symbol.
-        /// </summary>
-        /// <param name="description">The description.</param>
-        /// <param name="minorUnitSymbol">The minor unit symbol.</param>
-        /// <returns>The description with minor symbol.</returns>
-        public static string GetDescriptionWithMinorSymbol(string description, string minorUnitSymbol)
-        {
-            return string.IsNullOrEmpty(minorUnitSymbol)
-                ? $"{description}"
-                : $"{description} 10{minorUnitSymbol}";
-        }
+        ///// <summary>
+        ///// Gets the description with the minor unit symbol.
+        ///// </summary>
+        ///// <param name="description">The description.</param>
+        ///// <param name="minorUnitSymbol">The minor unit symbol.</param>
+        ///// <returns>The description with minor symbol.</returns>
+        //public static string GetDescriptionWithMinorSymbol(string description, string minorUnitSymbol)
+        //{
+        //    return string.IsNullOrEmpty(minorUnitSymbol)
+        //        ? $"{description}"
+        //        : $"{description} 10{minorUnitSymbol}";
+        //}
 
         /// <summary>
         /// Gets the formatted currency description for the specified region.
         /// </summary>
         /// <param name="culture">The culture.</param>
+        /// <param name="isoCurrencyCode">currency code</param>
         /// <param name="region">The region.</param>
         /// <returns>The formatted description, which includes the currency's English name, ISO symbol, and formatted currency value.</returns>
-        public static string GetFormattedDescription(this CultureInfo culture, RegionInfo region = null)
+        public static string GetFormattedDescription(this CultureInfo culture, string isoCurrencyCode, RegionInfo region = null)
         {
-            const decimal defaultDescriptionAmount = 1000.00M;
-
-            region ??= new RegionInfo(culture.Name);
+            region ??= !string.IsNullOrEmpty(culture.Name) ? new RegionInfo(culture.Name) : null;
 
             return
-                $"{region.CurrencyEnglishName} {region.ISOCurrencySymbol} {FormattedCurrencyString(defaultDescriptionAmount, false, culture)}";
+                $"{region?.CurrencyEnglishName} {isoCurrencyCode} {FormattedCurrencyString(DefaultDescriptionAmount, false, culture)}".Trim();
+        }
+
+        /// <summary>
+        /// Apply no currency format on the culture
+        /// </summary>
+        /// <param name="currencyCulture"></param>
+        /// <param name="format"></param>
+        public static void ApplyNoCurrencyFormat(this CultureInfo currencyCulture, NoCurrencyFormat format)
+        {
+            currencyCulture.NumberFormat.CurrencySymbol = string.Empty;
+            currencyCulture.NumberFormat.CurrencyGroupSeparator = format.GroupSeparator;
+            if (!string.IsNullOrEmpty(format.DecimalSeparator))
+            {
+                currencyCulture.NumberFormat.CurrencyDecimalSeparator = format.DecimalSeparator;
+                currencyCulture.NumberFormat.CurrencyDecimalDigits = 2;
+            }
+            else
+            {
+                currencyCulture.NumberFormat.CurrencyDecimalDigits = 0;
+            }
         }
     }
 }
\ No newline at end of file
diff --git a/Application/Monaco.Application.Contracts/Extensions/TicketCurrencyExtensions.cs b/Application/Monaco.Application.Contracts/Extensions/TicketCurrencyExtensions.cs
index c28fe0d4..b9e1c194 100644
--- a/Application/Monaco.Application.Contracts/Extensions/TicketCurrencyExtensions.cs
+++ b/Application/Monaco.Application.Contracts/Extensions/TicketCurrencyExtensions.cs
@@ -118,6 +118,30 @@
             PlayerTicketToCurrencyCultureDataMap[playerTicketLocale] = cultureData;
         }
 
+        /// <summary>
+        /// Set culture information for the currency string.
+        /// </summary>
+        /// <param name="playerTicketLocale">ticket locale</param>
+        /// <param name="cultureInfo">currency culture info</param>
+        /// <param name="currencyName">Currency name</param>
+        public static void SetCultureInfo(
+            string playerTicketLocale,
+            CultureInfo cultureInfo,
+            string currencyName)
+        {
+            var cultureData = new CurrencyCultureData(
+                cultureInfo,
+                cultureInfo,
+                string.Empty,
+                String.Empty,
+                currencyName,
+                false,
+                false,
+                string.Empty,
+                currencyName);
+            PlayerTicketToCurrencyCultureDataMap[playerTicketLocale] = cultureData;
+        }
+
         /// <summary>This function will convert a currency to its word representation.</summary>
         /// <param name="amount">The amount.</param>
         /// <param name="toUpper">Whether or not to convert the words to upper case.</param>
diff --git a/Application/Monaco.Application.Contracts/Tickets/AuditTicket.cs b/Application/Monaco.Application.Contracts/Tickets/AuditTicket.cs
index 3cb1fe96..41eaea0a 100644
--- a/Application/Monaco.Application.Contracts/Tickets/AuditTicket.cs
+++ b/Application/Monaco.Application.Contracts/Tickets/AuditTicket.cs
@@ -105,7 +105,7 @@
             }
 
             // Currency name
-            AddLabeledLine(ResourceKeys.Currency, CurrencyExtensions.CurrencyName);
+            AddLabeledLine(ResourceKeys.Currency, CurrencyExtensions.Currency.CurrencyName);
 
             AddLine(null, null, null);
         }
diff --git a/Application/Monaco.Application.Contracts/Tickets/TextTicket.cs b/Application/Monaco.Application.Contracts/Tickets/TextTicket.cs
index 35802089..cd5622f7 100644
--- a/Application/Monaco.Application.Contracts/Tickets/TextTicket.cs
+++ b/Application/Monaco.Application.Contracts/Tickets/TextTicket.cs
@@ -286,7 +286,7 @@
                   string.Format(
                       CultureInfo.CurrentCulture,
                       "{0}",
-                      CurrencyExtensions.CurrencyName));
+                      CurrencyExtensions.Currency.CurrencyName));
             }
         }
 
diff --git a/Gaming/Aristocrat.Monaco.Gaming.UI/ViewModels/OperatorMenu/JurisdictionSettingsPageViewModel.cs b/Gaming/Aristocrat.Monaco.Gaming.UI/ViewModels/OperatorMenu/JurisdictionSettingsPageViewModel.cs
index 859b18aa..73b0526e 100644
--- a/Gaming/Aristocrat.Monaco.Gaming.UI/ViewModels/OperatorMenu/JurisdictionSettingsPageViewModel.cs
+++ b/Gaming/Aristocrat.Monaco.Gaming.UI/ViewModels/OperatorMenu/JurisdictionSettingsPageViewModel.cs
@@ -6,7 +6,9 @@
     using Application.Contracts.Localization;
     using Application.Contracts.OperatorMenu;
     using Application.UI.OperatorMenu;
-    using Aristocrat.Monaco.Application.Contracts.Extensions;
+    using Application.UI.ViewModels;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
+    using Aristocrat.Monaco.Application.Localization;
     using Contracts;
     using Contracts.Tickets;
     using Hardware.Contracts.HardMeter;
@@ -28,7 +30,12 @@
         {
             Jurisdiction = PropertiesManager.GetValue(ApplicationConstants.JurisdictionKey, string.Empty);
 
-            Currency = CurrencyExtensions.DescriptionWithMinorSymbol;
+            var localization =
+                ServiceManager.GetInstance().GetService<ILocalization>();
+            var currencyProvider = localization.GetProvider(CultureFor.Currency) as CurrencyCultureProvider;
+            Currency = (currencyProvider?.ConfiguredCurrency is NoCurrency noCurrency) ?
+                        new NoCurrencyViewModel(noCurrency).DisplayText :
+                        new CurrencyViewModel(currencyProvider?.ConfiguredCurrency).DisplayText;
 
             _defaultAnyGameMinimum = PropertiesManager.GetValue(GamingConstants.AnyGameMinimumReturnToPlayer, int.MinValue);
             _defaultAnyGameMaximum = PropertiesManager.GetValue(GamingConstants.AnyGameMaximumReturnToPlayer, int.MaxValue);
diff --git a/Gaming/Aristocrat.Monaco.Gaming/Commands/ConfigureClientCommandHandler.cs b/Gaming/Aristocrat.Monaco.Gaming/Commands/ConfigureClientCommandHandler.cs
index c7068eef..5b24548f 100644
--- a/Gaming/Aristocrat.Monaco.Gaming/Commands/ConfigureClientCommandHandler.cs
+++ b/Gaming/Aristocrat.Monaco.Gaming/Commands/ConfigureClientCommandHandler.cs
@@ -113,15 +113,27 @@
                         _ => "play"
                     });
 
+            // get the currency code
+            var currencyCode = _properties.GetValue(ApplicationConstants.CurrencyId, string.Empty);
+
+            string denom = denomination.Value.MillicentsToCents().ToString();
+            string activeDenoms = string.Join(",", activeDenominations.Select(d => d.Value.MillicentsToCents()));
+
+            //if (CurrencyCultureHelper.IsNoCurrency(currencyCode))
+            //{
+            //    denom = denomination.Value.MillicentsToDollars().ToString();
+            //    activeDenoms = string.Join(",", activeDenominations.Select(d => d.Value.MillicentsToDollars()));
+            //}
+
             var parameters = new Dictionary<string, string>
             {
                 { "/Runtime/Variation/SelectedID", currentGame.VariationId },
-                { "/Runtime/Denomination", denomination.Value.MillicentsToCents().ToString() },
-                { "/Runtime/ActiveDenominations", string.Join(",", activeDenominations.Select(d => d.Value.MillicentsToCents())) },
+                { "/Runtime/Denomination", denom },
+                { "/Runtime/ActiveDenominations", activeDenoms },
                 { "/Runtime/Flags&RequireGameStartPermission", "true" },
                 { "/Runtime/Localization/Language", _properties.GetValue(GamingConstants.SelectedLocaleCode, "en-us") },
-                { "/Runtime/Localization/Currency&symbol", CurrencyExtensions.CurrencyCultureInfo.NumberFormat.CurrencySymbol },
-                { "/Runtime/Localization/Currency&minorSymbol", CurrencyExtensions.MinorUnitSymbol },
+                { "/Runtime/Localization/Currency&symbol", CurrencyExtensions.Currency.CurrencySymbol },
+                { "/Runtime/Localization/Currency&minorSymbol", CurrencyExtensions.Currency.MinorUnitSymbol },
                 { "/Runtime/Localization/Currency&positivePattern", CurrencyExtensions.CurrencyCultureInfo.NumberFormat.CurrencyPositivePattern.ToString() },
                 { "/Runtime/Localization/Currency&negativePattern", CurrencyExtensions.CurrencyCultureInfo.NumberFormat.CurrencyNegativePattern.ToString() },
                 { "/Runtime/Localization/Currency&decimalDigits", CurrencyExtensions.CurrencyCultureInfo.NumberFormat.CurrencyDecimalDigits.ToString() },
diff --git a/Hardware/Aristocrat.Monaco.Hardware.Contracts/NoteAcceptor/INoteAcceptor.cs b/Hardware/Aristocrat.Monaco.Hardware.Contracts/NoteAcceptor/INoteAcceptor.cs
index 770e9c1e..fdee7262 100644
--- a/Hardware/Aristocrat.Monaco.Hardware.Contracts/NoteAcceptor/INoteAcceptor.cs
+++ b/Hardware/Aristocrat.Monaco.Hardware.Contracts/NoteAcceptor/INoteAcceptor.cs
@@ -230,6 +230,9 @@ namespace Aristocrat.Monaco.Hardware.Contracts.NoteAcceptor
         /// <returns>Supported notes.</returns>
         Collection<int> GetSupportedNotes(string isoCode = null);
 
+        /// <summary>Supported ISO codes by BNA</summary>
+        List<ISOCurrencyCode> GetSupportedCurrencies();
+
         /// <summary>
         ///     Gets whether the note for the given denomination is disabled.
         /// </summary>
diff --git a/Hardware/Aristocrat.Monaco.Hardware/NoteAcceptor/NoteAcceptorAdapter.cs b/Hardware/Aristocrat.Monaco.Hardware/NoteAcceptor/NoteAcceptorAdapter.cs
index 71b00685..6f39b719 100644
--- a/Hardware/Aristocrat.Monaco.Hardware/NoteAcceptor/NoteAcceptorAdapter.cs
+++ b/Hardware/Aristocrat.Monaco.Hardware/NoteAcceptor/NoteAcceptorAdapter.cs
@@ -289,7 +289,6 @@
                             {
                                 if (!supportedNotes.Contains(denom))
                                 {
-                                    Logger.Info($"Added supported note {denom} for ISO {isoCode}");
                                     supportedNotes.Add(denom);
                                 }
                             }
@@ -303,6 +302,14 @@
             return _supportedNotes;
         }
 
+        /// <inheritdoc />
+        public List<ISOCurrencyCode> GetSupportedCurrencies()
+        {
+            var currencies = Implementation?.SupportedNotes?.Select(n => n.CurrencyCode).Distinct();
+
+            return currencies?.ToList();
+        }
+
         /// <inheritdoc />
         public void SetIsoCode(string isoCode)
         {
diff --git a/Test/Aristocrat.Monaco.Accounting.Tests/CanceledCreditsTicketsCreatorTest.cs b/Test/Aristocrat.Monaco.Accounting.Tests/CanceledCreditsTicketsCreatorTest.cs
index 212b3f32..c6cc8095 100644
--- a/Test/Aristocrat.Monaco.Accounting.Tests/CanceledCreditsTicketsCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Accounting.Tests/CanceledCreditsTicketsCreatorTest.cs
@@ -4,6 +4,7 @@
     using System.Globalization;
     using Application.Contracts;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts;
     using Contracts.Handpay;
     using Handpay;
@@ -46,21 +47,27 @@
             _propertiesManager = SetupMockPropertiesManager();
             SetupFakePrinter();
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
+
             _transaction = SetupDummyTransaction();
             _time.Setup(mock => mock.GetLocationTime(TransactionTimestamp)).Returns(TransactionTimestamp).Verifiable();
 
-            TicketCurrencyExtensions.PlayerTicketLocale = "en-US";
+            TicketCurrencyExtensions.PlayerTicketLocale = cultureName;
             TicketCurrencyExtensions.SetCultureInfo(
-                "en-US",
-                new CultureInfo("en-US"),
-                new CultureInfo("en-US"),
+                cultureName,
+                new CultureInfo(cultureName),
+                new CultureInfo(cultureName),
                 "Cent",
                 "Cents",
                 true,
                 true,
-                "c"                
-            );
+                minorUnitSymbol);
 
             _propertiesManager.Setup(m => m.GetProperty(ApplicationConstants.ConfigWizardIdentityPageZoneOverride, It.IsAny<IdentityFieldOverride>()))
                 .Returns((IdentityFieldOverride)null);
diff --git a/Test/Aristocrat.Monaco.Accounting.Tests/HandpayTicketProxyTest.cs b/Test/Aristocrat.Monaco.Accounting.Tests/HandpayTicketProxyTest.cs
index e21a8329..5a7232a8 100644
--- a/Test/Aristocrat.Monaco.Accounting.Tests/HandpayTicketProxyTest.cs
+++ b/Test/Aristocrat.Monaco.Accounting.Tests/HandpayTicketProxyTest.cs
@@ -4,6 +4,7 @@
     using System.Globalization;
     using Application.Contracts;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts;
     using Contracts.Handpay;
     using Handpay;
@@ -41,20 +42,27 @@
             _time = MoqServiceManager.CreateAndAddService<ITime>(MockBehavior.Strict, true);
             _propertiesManager = MoqServiceManager.CreateAndAddService<IPropertiesManager>(MockBehavior.Strict, true);
             _printer = MoqServiceManager.CreateAndAddService<IPrinter>(MockBehavior.Strict, true);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
+
             _target = new HandpayTicketProxy();
 
-            TicketCurrencyExtensions.PlayerTicketLocale = "en-US";
+            TicketCurrencyExtensions.PlayerTicketLocale = cultureName;
             TicketCurrencyExtensions.SetCultureInfo(
-                "en-US",
-                new CultureInfo("en-US"),
-                new CultureInfo("en-US"),
+                cultureName,
+                new CultureInfo(cultureName),
+                new CultureInfo(cultureName),
                 "Cent",
                 "Cents",
                 true,
                 true,
-                "c"
-            );
+                minorUnitSymbol);
         }
 
         /// <summary>
diff --git a/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/BillEventLogTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/BillEventLogTicketCreatorTest.cs
index 9e91dd6f..e0c2e044 100644
--- a/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/BillEventLogTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/BillEventLogTicketCreatorTest.cs
@@ -2,9 +2,12 @@
 {
     using System;
     using System.Collections.Generic;
+    using System.Globalization;
     using System.Linq;
     using Accounting.Tickets;
     using Application.Contracts;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
+    using Aristocrat.Monaco.Application.Contracts.Extensions;
     using Contracts;
     using Contracts.Tickets;
     using Hardware.Contracts.IO;
@@ -116,6 +119,14 @@
             _printerMock.Setup(mock => mock.GetCharactersPerLine(false, 0)).Returns(36);
 
             _target = new BillEventLogTicketCreator();
+
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
         }
 
         /// <summary>
diff --git a/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/CashSlipEventLogTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/CashSlipEventLogTicketCreatorTest.cs
index 599a3105..68862b30 100644
--- a/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/CashSlipEventLogTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/CashSlipEventLogTicketCreatorTest.cs
@@ -7,6 +7,7 @@
     using Accounting.Tickets;
     using Application.Contracts;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts.Tickets;
     using Hardware.Contracts.IO;
     using Hardware.Contracts.Printer;
@@ -66,6 +67,14 @@
                 .Verifiable();
 
             _target = new CashSlipEventLogTicketCreator();
+
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
         }
 
         /// <summary>
diff --git a/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/VoucherTicketsCreatorTest.cs b/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/VoucherTicketsCreatorTest.cs
index ac401f56..74d96f10 100644
--- a/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/VoucherTicketsCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Accounting.Tests/Tickets/VoucherTicketsCreatorTest.cs
@@ -4,6 +4,7 @@
     using System.Globalization;
     using Application.Contracts;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts;
     using Hardware.Contracts.Printer;
     using Kernel;
@@ -69,16 +70,24 @@
             _propertiesManager.Setup(m => m.GetProperty(ApplicationConstants.ConfigWizardIdentityPagePositionOverride, It.IsAny<IdentityFieldOverride>()))
                 .Returns((IdentityFieldOverride)null);
 
-            TicketCurrencyExtensions.PlayerTicketLocale = "en-US";
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+
+            TicketCurrencyExtensions.PlayerTicketLocale = cultureName;
             TicketCurrencyExtensions.SetCultureInfo(
-                "en-US",
-                new CultureInfo("en-US"),
-                new CultureInfo("en-US"),
+                cultureName,
+                new CultureInfo(cultureName),
+                new CultureInfo(cultureName),
                 "Cent",
                 "Cents",
                 true,
                 true,
-                "c"
+                minorUnitSymbol
             );
 
             _time = MoqServiceManager.CreateAndAddService<ITime>(MockBehavior.Strict, true);
@@ -90,7 +99,7 @@
                 .Returns(
                     (DateTime dateTime) => dateTime.ToString("G", CultureInfo.CurrentCulture));
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+             CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
         }
 
         /// <summary>
diff --git a/Test/Aristocrat.Monaco.Accounting.Tests/VoucherOutTicketProxyTest.cs b/Test/Aristocrat.Monaco.Accounting.Tests/VoucherOutTicketProxyTest.cs
index ddf5b56f..9330ca61 100644
--- a/Test/Aristocrat.Monaco.Accounting.Tests/VoucherOutTicketProxyTest.cs
+++ b/Test/Aristocrat.Monaco.Accounting.Tests/VoucherOutTicketProxyTest.cs
@@ -4,6 +4,7 @@
     using System.Globalization;
     using Application.Contracts;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts;
     using Hardware.Contracts.Printer;
     using Hardware.Contracts.Ticket;
@@ -58,18 +59,25 @@
             _propertiesManager.Setup(mock => mock.GetProperty(ApplicationConstants.CurrencyMultiplierKey, It.IsAny<object>()))
                 .Returns(CurrencyMultiplier);
             _time.Setup(mock => mock.GetLocationTime(_ticketTimestamp)).Returns(_ticketTimestamp);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
 
-            TicketCurrencyExtensions.PlayerTicketLocale = CultureInfo.CurrentCulture.Name;
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
+
+            TicketCurrencyExtensions.PlayerTicketLocale = cultureName;
             TicketCurrencyExtensions.SetCultureInfo(
-                CultureInfo.CurrentCulture.Name,
-                CultureInfo.CurrentCulture,
-                CultureInfo.CurrentCulture,
+                cultureName,
+                new CultureInfo(cultureName),
+                new CultureInfo(cultureName),
                 null,
                 null,
                 true,
                 true,
-                "c"
+                minorUnitSymbol
             );
         }
 
diff --git a/Test/Aristocrat.Monaco.Accouting.UI.Tests/BillsMetersPageViewModelTest.cs b/Test/Aristocrat.Monaco.Accouting.UI.Tests/BillsMetersPageViewModelTest.cs
index 65027312..dc7a39e1 100644
--- a/Test/Aristocrat.Monaco.Accouting.UI.Tests/BillsMetersPageViewModelTest.cs
+++ b/Test/Aristocrat.Monaco.Accouting.UI.Tests/BillsMetersPageViewModelTest.cs
@@ -15,6 +15,7 @@
     using Application.Contracts.OperatorMenu;
     using Application.Contracts.Tickets;
     using Application.UI.Events;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Application.Contracts.Localization;
     using Aristocrat.Monaco.Hardware.Contracts.Button;
     using Aristocrat.Monaco.Hardware.Contracts.IO;
@@ -94,17 +95,24 @@
             _meterManager.Setup(m => m.GetPeriodMetersClearanceDate(It.IsAny<string>())).Returns(clearDateTime);
             MoqServiceManager.Instance.Setup(m => m.GetService<IMeterManager>()).Returns(_meterManager.Object);
 
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
             _localizerFactory = MoqServiceManager.CreateAndAddService<ILocalizerFactory>(MockBehavior.Default);
             _localizerFactory.Setup(m => m.For(It.IsAny<string>())).Returns<string>(
             name =>
             {
                 var localizer = new Mock<ILocalizer>();
-                localizer.Setup(m => m.CurrentCulture).Returns(new CultureInfo("en-US"));
+                localizer.Setup(m => m.CurrentCulture).Returns(culture);
                 localizer.Setup(m => m.GetString(It.IsAny<string>())).Returns<string>(s => s);
                 return localizer.Object;
             });
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+            string minorUnitSymbol = "c";
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
 
             var monitor = MoqServiceManager.CreateAndAddService<IOperatorMenuGamePlayMonitor>(MockBehavior.Strict);
             monitor.Setup(m => m.InGameRound).Returns(false);
diff --git a/Test/Aristocrat.Monaco.Accouting.UI.Tests/HandpayMetersPageViewModelTest.cs b/Test/Aristocrat.Monaco.Accouting.UI.Tests/HandpayMetersPageViewModelTest.cs
index f92df150..c47b24cc 100644
--- a/Test/Aristocrat.Monaco.Accouting.UI.Tests/HandpayMetersPageViewModelTest.cs
+++ b/Test/Aristocrat.Monaco.Accouting.UI.Tests/HandpayMetersPageViewModelTest.cs
@@ -17,6 +17,7 @@
     using Application.Contracts.OperatorMenu;
     using Application.Contracts.Tickets;
     using Application.UI.Events;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Hardware.Contracts.Button;
     using Aristocrat.Monaco.Hardware.Contracts.IO;
     using Aristocrat.Monaco.UI.Common.Events;
@@ -111,7 +112,13 @@
             var doors = new Mock<IDoorService>(MockBehavior.Default);
             MoqServiceManager.AddService<IDoorService>(doors.As<IService>().Object);
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
 
             MoqServiceManager.CreateAndAddService<ICabinetDetectionService>(MockBehavior.Loose);
 
diff --git a/Test/Aristocrat.Monaco.Accouting.UI.Tests/VoucherMetersPageViewModelTest.cs b/Test/Aristocrat.Monaco.Accouting.UI.Tests/VoucherMetersPageViewModelTest.cs
index 8dd89147..ac8e482f 100644
--- a/Test/Aristocrat.Monaco.Accouting.UI.Tests/VoucherMetersPageViewModelTest.cs
+++ b/Test/Aristocrat.Monaco.Accouting.UI.Tests/VoucherMetersPageViewModelTest.cs
@@ -16,6 +16,7 @@
     using Application.Contracts.OperatorMenu;
     using Application.Contracts.Tickets;
     using Application.UI.Events;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Application.Contracts.Localization;
     using Aristocrat.Monaco.Hardware.Contracts.Button;
     using Aristocrat.Monaco.Hardware.Contracts.IO;
@@ -107,7 +108,15 @@
 
             var doors = new Mock<IDoorService>(MockBehavior.Default);
             MoqServiceManager.AddService<IDoorService>(doors.As<IService>().Object);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+            string minorUnitSymbol = "c";
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
+
             MoqServiceManager.CreateAndAddService<ICabinetDetectionService>(MockBehavior.Loose);
             _target = new VoucherMetersPageViewModel();
 
diff --git a/Test/Aristocrat.Monaco.Application.Contracts.Tests/Extensions/CurrencyExtensionsTests.cs b/Test/Aristocrat.Monaco.Application.Contracts.Tests/Extensions/CurrencyExtensionsTests.cs
index 71679a32..16d83098 100644
--- a/Test/Aristocrat.Monaco.Application.Contracts.Tests/Extensions/CurrencyExtensionsTests.cs
+++ b/Test/Aristocrat.Monaco.Application.Contracts.Tests/Extensions/CurrencyExtensionsTests.cs
@@ -7,10 +7,10 @@
     [TestClass]
     public class CurrencyExtensionsTests
     {
-        [DataRow("en-US", 2, 1000, 0.01)]
-        [DataRow("en-US", 0, 1000, 1.0)]
+        [DataRow("USD", "c", "en-US", 2, 1000, 0.01)]
+        [DataRow("USD", "c", "en-US", 0, 1000, 1.0)]
         [DataTestMethod]
-        public void MillicentsToDollarsTest(string cultureName, int numberOfDecimalDigits, long millicents, double expectedResult)
+        public void MillicentsToDollarsTest(string currencyCode, string minorUnitSymbol, string cultureName, int numberOfDecimalDigits, long millicents, double expectedResult)
         {
             var culture = new CultureInfo(cultureName)
             {
@@ -20,14 +20,17 @@
                 }
             };
 
-            CurrencyExtensions.SetCultureInfo(culture);
+            var region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency.Currency(currencyCode, region, culture, minorUnitSymbol);
+
+            CurrencyExtensions.SetCultureInfo(currencyCode, culture);
             Assert.AreEqual(Convert.ToDecimal(expectedResult), millicents.MillicentsToDollars());
         }
 
-        [DataRow("en-US", 2, 1, 0.01)]
-        [DataRow("en-US", 0, 1, 1.0)]
+        [DataRow("USD", "c", "en-US", 2, 1, 0.01)]
+        [DataRow("USD", "c", "en-US", 0, 1, 1.0)]
         [DataTestMethod]
-        public void CentsToDollarsTest(string cultureName, int numberOfDecimalDigits, long millicents, double expectedResult)
+        public void CentsToDollarsTest(string currencyCode, string minorUnitSymbol, string cultureName, int numberOfDecimalDigits, long millicents, double expectedResult)
         {
             var culture = new CultureInfo(cultureName)
             {
@@ -37,14 +40,17 @@
                 }
             };
 
-            CurrencyExtensions.SetCultureInfo(culture);
+            var region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency.Currency(currencyCode, region, culture, minorUnitSymbol);
+
+            CurrencyExtensions.SetCultureInfo(currencyCode, culture);
             Assert.AreEqual(Convert.ToDecimal(expectedResult), millicents.CentsToDollars());
         }
 
-        [DataRow("en-US", 2, 1000, 1)]
-        [DataRow("en-US", 0, 1000, 1)]
+        [DataRow("USD", "c", "en-US", 2, 1000, 1)]
+        [DataRow("USD", "c", "en-US", 0, 1000, 1)]
         [DataTestMethod]
-        public void MillicentsToCents(string cultureName, int numberOfDecimalDigits, long millicents, long expectedResult)
+        public void MillicentsToCents(string currencyCode, string minorUnitSymbol, string cultureName, int numberOfDecimalDigits, long millicents, long expectedResult)
         {
             var culture = new CultureInfo(cultureName)
             {
@@ -54,7 +60,10 @@
                 }
             };
 
-            CurrencyExtensions.SetCultureInfo(culture);
+            var region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency.Currency(currencyCode, region, culture, minorUnitSymbol);
+
+            CurrencyExtensions.SetCultureInfo(currencyCode, culture);
             Assert.AreEqual(expectedResult, millicents.MillicentsToCents());
         }
     }
diff --git a/Test/Aristocrat.Monaco.Application.Tests/Helper/CurrencyCultureHelperTest.cs b/Test/Aristocrat.Monaco.Application.Tests/Helper/CurrencyCultureHelperTest.cs
index bff59939..8817c484 100644
--- a/Test/Aristocrat.Monaco.Application.Tests/Helper/CurrencyCultureHelperTest.cs
+++ b/Test/Aristocrat.Monaco.Application.Tests/Helper/CurrencyCultureHelperTest.cs
@@ -21,30 +21,30 @@ namespace Aristocrat.Monaco.Application.Tests.Helper
     [TestClass]
     public class CurrencyCultureHelperTest
     {
-        readonly Collection<int>  _supportedNotes = new Collection<int>() { 1, 2, 10 };
-        readonly List<string> _BNASupportedCodes = new List<string>()
+        private readonly Collection<int>  _supportedNotes = new Collection<int>() { 1, 2, 10 };
+        private readonly List<string> _BNASupportedCodes = new List<string>()
         {
             "USD",
             "EUR"
         };
 
-        const string _euroMajorSymbol = "â¬";
-        const string _euroMinorSymbol = "Â¢";
-        const string _separatorComma = ",";
-        const string _separatorDot = ".";
-        const int _symbolPostPlacement = 0;
-        const int _symbolPrePlacement = 1;
+        private const string _euroMajorSymbol = "â¬";
+        private const string _euroMinorSymbol = "Â¢";
+        private const string _separatorComma = ",";
+        private const string _separatorDot = ".";
+        private const int _symbolPostPlacement = 0;
+        private const int _symbolPrePlacement = 1;
 
-        const string _currencyCodeEuro = "EUR";
+        private const string _currencyCodeEuro = "EUR";
 
-        const int _numberOfSupportedCurrencies = 150;
+        private const int _numberOfSupportedCurrencies = 150;
 
-        Dictionary<string, CurrencyDefaultsCurrencyInfo> _currencyDefaults;
+        private Dictionary<string, CurrencyDefaultsCurrencyInfo> _currencyDefaults = new Dictionary<string, CurrencyDefaultsCurrencyInfo>();
+        private List<string> _euroCurrencyDescription;
+        private Dictionary<string, CurrencyDefaultsCurrencyInfo> _emptyCurrencyDefaults = new Dictionary<string, CurrencyDefaultsCurrencyInfo>();
 
-        List<string> _euroCurrencyDescriptionWithMinors;
 
-        Mock<ILog> _loggerMock = new Mock<ILog>();
-        Dictionary<string, CurrencyDefaultsCurrencyInfo> _emptyCurrencyDefaults = new Dictionary<string, CurrencyDefaultsCurrencyInfo>();
+        private Mock<ILog> _loggerMock = new Mock<ILog>();
 
         [TestInitialize]
         public void Initialize()
@@ -86,10 +86,10 @@ namespace Aristocrat.Monaco.Application.Tests.Helper
                         }
                 }
             };
-            _euroCurrencyDescriptionWithMinors = new List<string>()
+            _euroCurrencyDescription = new List<string>()
             {
-                "Euro EUR â¬1,000.00 10Â¢",
-                "Euro EUR 1,000.00â¬ 10Â¢"
+                "Euro EUR â¬1,000.00",
+                "Euro EUR 1,000.00â¬"
             };
         }
 
@@ -153,8 +153,8 @@ namespace Aristocrat.Monaco.Application.Tests.Helper
             Assert.AreEqual(_currencyDefaults[_currencyCodeEuro]?.Formats.Length, euroCurrencies.Count());
 
             // Check if the formats are correct
-            Assert.IsTrue(_euroCurrencyDescriptionWithMinors.Any(d => d.Equals(euroCurrencies[0].DescriptionWithMinorSymbol)));
-            Assert.IsTrue(_euroCurrencyDescriptionWithMinors.Any(d => d.Equals(euroCurrencies[1].DescriptionWithMinorSymbol)));
+            Assert.IsTrue(_euroCurrencyDescription.Any(d => d.Equals(euroCurrencies[0].Description)));
+            Assert.IsTrue(_euroCurrencyDescription.Any(d => d.Equals(euroCurrencies[1].Description)));
         }
 
         [TestMethod]
diff --git a/Test/Aristocrat.Monaco.Application.Tests/Tickets/EventLogTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Application.Tests/Tickets/EventLogTicketCreatorTest.cs
index 9d01e318..47e3269a 100644
--- a/Test/Aristocrat.Monaco.Application.Tests/Tickets/EventLogTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Application.Tests/Tickets/EventLogTicketCreatorTest.cs
@@ -6,6 +6,8 @@
     using System.Globalization;
     using System.Linq;
     using Application.Tickets;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
+    using Aristocrat.Monaco.Application.Contracts.Extensions;
     using Contracts;
     using Contracts.Tickets;
     using Contracts.TiltLogger;
@@ -104,6 +106,14 @@
             _printerMock.Setup(mock => mock.GetCharactersPerLine(false, 0)).Returns(36);
 
             _target = new EventLogTicketCreator();
+
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
         }
 
         [TestMethod]
diff --git a/Test/Aristocrat.Monaco.Application.Tests/Tickets/MetersTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Application.Tests/Tickets/MetersTicketCreatorTest.cs
index 877cbc46..17f0b621 100644
--- a/Test/Aristocrat.Monaco.Application.Tests/Tickets/MetersTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Application.Tests/Tickets/MetersTicketCreatorTest.cs
@@ -7,6 +7,7 @@
     using System.Globalization;
     using System.Linq;
     using Application.Tickets;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Hardware.Contracts.Printer;
     using Contracts;
     using Contracts.Extensions;
@@ -32,7 +33,7 @@
         private Mock<IPropertiesManager> _propertiesManager;
 
         // Test target
-        MetersTicketCreator _target;
+        private MetersTicketCreator _target;
         private Mock<ITime> _time;
         private Mock<IPrinter> _printerMock;
 
@@ -59,7 +60,15 @@
             _meterManager = MoqServiceManager.CreateAndAddService<IMeterManager>(MockBehavior.Strict);
             _time = MoqServiceManager.CreateAndAddService<ITime>(MockBehavior.Strict);
             _time.Setup(t => t.GetLocationTime(It.IsAny<DateTime>())).Returns(DateTime.Now);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
 
             _printerMock = MoqServiceManager.CreateAndAddService<IPrinter>(MockBehavior.Strict);
             _printerMock.Setup(mock => mock.PaperState).Returns(PaperStates.Full);
diff --git a/Test/Aristocrat.Monaco.Application.Tests/Tickets/PeriodicResetTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Application.Tests/Tickets/PeriodicResetTicketCreatorTest.cs
index aacfa721..bae9d43a 100644
--- a/Test/Aristocrat.Monaco.Application.Tests/Tickets/PeriodicResetTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Application.Tests/Tickets/PeriodicResetTicketCreatorTest.cs
@@ -18,6 +18,7 @@
     using Microsoft.VisualStudio.TestTools.UnitTesting;
     using Moq;
     using Test.Common;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
 
     /// <summary>
     ///     Unit Tests for PeriodicResetTicketCreator
@@ -111,7 +112,16 @@
             _serviceManager = MoqServiceManager.CreateInstance(MockBehavior.Strict);
             MockLocalization.Setup(MockBehavior.Strict);
             _propertiesManager = MoqServiceManager.CreateAndAddService<IPropertiesManager>(MockBehavior.Strict);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
+
             // Don't care about millisecond precision, makes time verifications easier
             // Mocked interfaces return UTC values
             var now = DateTime.UtcNow;
diff --git a/Test/Aristocrat.Monaco.Gaming.Tests/Commands/ConfigureClientCommandHandlerTests.cs b/Test/Aristocrat.Monaco.Gaming.Tests/Commands/ConfigureClientCommandHandlerTests.cs
index 6be367a7..d05deff8 100644
--- a/Test/Aristocrat.Monaco.Gaming.Tests/Commands/ConfigureClientCommandHandlerTests.cs
+++ b/Test/Aristocrat.Monaco.Gaming.Tests/Commands/ConfigureClientCommandHandlerTests.cs
@@ -4,6 +4,7 @@
     using System.Collections.Generic;
     using System.Globalization;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Gaming.Contracts.Configuration;
     using Contracts;
     using Contracts.Lobby;
@@ -69,7 +70,14 @@
             _lobbyStateManager.Setup(m => m.AllowSingleGameAutoLaunch).Returns(false);
             _cabinetDetectionService.Setup(m => m.ButtonDeckType).Returns(It.IsAny<string>());
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+            // set up currency
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
         }
 
         [TestMethod]
diff --git a/Test/Aristocrat.Monaco.Gaming.Tests/GameHelpTextProviderTest.cs b/Test/Aristocrat.Monaco.Gaming.Tests/GameHelpTextProviderTest.cs
index 10a9960f..34903878 100644
--- a/Test/Aristocrat.Monaco.Gaming.Tests/GameHelpTextProviderTest.cs
+++ b/Test/Aristocrat.Monaco.Gaming.Tests/GameHelpTextProviderTest.cs
@@ -6,6 +6,7 @@
     using System.Linq;
     using Accounting.Contracts;
     using Application.Contracts.Extensions;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Gaming.Contracts;
     using Aristocrat.Monaco.Gaming.Contracts.Progressives;
     using Aristocrat.Monaco.Gaming.Progressives;
@@ -30,7 +31,10 @@
             MoqServiceManager.CreateInstance(MockBehavior.Strict);
             MoqServiceManager.CreateAndAddService<IPrinter>(MockBehavior.Strict);
             MockLocalization.Setup(MockBehavior.Strict);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture);
+
+            RegionInfo region = new RegionInfo(CultureInfo.CurrentCulture.Name);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, CultureInfo.CurrentCulture, "c");
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, CultureInfo.CurrentCulture);
 
             _runtime = new Mock<IRuntime>();
             _properties = new Mock<IPropertiesManager>(MockBehavior.Loose);
diff --git a/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/AuditTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/AuditTicketCreatorTest.cs
index 259470ab..374613a7 100644
--- a/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/AuditTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/AuditTicketCreatorTest.cs
@@ -19,6 +19,7 @@
     using System.Linq;
     using Application.Contracts.Extensions;
     using Test.Common;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
 
     #endregion
 
@@ -44,7 +45,7 @@
         private Mock<IPropertiesManager> _propertiesManager;
 
         // Test target
-        AuditTicketCreator _target;
+        private AuditTicketCreator _target;
         private Mock<ITime> _time;
         private Mock<IGamePlayState> _gameState;
         private Mock<IGameHistory> _gameHistory;
@@ -141,7 +142,11 @@
         [TestMethod]
         public void CreateAuditTicketTest()
         {
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+            string minorUnitSymbol = "c";
+            RegionInfo region = new RegionInfo(CultureInfo.CurrentCulture.Name);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, CultureInfo.CurrentCulture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, CultureInfo.CurrentCulture, null, null, true, true, minorUnitSymbol);
+
             // Mock properties
             string retailerName = "Test Retailer";
             string retailerId = "Test Retailer ID";
diff --git a/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/GameMetersTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/GameMetersTicketCreatorTest.cs
index f5bfa86d..354427af 100644
--- a/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/GameMetersTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/GameMetersTicketCreatorTest.cs
@@ -7,6 +7,7 @@
     using Application.Contracts;
     using Application.Contracts.Extensions;
     using Application.Contracts.MeterPage;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Contracts;
     using Contracts.Meters;
     using Contracts.Tickets;
@@ -39,7 +40,14 @@
             _target = new GameMetersTicketCreator();
 
             MockLocalization.Setup(MockBehavior.Strict);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture, null, null, true, true, minorUnitSymbol);
         }
 
         [TestCleanup]
diff --git a/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/SingaporeClubsAuditTicketCreatorTest.cs b/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/SingaporeClubsAuditTicketCreatorTest.cs
index f921017f..08f4ea15 100644
--- a/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/SingaporeClubsAuditTicketCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Gaming.Tests/Tickets/SingaporeClubsAuditTicketCreatorTest.cs
@@ -8,6 +8,7 @@
     using Application.Contracts;
     using Application.Contracts.Extensions;
     using Application.Contracts.Tickets;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Hardware.Contracts.Printer;
     using Contracts;
     using Contracts.Models;
@@ -353,7 +354,14 @@
         [TestMethod]
         public void TicketCreationAndContentTest()
         {
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture);
+            string minorUnitSymbol = "c";
+            string cultureName = "en-US";
+            CultureInfo culture = new CultureInfo(cultureName);
+
+            RegionInfo region = new RegionInfo(cultureName);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, culture, minorUnitSymbol);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, culture);
+
 
             // Mock properties
             var serialNumber = "123";
diff --git a/Test/Aristocrat.Monaco.Gaming.UI.Tests/ViewModels/OperatorMenu/LogDetailsViewModelTest.cs b/Test/Aristocrat.Monaco.Gaming.UI.Tests/ViewModels/OperatorMenu/LogDetailsViewModelTest.cs
index b13a2108..f84b9ee7 100644
--- a/Test/Aristocrat.Monaco.Gaming.UI.Tests/ViewModels/OperatorMenu/LogDetailsViewModelTest.cs
+++ b/Test/Aristocrat.Monaco.Gaming.UI.Tests/ViewModels/OperatorMenu/LogDetailsViewModelTest.cs
@@ -13,6 +13,7 @@
     using Application.Contracts.OperatorMenu;
     using Application.Contracts.TiltLogger;
     using Application.UI.Models;
+    using Aristocrat.Monaco.Application.Contracts.Currency;
     using Aristocrat.Monaco.Hardware.Contracts.Ticket;
     using Castle.Core.Internal;
     using Common;
@@ -90,7 +91,9 @@
             _levelProvider.Setup(p => p.GetProgressiveLevels())
                 .Returns(_levels);
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture);
+            RegionInfo region = new RegionInfo(CultureInfo.CurrentCulture.Name);
+            CurrencyExtensions.Currency = new Currency(region.ISOCurrencySymbol, region, CultureInfo.CurrentCulture, "c");
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, CultureInfo.CurrentCulture);
         }
 
         [TestCleanup]
diff --git a/Test/Aristocrat.Monaco.Mgam.Tests/Services/HandpayValidatorTest.cs b/Test/Aristocrat.Monaco.Mgam.Tests/Services/HandpayValidatorTest.cs
index e9eb2bc1..b3c744b1 100644
--- a/Test/Aristocrat.Monaco.Mgam.Tests/Services/HandpayValidatorTest.cs
+++ b/Test/Aristocrat.Monaco.Mgam.Tests/Services/HandpayValidatorTest.cs
@@ -41,7 +41,10 @@
             var factory = new Mock<ILocalizerFactory>();
             MoqServiceManager.Instance.Setup(m => m.GetService<ILocalizerFactory>()).Returns(factory.Object);
             factory.Setup(x => x.For(It.IsAny<string>())).Returns(new Mock<ILocalizer>().Object);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            RegionInfo region = new RegionInfo(CultureInfo.CurrentCulture.Name);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, CultureInfo.CurrentCulture, null, null, true, true, "c");
+
 
             _logger = new Mock<ILogger<HandpayValidator>>();
             _properties = new Mock<IPropertiesManager>();
diff --git a/Test/Aristocrat.Monaco.Mgam.Tests/Services/VoucherValidatorTest.cs b/Test/Aristocrat.Monaco.Mgam.Tests/Services/VoucherValidatorTest.cs
index 23ab56e2..46ed4d28 100644
--- a/Test/Aristocrat.Monaco.Mgam.Tests/Services/VoucherValidatorTest.cs
+++ b/Test/Aristocrat.Monaco.Mgam.Tests/Services/VoucherValidatorTest.cs
@@ -70,7 +70,10 @@
             var factory = new Mock<ILocalizerFactory>();
             MoqServiceManager.Instance.Setup(m => m.GetService<ILocalizerFactory>()).Returns(factory.Object);
             factory.Setup(x => x.For(It.IsAny<string>())).Returns(new Mock<ILocalizer>().Object);
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+
+            RegionInfo region = new RegionInfo(CultureInfo.CurrentCulture.Name);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, CultureInfo.CurrentCulture, null, null, true, true, "c");
+
             _logger = new Mock<ILogger<VoucherValidator>>();
 
             _eventBus = new Mock<IEventBus>();
diff --git a/Test/Aristocrat.Monaco.Sas.Tests/AftTransferProvider/SASAftReceiptCreatorTest.cs b/Test/Aristocrat.Monaco.Sas.Tests/AftTransferProvider/SASAftReceiptCreatorTest.cs
index 6f56c206..cd797820 100644
--- a/Test/Aristocrat.Monaco.Sas.Tests/AftTransferProvider/SASAftReceiptCreatorTest.cs
+++ b/Test/Aristocrat.Monaco.Sas.Tests/AftTransferProvider/SASAftReceiptCreatorTest.cs
@@ -75,7 +75,9 @@
             _propertiesManager.Setup(m => m.GetProperty(ApplicationConstants.LocalizationPlayerTicketDateFormat, It.IsAny<string>())).Returns(TestDateFormat);
             _serviceManager.Setup(m => m.GetService<IPropertiesManager>()).Returns(_propertiesManager.Object);
 
-            CurrencyExtensions.SetCultureInfo(CultureInfo.CurrentCulture, null, null, true, true, "c");
+            RegionInfo region = new RegionInfo(CultureInfo.CurrentCulture.Name);
+            CurrencyExtensions.SetCultureInfo(region.ISOCurrencySymbol, CultureInfo.CurrentCulture, null, null, true, true, "c");
+
 
             _aftData = new AftData();
         }
-- 
2.39.0.windows.1

